{
  "swagger" : "2.0",
  "schemes" : [
    "https"
  ],
  "host" : "api.elmah.io",
  "info" : {
    "contact" : {
      "x-twitter" : "elmah_io"
    },
    "title" : "elmah.io",
    "version" : "v3",
    "x-apisguru-categories" : [
      "cloud"
    ],
    "x-logo" : {
      "url" : "https://twitter.com/elmah_io/profile_image?size=original"
    },
    "x-origin" : [
      {
        "format" : "swagger",
        "url" : "https://api.elmah.io/swagger/docs/v3",
        "version" : "2.0"
      }
    ],
    "x-providerName" : "elmah.io"
  },
  "securityDefinitions" : {
    "apiKey" : {
      "description" : "API Key Authentication",
      "in" : "query",
      "name" : "api_key",
      "type" : "apiKey"
    }
  },
  "paths" : {
    "/v3/deployments" : {
      "get" : {
        "consumes" : [
        ],
        "deprecated" : false,
        "operationId" : "Deployments_GetAll",
        "produces" : [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "items" : {
                "$ref" : "#/definitions/Deployment"
              },
              "type" : "array"
            }
          },
          "402" : {
            "description" : "Tried to call the deployment API without deployment tracking enabled."
          }
        },
        "summary" : "Fetch a list of deployments.",
        "tags" : [
          "Deployments"
        ]
      },
      "post" : {
        "consumes" : [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "deprecated" : false,
        "operationId" : "Deployments_Create",
        "parameters" : [
          {
            "description" : "The deployment object to create.",
            "in" : "body",
            "name" : "deployment",
            "required" : true,
            "schema" : {
              "$ref" : "#/definitions/CreateDeployment"
            }
          }
        ],
        "produces" : [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses" : {
          "201" : {
            "description" : "Deployment where successfully created."
          },
          "400" : {
            "description" : "Model not valid."
          },
          "402" : {
            "description" : "Tried to call the deployment API without deployment tracking enabled."
          },
          "409" : {
            "description" : "Existing deployment with same version number already found in organization."
          }
        },
        "summary" : "Create a new deployment.",
        "tags" : [
          "Deployments"
        ]
      }
    },
    "/v3/deployments/{id}" : {
      "delete" : {
        "consumes" : [
        ],
        "deprecated" : false,
        "description" : "This endpoint doesn't clear the version number of messages already annotated with this deployment version.",
        "operationId" : "Deployments_Delete",
        "parameters" : [
          {
            "description" : "The ID of the deployment to delete.",
            "in" : "path",
            "name" : "id",
            "required" : true,
            "type" : "string"
          }
        ],
        "produces" : [
        ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "400" : {
            "description" : "Id not specified"
          },
          "402" : {
            "description" : "Tried to call the deployment API without deployment tracking enabled."
          },
          "404" : {
            "description" : "Deployment with specified id not found."
          }
        },
        "summary" : "Delete a deployment by its ID.",
        "tags" : [
          "Deployments"
        ]
      },
      "get" : {
        "consumes" : [
        ],
        "deprecated" : false,
        "operationId" : "Deployments_Get",
        "parameters" : [
          {
            "description" : "The ID of the deployment to fetch.",
            "in" : "path",
            "name" : "id",
            "required" : true,
            "type" : "string"
          }
        ],
        "produces" : [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Deployment"
            }
          },
          "400" : {
            "description" : "Id not specified"
          },
          "402" : {
            "description" : "Tried to call the deployment API without deployment tracking enabled."
          },
          "404" : {
            "description" : "Deployment with specified id not found."
          }
        },
        "summary" : "Fetch a deployment by its ID.",
        "tags" : [
          "Deployments"
        ]
      }
    },
    "/v3/logs" : {
      "get" : {
        "consumes" : [
        ],
        "deprecated" : false,
        "operationId" : "Logs_GetAll",
        "produces" : [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses" : {
          "200" : {
            "description" : "Request for logs successful",
            "schema" : {
              "items" : {
                "$ref" : "#/definitions/Log"
              },
              "type" : "array"
            }
          },
          "401" : {
            "description" : "No access to logs"
          },
          "402" : {
            "description" : "Tried to call the logs API but the trial expired."
          }
        },
        "summary" : "Fetch a list of logs.",
        "tags" : [
          "Logs"
        ]
      },
      "post" : {
        "consumes" : [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "deprecated" : false,
        "operationId" : "Logs_Create",
        "parameters" : [
          {
            "description" : "The log object to create.",
            "in" : "body",
            "name" : "log",
            "required" : true,
            "schema" : {
              "$ref" : "#/definitions/CreateLog"
            }
          }
        ],
        "produces" : [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses" : {
          "201" : {
            "description" : "Log where successfully created."
          },
          "401" : {
            "description" : "No access to logs."
          },
          "402" : {
            "description" : "Tried to call the logs API but the trial expired."
          }
        },
        "summary" : "Create a new log.",
        "tags" : [
          "Logs"
        ]
      }
    },
    "/v3/logs/{id}" : {
      "get" : {
        "consumes" : [
        ],
        "deprecated" : false,
        "operationId" : "Logs_Get",
        "parameters" : [
          {
            "description" : "The ID of the log to fetch.",
            "in" : "path",
            "name" : "id",
            "required" : true,
            "type" : "string"
          }
        ],
        "produces" : [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses" : {
          "200" : {
            "description" : "Request for log successful",
            "schema" : {
              "$ref" : "#/definitions/Log"
            }
          },
          "401" : {
            "description" : "No access to log"
          },
          "402" : {
            "description" : "Tried to call the logs API but the trial expired."
          },
          "404" : {
            "description" : "Log not found"
          }
        },
        "summary" : "Fetch a log by its ID.",
        "tags" : [
          "Logs"
        ]
      }
    },
    "/v3/messages/{logId}" : {
      "delete" : {
        "consumes" : [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "deprecated" : false,
        "operationId" : "Messages_DeleteAll",
        "parameters" : [
          {
            "description" : "The ID of the log containing the message.",
            "in" : "path",
            "name" : "logId",
            "required" : true,
            "type" : "string"
          },
          {
            "description" : "A search object containing query, time filters etc.",
            "in" : "body",
            "name" : "search",
            "required" : true,
            "schema" : {
              "$ref" : "#/definitions/Search"
            }
          }
        ],
        "produces" : [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses" : {
          "200" : {
            "description" : "Messages where deleted."
          },
          "400" : {
            "description" : "Something wrong with the query parameters"
          },
          "401" : {
            "description" : "No access to log."
          },
          "404" : {
            "description" : "Log not found."
          },
          "429" : {
            "description" : "A maximum of 500 requests per minute and 3600 requests per hour are permitted"
          }
        },
        "summary" : "Deletes a list of messages by logid and query.",
        "tags" : [
          "Messages"
        ]
      },
      "get" : {
        "consumes" : [
        ],
        "deprecated" : false,
        "operationId" : "Messages_GetAll",
        "parameters" : [
          {
            "description" : "The ID of the log containing the messages.",
            "in" : "path",
            "name" : "logId",
            "required" : true,
            "type" : "string"
          },
          {
            "description" : "The page number of the result.",
            "format" : "int32",
            "in" : "query",
            "name" : "pageIndex",
            "required" : false,
            "type" : "integer"
          },
          {
            "description" : "The number of messages to load (max 100) or 15 if not set.",
            "format" : "int32",
            "in" : "query",
            "name" : "pageSize",
            "required" : false,
            "type" : "integer"
          },
          {
            "description" : "A full-text or Lucene query to limit the messages by.",
            "in" : "query",
            "name" : "query",
            "required" : false,
            "type" : "string"
          },
          {
            "description" : "A start date and time to search from (not included).",
            "format" : "date-time",
            "in" : "query",
            "name" : "from",
            "required" : false,
            "type" : "string"
          },
          {
            "description" : "An end date and time to search to (not included).",
            "format" : "date-time",
            "in" : "query",
            "name" : "to",
            "required" : false,
            "type" : "string"
          },
          {
            "description" : "Include headers like server variables and cookies in the result (slower).",
            "in" : "query",
            "name" : "includeHeaders",
            "required" : false,
            "type" : "boolean"
          }
        ],
        "produces" : [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses" : {
          "200" : {
            "description" : "Log found and may contain messages",
            "schema" : {
              "$ref" : "#/definitions/MessagesResult"
            }
          },
          "400" : {
            "description" : "Something wrong with the query parameters"
          },
          "401" : {
            "description" : "No access to log"
          },
          "429" : {
            "description" : "A maximum of 500 requests per minute and 3600 requests per hour are permitted"
          }
        },
        "summary" : "Fetch messages from a log.",
        "tags" : [
          "Messages"
        ]
      },
      "post" : {
        "consumes" : [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "deprecated" : false,
        "operationId" : "Messages_Create",
        "parameters" : [
          {
            "description" : "The ID of the log which should contain the new message.",
            "in" : "path",
            "name" : "logId",
            "required" : true,
            "type" : "string"
          },
          {
            "description" : "The message object to create.",
            "in" : "body",
            "name" : "message",
            "required" : true,
            "schema" : {
              "$ref" : "#/definitions/CreateMessage"
            }
          }
        ],
        "produces" : [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses" : {
          "200" : {
            "description" : "Message where not created."
          },
          "201" : {
            "description" : "Message where successfully created."
          },
          "400" : {
            "description" : "Something wrong with the query parameters"
          },
          "401" : {
            "description" : "No access to log"
          },
          "403" : {
            "description" : "Request limit reached and message where not created."
          },
          "404" : {
            "description" : "Log not found."
          },
          "413" : {
            "description" : "Message too large. Messages must not exceed 256 kb."
          },
          "429" : {
            "description" : "A maximum of 500 requests per minute and 3600 requests per hour are permitted"
          }
        },
        "summary" : "Create a new message.",
        "tags" : [
          "Messages"
        ]
      }
    },
    "/v3/messages/{logId}/{id}" : {
      "delete" : {
        "consumes" : [
        ],
        "deprecated" : false,
        "operationId" : "Messages_Delete",
        "parameters" : [
          {
            "description" : "The ID of the message to delete.",
            "in" : "path",
            "name" : "id",
            "required" : true,
            "type" : "string"
          },
          {
            "description" : "The ID of the log containing the message.",
            "in" : "path",
            "name" : "logId",
            "required" : true,
            "type" : "string"
          }
        ],
        "produces" : [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses" : {
          "200" : {
            "description" : "Message where deleted."
          },
          "400" : {
            "description" : "Something wrong with the query parameters"
          },
          "401" : {
            "description" : "No access to log."
          },
          "404" : {
            "description" : "Log or message not found."
          },
          "429" : {
            "description" : "A maximum of 500 requests per minute and 3600 requests per hour are permitted"
          }
        },
        "summary" : "Delete a message by its ID.",
        "tags" : [
          "Messages"
        ]
      },
      "get" : {
        "consumes" : [
        ],
        "deprecated" : false,
        "operationId" : "Messages_Get",
        "parameters" : [
          {
            "description" : "The ID of the message to fetch.",
            "in" : "path",
            "name" : "id",
            "required" : true,
            "type" : "string"
          },
          {
            "description" : "The ID of the log containing the message.",
            "in" : "path",
            "name" : "logId",
            "required" : true,
            "type" : "string"
          }
        ],
        "produces" : [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses" : {
          "200" : {
            "description" : "Message found.",
            "schema" : {
              "$ref" : "#/definitions/Message"
            }
          },
          "400" : {
            "description" : "Something wrong with the query parameters"
          },
          "401" : {
            "description" : "No access to log"
          },
          "404" : {
            "description" : "Message not found."
          },
          "429" : {
            "description" : "A maximum of 500 requests per minute and 3600 requests per hour are permitted"
          }
        },
        "summary" : "Fetch a message by its ID.",
        "tags" : [
          "Messages"
        ]
      }
    },
    "/v3/messages/{logId}/{id}/_hide" : {
      "post" : {
        "consumes" : [
        ],
        "deprecated" : false,
        "operationId" : "Messages_Hide",
        "parameters" : [
          {
            "description" : "The ID of the message to hide.",
            "in" : "path",
            "name" : "id",
            "required" : true,
            "type" : "string"
          },
          {
            "description" : "The ID of the log containing the message.",
            "in" : "path",
            "name" : "logId",
            "required" : true,
            "type" : "string"
          }
        ],
        "produces" : [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses" : {
          "200" : {
            "description" : "Message where hidden."
          },
          "400" : {
            "description" : "Something wrong with the query parameters"
          },
          "401" : {
            "description" : "No access to log."
          },
          "404" : {
            "description" : "Message not found."
          },
          "429" : {
            "description" : "A maximum of 500 requests per minute and 3600 requests per hour are permitted"
          }
        },
        "summary" : "Hide a message by its ID.",
        "tags" : [
          "Messages"
        ]
      }
    }
  },
  "definitions" : {
    "CreateDeployment" : {
      "properties" : {
        "created" : {
          "description" : "When was this deployment created in UTC. Defaults to current time if not specified.",
          "format" : "date-time",
          "type" : "string"
        },
        "description" : {
          "description" : "Optional description of this deployment. Can be markdown or clear text.",
          "type" : "string"
        },
        "logId" : {
          "description" : "As default, deployments are attached all logs of the organization. If you want a deployment to\r\n            attach to a single log only, set this to the ID of that log.",
          "type" : "string"
        },
        "userEmail" : {
          "description" : "The email of the person responsible for creating this deployment. This can be the email taken from\r\n            your deployment server (like VSTS or Octopus).",
          "type" : "string"
        },
        "userName" : {
          "description" : "The name of the person responsible for creating this deployment. This can be the name taken from\r\n            your deployment server (like VSTS or Octopus).",
          "type" : "string"
        },
        "version" : {
          "description" : "The version number of this deployment. The value of version can be a SemVer compliant string or any other\r\n            syntax that you are using as your version numbering scheme.",
          "type" : "string"
        }
      },
      "required" : [
        "version"
      ],
      "type" : "object"
    },
    "CreateLog" : {
      "properties" : {
        "name" : {
          "description" : "Name of the new log.",
          "type" : "string"
        }
      },
      "type" : "object"
    },
    "CreateMessage" : {
      "properties" : {
        "application" : {
          "description" : "Used to identify which application logged this message. You can use this if you have multiple applications and services logging to the same log",
          "type" : "string"
        },
        "cookies" : {
          "description" : "A key/value pair of cookies. This property only makes sense for logging messages related to web requests.",
          "items" : {
            "$ref" : "#/definitions/Item"
          },
          "type" : "array"
        },
        "data" : {
          "description" : "A key/value pair of user-defined fields and their values. When logging an exception, the Data dictionary of\r\n            the exception is copied to this property. You can add additional key/value pairs, by modifying the Data\r\n            dictionary on the exception or by supplying additional key/values to this API.",
          "items" : {
            "$ref" : "#/definitions/Item"
          },
          "type" : "array"
        },
        "dateTime" : {
          "description" : "The date and time in UTC of the message. If you don't provide us with a value in dateTime, we will set the current date and time in UTC.",
          "format" : "date-time",
          "type" : "string"
        },
        "detail" : {
          "description" : "A longer description of the message. For errors this could be a stacktrace, but it's really up to you what to log in there.",
          "type" : "string"
        },
        "form" : {
          "description" : "A key/value pair of form fields and their values. This property makes sense if logging message related to users inputting data in a form.",
          "items" : {
            "$ref" : "#/definitions/Item"
          },
          "type" : "array"
        },
        "hostname" : {
          "description" : "The hostname of the server logging the message.",
          "type" : "string"
        },
        "method" : {
          "description" : "If message relates to a HTTP request, you may send the HTTP method of that request. If you don't provide us with a method, we will try to find a key named REQUEST_METHOD in serverVariables.",
          "type" : "string"
        },
        "queryString" : {
          "description" : "A key/value pair of query string parameters. This property makes sense if logging message related to a HTTP request.",
          "items" : {
            "$ref" : "#/definitions/Item"
          },
          "type" : "array"
        },
        "serverVariables" : {
          "description" : "A key/value pair of server values. Server variables are typically related to handling requests in a webserver but could be used for other types of information as well.",
          "items" : {
            "$ref" : "#/definitions/Item"
          },
          "type" : "array"
        },
        "severity" : {
          "description" : "An enum value representing the severity of this message. The following values are allowed: Verbose, Debug, Information, Warning, Error, Fatal",
          "type" : "string"
        },
        "source" : {
          "description" : "The source of the code logging the message. This could be the assembly name.",
          "type" : "string"
        },
        "statusCode" : {
          "description" : "If the message logged relates to a HTTP status code, you can put the code in this property. This would probably only be relevant for errors,\r\n            but could be used for logging successful status codes as well.",
          "format" : "int32",
          "type" : "integer"
        },
        "title" : {
          "description" : "The textual title or headline of the message to log.",
          "type" : "string"
        },
        "type" : {
          "description" : "The type of message. If logging an error, the type of the exception would go into type but you can put anything in there, that makes sense for your domain.",
          "type" : "string"
        },
        "url" : {
          "description" : "If message relates to a HTTP request, you may send the URL of that request. If you don't provide us with an URL, we will try to find a key named URL in serverVariables.",
          "type" : "string"
        },
        "user" : {
          "description" : "An identification of the user triggering this message. You can put the users email address or your user key into this property.",
          "type" : "string"
        },
        "version" : {
          "description" : "Versions can be used to distinguish messages from different versions of your software. The value of version can be a SemVer compliant string or any other\r\n            syntax that you are using as your version numbering scheme.",
          "type" : "string"
        }
      },
      "type" : "object"
    },
    "Deployment" : {
      "properties" : {
        "created" : {
          "description" : "When was this deployment created.",
          "format" : "date-time",
          "type" : "string"
        },
        "createdBy" : {
          "description" : "The elmah.io id of the user creating this deployment. Since deployments are created on a subscription,\r\n            the CreatedBy will contain the id of the user with the subscription.",
          "type" : "string"
        },
        "description" : {
          "description" : "Sescription of this deployment in markdown or clear text.",
          "type" : "string"
        },
        "id" : {
          "description" : "The ID of this deployment.",
          "type" : "string"
        },
        "logId" : {
          "description" : "If the deployment is attached a single log, this property is set to the ID of that log.\r\n            If null, the deployment is attached all logs on the organization.",
          "type" : "string"
        },
        "userEmail" : {
          "description" : "The email of the person responsible for creating this deployment.",
          "type" : "string"
        },
        "userName" : {
          "description" : "The name of the person responsible for creating this deployment.",
          "type" : "string"
        },
        "version" : {
          "description" : "The version number of this deployment. The value of version can be a SemVer compliant string or any other\r\n            syntax that you are using as your version numbering scheme.",
          "type" : "string"
        }
      },
      "type" : "object"
    },
    "Item" : {
      "description" : "Represents a key value pair.",
      "properties" : {
        "key" : {
          "description" : "The key of the item.",
          "type" : "string"
        },
        "value" : {
          "description" : "The value of the item.",
          "type" : "string"
        }
      },
      "type" : "object"
    },
    "Log" : {
      "properties" : {
        "Id" : {
          "description" : "ID of the log.",
          "type" : "string"
        },
        "Name" : {
          "description" : "Name of the log.",
          "type" : "string"
        }
      },
      "type" : "object"
    },
    "Message" : {
      "properties" : {
        "application" : {
          "description" : "Used to identify which application logged this message. You can use this if you have multiple applications and services logging to the same log",
          "type" : "string"
        },
        "cookies" : {
          "description" : "A key/value pair of cookies. This property only makes sense for logging messages related to web requests.",
          "items" : {
            "$ref" : "#/definitions/Item"
          },
          "type" : "array"
        },
        "data" : {
          "description" : "A key/value pair of user-defined fields and their values. When logging an exception, the Data dictionary of\r\n            the exception is copied to this property. You can add additional key/value pairs, by modifying the Data\r\n            dictionary on the exception or by supplying additional key/values to this API.",
          "items" : {
            "$ref" : "#/definitions/Item"
          },
          "type" : "array"
        },
        "dateTime" : {
          "description" : "The date and time in UTC of the message. If you don't provide us with a value in dateTime, we will set the current date and time in UTC.",
          "format" : "date-time",
          "type" : "string"
        },
        "detail" : {
          "description" : "A longer description of the message. For errors this could be a stacktrace, but it's really up to you what to log in there.",
          "type" : "string"
        },
        "form" : {
          "description" : "A key/value pair of form fields and their values. This property makes sense if logging message related to users inputting data in a form.",
          "items" : {
            "$ref" : "#/definitions/Item"
          },
          "type" : "array"
        },
        "hostname" : {
          "description" : "The hostname of the server logging the message.",
          "type" : "string"
        },
        "id" : {
          "description" : "The ID of this message.",
          "type" : "string"
        },
        "method" : {
          "description" : "If message relates to a HTTP request, you may send the HTTP method of that request. If you don't provide us with a method, we will try to find a key named REQUEST_METHOD in serverVariables.",
          "type" : "string"
        },
        "queryString" : {
          "description" : "A key/value pair of query string parameters. This property makes sense if logging message related to a HTTP request.",
          "items" : {
            "$ref" : "#/definitions/Item"
          },
          "type" : "array"
        },
        "serverVariables" : {
          "description" : "A key/value pair of server values. Server variables are typically related to handling requests in a webserver but could be used for other types of information as well.",
          "items" : {
            "$ref" : "#/definitions/Item"
          },
          "type" : "array"
        },
        "severity" : {
          "description" : "An enum value representing the severity of this message. The following values are allowed: Verbose, Debug, Information, Warning, Error, Fatal",
          "type" : "string"
        },
        "source" : {
          "description" : "The source of the code logging the message. This could be the assembly name.",
          "type" : "string"
        },
        "statusCode" : {
          "description" : "If the message logged relates to a HTTP status code, you can put the code in this property. This would probably only be relevant for errors,\r\n            but could be used for logging successful status codes as well.",
          "format" : "int32",
          "type" : "integer"
        },
        "title" : {
          "description" : "The textual title or headline of the message to log.",
          "type" : "string"
        },
        "type" : {
          "description" : "The type of message. If logging an error, the type of the exception would go into type but you can put anything in there, that makes sense for your domain.",
          "type" : "string"
        },
        "url" : {
          "description" : "If message relates to a HTTP request, you may send the URL of that request. If you don't provide us with an URL, we will try to find a key named URL in serverVariables.",
          "type" : "string"
        },
        "user" : {
          "description" : "An identification of the user triggering this message. You can put the users email address or your user key into this property.",
          "type" : "string"
        },
        "version" : {
          "description" : "Versions can be used to distinguish messages from different versions of your software. The value of version can be a SemVer compliant string or any other\r\n            syntax that you are using as your version numbering scheme.",
          "type" : "string"
        }
      },
      "type" : "object"
    },
    "MessageOverview" : {
      "properties" : {
        "application" : {
          "description" : "Used to identify which application logged this message. You can use this if you have multiple applications and services logging to the same log",
          "type" : "string"
        },
        "cookies" : {
          "description" : "A key/value pair of cookies. This property only makes sense for logging messages related to web requests.",
          "items" : {
            "$ref" : "#/definitions/Item"
          },
          "type" : "array"
        },
        "data" : {
          "description" : "A key/value pair of user-defined fields and their values. When logging an exception, the Data dictionary of\r\n            the exception is copied to this property. You can add additional key/value pairs, by modifying the Data\r\n            dictionary on the exception or by supplying additional key/values to this API.",
          "items" : {
            "$ref" : "#/definitions/Item"
          },
          "type" : "array"
        },
        "dateTime" : {
          "description" : "The date and time in UTC of the message. If you don't provide us with a value in dateTime, we will set the current date and time in UTC.",
          "format" : "date-time",
          "type" : "string"
        },
        "detail" : {
          "description" : "A longer description of the message. For errors this could be a stacktrace, but it's really up to you what to log in there.",
          "type" : "string"
        },
        "form" : {
          "description" : "A key/value pair of form fields and their values. This property makes sense if logging message related to users inputting data in a form.",
          "items" : {
            "$ref" : "#/definitions/Item"
          },
          "type" : "array"
        },
        "hostname" : {
          "description" : "The hostname of the server logging the message.",
          "type" : "string"
        },
        "id" : {
          "description" : "The ID of this message.",
          "type" : "string"
        },
        "method" : {
          "description" : "If message relates to a HTTP request, you may send the HTTP method of that request. If you don't provide us with a method, we will try to find a key named REQUEST_METHOD in serverVariables.",
          "type" : "string"
        },
        "queryString" : {
          "description" : "A key/value pair of query string parameters. This property makes sense if logging message related to a HTTP request.",
          "items" : {
            "$ref" : "#/definitions/Item"
          },
          "type" : "array"
        },
        "serverVariables" : {
          "description" : "A key/value pair of server values. Server variables are typically related to handling requests in a webserver but could be used for other types of information as well.",
          "items" : {
            "$ref" : "#/definitions/Item"
          },
          "type" : "array"
        },
        "severity" : {
          "description" : "An enum value representing the severity of this message. The following values are allowed: Verbose, Debug, Information, Warning, Error, Fatal",
          "type" : "string"
        },
        "source" : {
          "description" : "The source of the code logging the message. This could be the assembly name.",
          "type" : "string"
        },
        "statusCode" : {
          "description" : "If the message logged relates to a HTTP status code, you can put the code in this property. This would probably only be relevant for errors,\r\n            but could be used for logging successful status codes as well.",
          "format" : "int32",
          "type" : "integer"
        },
        "title" : {
          "description" : "The textual title or headline of the message to log.",
          "type" : "string"
        },
        "type" : {
          "description" : "The type of message. If logging an error, the type of the exception would go into type but you can put anything in there, that makes sense for your domain.",
          "type" : "string"
        },
        "url" : {
          "description" : "If message relates to a HTTP request, you may send the URL of that request. If you don't provide us with an URL, we will try to find a key named URL in serverVariables.",
          "type" : "string"
        },
        "user" : {
          "description" : "An identification of the user triggering this message. You can put the users email address or your user key into this property.",
          "type" : "string"
        },
        "version" : {
          "description" : "Versions can be used to distinguish messages from different versions of your software. The value of version can be a SemVer compliant string or any other\r\n            syntax that you are using as your version numbering scheme.",
          "type" : "string"
        }
      },
      "type" : "object"
    },
    "MessagesResult" : {
      "properties" : {
        "messages" : {
          "description" : "Log messages.",
          "items" : {
            "$ref" : "#/definitions/MessageOverview"
          },
          "type" : "array"
        },
        "total" : {
          "description" : "The total number of log messages found.",
          "format" : "int32",
          "type" : "integer"
        }
      },
      "type" : "object"
    },
    "Object" : {
      "properties" : {
        
      },
      "type" : "object"
    },
    "Search" : {
      "properties" : {
        "From" : {
          "description" : "Search from this date.",
          "format" : "date-time",
          "type" : "string"
        },
        "Query" : {
          "description" : "Lucene query.",
          "type" : "string"
        },
        "To" : {
          "description" : "Search to this date.",
          "format" : "date-time",
          "type" : "string"
        }
      },
      "type" : "object"
    }
  }
}