{"info":{"author":"optic","package":"mongoose","version":"0.4.0","dependencies":{"optic:rest":"0.4.0"}},"lenses":[{"name":"Define Model","id":"define-model","snippet":{"block":"const ModelName = mongoose.model('name', new mongoose.Schema({}));","language":"es7"},"value":{"schema":{"type":"object-literal","at":{"astType":"ObjectExpression","range":{"start":61,"end":63}}},"name":{"type":"literal","at":{"astType":"Literal","range":{"start":33,"end":39}}}},"variables":{"ModelName":"self"},"containers":{},"schema":"mongoose-schema","initialValue":{},"priority":1,"internal":false},{"name":"Insert a record","id":"insert-record","snippet":{"block":"new ModelName({\n\n}).save((err, item) => {\n  if (!err) {\n    //:success\n  } else {\n    //:failure\n  }\n})","language":"es7"},"value":{"fields":{"type":"object-literal","at":{"astType":"ObjectExpression","range":{"start":14,"end":18}}}},"variables":{"ModelName":"scope","err":"self","item":"self"},"containers":{"success":"any","failure":"any"},"schema":{"type":"object","properties":{"fields":{"type":"object"}}},"initialValue":{},"priority":1,"internal":false},{"name":"Query a record","id":"find-one","snippet":{"block":"ModelName.findOne({}, function (err, item) {\n  if (err) {\n    //:error\n  } else {\n    if (item) {\n      //:found\n    } else {\n      //:notFound\n    }\n  }\n})","language":"es7"},"value":{"query":{"type":"object-literal","at":{"astType":"ObjectExpression","range":{"start":18,"end":20}}}},"variables":{"ModelName":"self","err":"self","item":"self"},"containers":{"error":"any","found":"any","notFound":"any"},"schema":{"title":"Find One Document","type":"object","properties":{"query":{"_id":"mongoose-query","_definition":{"title":"Query","type":"object","patternProperties":{"^.*$":{"anyOf":[{"type":"object","required":["_valueFormat","value"],"properties":{"_valueFormat":{"type":"string","const":"code"},"value":{"type":"string"}},"title":"Code","default":{"value":"code","_valueFormat":"code"}},{"type":"object","required":["_valueFormat","value"],"properties":{"_valueFormat":{"type":"string","const":"token"},"value":{"type":"string"}},"title":"Token","default":{"value":"token","_valueFormat":"token"}},{"type":"string","title":"String"},{"type":"number","title":"Number"},{"type":"boolean","title":"Boolean"},{"type":"object","title":"Object"}]}}}}}},"initialValue":{},"priority":1,"internal":false},{"name":"Query a record","id":"find-all","snippet":{"block":"ModelName.find({}, function (err, item) {\n  if (err) {\n    //:error\n  } else {\n    if (item) {\n      //:found\n    } else {\n      //:notFound\n    }\n  }\n})","language":"es7"},"value":{"query":{"type":"object-literal","at":{"astType":"ObjectExpression","range":{"start":15,"end":17}}}},"variables":{"ModelName":"scope","err":"self","item":"self"},"containers":{"error":"any","found":"any","notFound":"any"},"schema":{"title":"Find Documents","type":"object","properties":{"query":{"_id":"mongoose-query","_definition":{"title":"Query","type":"object","patternProperties":{"^.*$":{"anyOf":[{"type":"object","required":["_valueFormat","value"],"properties":{"_valueFormat":{"type":"string","const":"code"},"value":{"type":"string"}},"title":"Code","default":{"value":"code","_valueFormat":"code"}},{"type":"object","required":["_valueFormat","value"],"properties":{"_valueFormat":{"type":"string","const":"token"},"value":{"type":"string"}},"title":"Token","default":{"value":"token","_valueFormat":"token"}},{"type":"string","title":"String"},{"type":"number","title":"Number"},{"type":"boolean","title":"Boolean"},{"type":"object","title":"Object"}]}}}}}},"initialValue":{},"priority":1,"internal":false}],"schemas":[{"id":"mongoose-query","definition":{"title":"Query","type":"object","patternProperties":{"^.*$":{"anyOf":[{"type":"object","required":["_valueFormat","value"],"properties":{"_valueFormat":{"type":"string","const":"code"},"value":{"type":"string"}},"title":"Code","default":{"value":"code","_valueFormat":"code"}},{"type":"object","required":["_valueFormat","value"],"properties":{"_valueFormat":{"type":"string","const":"token"},"value":{"type":"string"}},"title":"Token","default":{"value":"token","_valueFormat":"token"}},{"type":"string","title":"String"},{"type":"number","title":"Number"},{"type":"boolean","title":"Boolean"},{"type":"object","title":"Object"}]}}}},{"id":"mongoose-schema","definition":{"title":"Mongoose Schema","type":"object","properties":{"name":{"type":"string"},"schema":{"type":"object","patternProperties":{"^.*$":{"anyOf":[{"type":"string","title":"Primitive","enum":["string","number","boolean","date"]},{"type":"object","required":["_valueFormat","value"],"properties":{"_valueFormat":{"type":"string","const":"code"},"value":{"type":"string"}},"title":"Code","default":{"value":"code","_valueFormat":"code"}},{"type":"object","required":["_valueFormat","value"],"properties":{"_valueFormat":{"type":"string","const":"token"},"value":{"type":"string"}},"title":"Token","default":{"value":"token","_valueFormat":"token"}}]}}}}}}],"transformations":[{"yields":"Create Route","id":"create-route-from-schema","input":"mongoose-schema","script":"function (input, answers) {\n  var routeName = input.name.toLowerCase();\n  var route = \"/\" + routeName;\n  var parameters = Object.keys(input.schema).map(function (i) {\n    return {\n      in: 'body',\n      name: i\n    };\n  });\n  var routeDescription = {\n    method: \"post\",\n    url: route,\n    parameters: parameters\n  };\n  var queryDescription = {\n    fields: Object.keys(input.schema).reduce(function (previous, current) {\n      previous[current] = Generate('optic:rest/parameter', {\n        in: 'body',\n        name: current\n      });\n      return previous;\n    }, {})\n  };\n  return Generate(answers.output, routeDescription, {\n    containers: {\n      \"handler\": [Generate('optic:mongoose/insert-record', queryDescription, {\n        tag: \"query\",\n        containers: {\n          \"success\": [Generate('optic:rest/response', {\n            code: 200\n          }, {\n            variables: {\n              item: 'item'\n            }\n          })],\n          \"failure\": [Generate('optic:rest/response', {\n            code: 400\n          }, {\n            variables: {\n              item: 'err'\n            }\n          })]\n        }\n      })]\n    }\n  });\n}","output":"optic:rest/route","ask":{},"dynamicAsk":{}},{"yields":"Get Route","id":"get-route-from-schema","input":"mongoose-schema","script":"function (input, answers) {\n  var routeName = input.name.toLowerCase();\n  var idName = routeName + 'Id';\n  var route = \"/\" + routeName;\n  var routeDescription = {\n    method: \"get\",\n    url: route,\n    parameters: [{\n      in: 'query',\n      name: idName\n    }]\n  };\n  var queryDescription = {\n    query: {\n      '_id': Generate('optic:rest/parameter', {\n        in: 'query',\n        name: idName\n      })\n    }\n  };\n  return Generate(answers.output, routeDescription, {\n    containers: {\n      \"handler\": [Generate('optic:mongoose/find-one', queryDescription, {\n        tag: \"query\",\n        containers: {\n          \"found\": [Generate('optic:rest/response', {\n            code: 200\n          }, {\n            variables: {\n              item: 'item'\n            }\n          })],\n          \"notFound\": [Generate('optic:rest/response', {\n            code: 404,\n            value: 'Not Found'\n          }, {\n            variables: {\n              item: 'item'\n            }\n          })],\n          \"error\": [Generate('optic:rest/response', {\n            code: 400\n          }, {\n            variables: {\n              item: 'err'\n            }\n          })]\n        }\n      })]\n    }\n  });\n}","output":"optic:rest/route","ask":{},"dynamicAsk":{}},{"yields":"Get All Route","id":"get-all-route-from-schema","input":"mongoose-schema","script":"function (input, answers) {\n  var routeName = input.name.toLowerCase() + 's';\n  var route = \"/\" + routeName;\n  var routeDescription = {\n    method: \"get\",\n    url: route,\n    parameters: []\n  };\n  var queryDescription = {\n    query: {}\n  };\n  return Generate(answers.output, routeDescription, {\n    containers: {\n      \"handler\": [Generate('optic:mongoose/find-all', queryDescription, {\n        tag: \"query\",\n        containers: {\n          \"found\": [Generate('optic:rest/response', {\n            code: 200\n          }, {\n            variables: {\n              item: 'items'\n            }\n          })],\n          \"notFound\": [Generate('optic:rest/response', {\n            code: 404,\n            value: 'Not Found'\n          }, {\n            variables: {\n              item: 'items'\n            }\n          })],\n          \"error\": [Generate('optic:rest/response', {\n            code: 400\n          }, {\n            variables: {\n              item: 'err'\n            }\n          })]\n        },\n        variables: {\n          item: 'items'\n        }\n      })]\n    }\n  });\n}","output":"optic:rest/route","ask":{},"dynamicAsk":{}}]}