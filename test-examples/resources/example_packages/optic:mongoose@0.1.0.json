{
    "metadata": {
      "author": "optic",
      "name": "mongoose",
      "version": "0.1.0"
    },
    "dependencies": ["optic:rest@0.1.0"],
    "schemas": [{
      "id": "mongoose-schema",
      "definition": {
        "title": "Mongoose Schema",
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "schema": {
            "type": "object",
            "patternProperties": {
              "^.*$": {
                "anyOf": [{
                  "$ref": "#/definitions/field"
                }]
              }
            },
            "additionalProperties": false
          }
        },
        "definitions": {
          "field": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": ["string", "number", "boolean", "date"]
              }
            }
          }
        }
      }
    }, {
      "id": "connect",
      "definition": {
        "title": "Connect Schema",
        "type": "object",
        "properties": {
          "URI": {
            "type": "string"
          }
        }
      }
    }],
    "lenses": [{
      "name": "Connect to MongoDB",
      "schema": "connect",
      "snippet": {
        "language": "es7",
        "block": "mongoose.connect('mongodb://localhost/my_database');"
      },
      "scope": "public",
      "components": [{
        "type": "code",
        "finder": {
          "type": "stringFinder",
          "string": "mongodb",
          "rule": "containing",
          "occurrence": 0
        },
        "propertyPath": ["URI"]
      }],
      "rules": [],
      "variables": [],
      "subcontainers": []
    }, {
      "name": "Define Model",
      "schema": "mongoose-schema",
      "snippet": {
        "language": "es7",
        "block": "const model = mongoose.model('ModelName', \nnew mongoose.Schema({\n    name    : 'string',\n    age    : 'number',\n}));"
      },
      "scope": "public",
      "components": [{
        "type": "code",
        "finder": {
          "type": "stringFinder",
          "string": "{\n    name",
          "rule": "starting",
          "occurrence": 0
        },
        "propertyPath": ["schema"]
      },
        {
          "type": "code",
          "finder": {
            "type": "stringFinder",
            "string": "ModelName",
            "rule": "containing",
            "occurrence": 0
          },
          "propertyPath": ["name"]
        }
      ],
      "rules": [],
      "variables": [{
        "token": "model",
        "in": "self"
      }],
      "subcontainers": []
    }],
    "containers": [],
    "transformations": [{
      "name": "Schema -> Create Route",
      "input": "mongoose-schema",
      "output": "optic:rest/route",
      "ask": {"type": "object"},
      "script": "function transform(input) {\n    var routeName = input.name.toLowerCase();\n    var route = \"/\" + routeName;\n\n    var parameters = Object.keys(input.schema).map(function (i) {\n        return {\n            in: 'body',\n            name: i\n        };\n    });\n\n    return {\n        method: \"post\",\n        url: route,\n        parameters: parameters\n    };\n}"
    }]
}