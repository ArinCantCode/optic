{
  "events": [
    {
      "APINamed": {
        "name": "Todo",
        "eventContext": {
          "clientId": "anonymous",
          "clientSessionId": "f5136569-906a-4b27-82ed-20127efd8b77",
          "clientCommandBatchId": "a41f9e04-5862-4bdf-842c-613c7a899523",
          "createdAt": "2019-10-28T21:40:52.769Z"
        }
      }
    }
  ],
  "session": {
    "samples": [
      {
        "request": {
          "url": "/webapi/algorithms/acunniffe/example_test",
          "method": "GET",
          "headers": {
            "host": "algorithmia.com",
            "connection": "keep-alive",
            "pragma": "no-cache",
            "cache-control": "no-cache",
            "accept": "application/json, text/plain, */*",
            "dnt": "1",
            "x-xsrf-token": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "cors",
            "referer": "https://algorithmia.com/algorithms/acunniffe/example_test",
            "accept-encoding": "gzip, deflate, br",
            "accept-language": "en-US,en;q=0.9",
            "cookie": "ajs_group_id=null; ajs_anonymous_id=%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22; _ga=GA1.2.1872580011.1571235636; _fbp=fb.1.1571235636317.604574724; intercom-id-c9fj6354=01941621-342b-4320-ad75-53826b5a002c; hubspotutk=105fad8a9b12bfed67330a0dbfe12c61; _gid=GA1.2.1843278152.1572282100; __zlcmid=uzie5dAUbB300Y; __hstc=69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3; __hssrc=1; fs_intercom=4655074328608768:4513847218700288; XSRF-TOKEN=0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da; referrer=www.google.com; landing_page=https://algorithmia.com/; signup_session=true; ajs_user_id=%22acunniffe%22; fs_uid=rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636; new-algo-language=scala; _gat=1; __hssc=69686351.4.1572357353053; intercom-session-c9fj6354=UitZdTJZU1ZPSHlUR2hrMWdwQmVEYnluUVY3SFFFbVFwQ2E3SnB2dTZaVUJIS3d4WnhWM09HS0V6cm81Z2hpaS0tanNEQ3BncnhrV3ZadUVKT1BTekp0UT09--08e35497225a70946c01327fdcf56e6fac5e6329; ALGO_SESSION=84b1e95f29ad40924766477d0f0963550eb971ca-last-access=2019-10-29T14%3A05%3A47.668Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "cookies": {
            "ajs_group_id": "null",
            "ajs_anonymous_id": "%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22",
            "_ga": "GA1.2.1872580011.1571235636",
            "_fbp": "fb.1.1571235636317.604574724",
            "intercom-id-c9fj6354": "01941621-342b-4320-ad75-53826b5a002c",
            "hubspotutk": "105fad8a9b12bfed67330a0dbfe12c61",
            "_gid": "GA1.2.1843278152.1572282100",
            "__zlcmid": "uzie5dAUbB300Y",
            "__hstc": "69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3",
            "__hssrc": "1",
            "fs_intercom": "4655074328608768:4513847218700288",
            "XSRF-TOKEN": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "referrer": "www.google.com",
            "landing_page": "https://algorithmia.com/",
            "signup_session": "true",
            "ajs_user_id": "%22acunniffe%22",
            "fs_uid": "rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636",
            "new-algo-language": "scala",
            "_gat": "1",
            "__hssc": "69686351.4.1572357353053",
            "intercom-session-c9fj6354": "UitZdTJZU1ZPSHlUR2hrMWdwQmVEYnluUVY3SFFFbVFwQ2E3SnB2dTZaVUJIS3d4WnhWM09HS0V6cm81Z2hpaS0tanNEQ3BncnhrV3ZadUVKT1BTekp0UT09--08e35497225a70946c01327fdcf56e6fac5e6329",
            "ALGO_SESSION": "84b1e95f29ad40924766477d0f0963550eb971ca-last-access=2019-10-29T14%3A05%3A47.668Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "queryParameters": {}
        },
        "response": {
          "statusCode": 200,
          "headers": {
            "content-encoding": "gzip",
            "content-type": "application/json; charset=utf-8",
            "date": "Tue, 29 Oct 2019 14:06:04 GMT",
            "set-cookie": "ALGO_SESSION=4eeaf5efb2c38212d10ff9cce1a44c9a800f5c05-last-access=2019-10-29T14%3A06%3A04.141Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3; Max-Age=86400; Expires=Wed, 30 Oct 2019 14:06:04 GMT; Path=/; Domain=algorithmia.com; Secure; HTTPOnly",
            "strict-transport-security": "max-age=86400; includeSubDomains",
            "vary": "Accept-Encoding",
            "x-content-type-options": "nosniff",
            "x-frame-options": "DENY",
            "content-length": "263",
            "connection": "keep-alive"
          },
          "body": {
            "algorithm": {
              "algo_id": 130237,
              "object_id": "algo-533a1908-4277-4d30-bd0b-07bf2cd88517",
              "username": "acunniffe",
              "algoname": "example_test",
              "algolabel": "example_test",
              "language": "scala",
              "tag_line": "",
              "discoverable_world": false,
              "source_world": false,
              "license": "apl",
              "tags": [],
              "stats": {
                "total_calls": 0,
                "follower_count": 1,
                "vote_count": 0
              },
              "current_user": {
                "is_member": true,
                "is_owner": true,
                "is_follower": true,
                "is_voter": false
              }
            }
          }
        }
      },
      {
        "request": {
          "url": "/notifications",
          "method": "GET",
          "headers": {
            "host": "algorithmia.com",
            "connection": "keep-alive",
            "pragma": "no-cache",
            "cache-control": "no-cache",
            "accept": "application/json, text/plain, */*",
            "dnt": "1",
            "x-xsrf-token": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "cors",
            "referer": "https://algorithmia.com/algorithms/acunniffe/example_test",
            "accept-encoding": "gzip, deflate, br",
            "accept-language": "en-US,en;q=0.9",
            "cookie": "ajs_group_id=null; ajs_anonymous_id=%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22; _ga=GA1.2.1872580011.1571235636; _fbp=fb.1.1571235636317.604574724; intercom-id-c9fj6354=01941621-342b-4320-ad75-53826b5a002c; hubspotutk=105fad8a9b12bfed67330a0dbfe12c61; _gid=GA1.2.1843278152.1572282100; __zlcmid=uzie5dAUbB300Y; __hstc=69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3; __hssrc=1; fs_intercom=4655074328608768:4513847218700288; XSRF-TOKEN=0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da; referrer=www.google.com; landing_page=https://algorithmia.com/; signup_session=true; ajs_user_id=%22acunniffe%22; fs_uid=rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636; new-algo-language=scala; _gat=1; __hssc=69686351.4.1572357353053; intercom-session-c9fj6354=UitZdTJZU1ZPSHlUR2hrMWdwQmVEYnluUVY3SFFFbVFwQ2E3SnB2dTZaVUJIS3d4WnhWM09HS0V6cm81Z2hpaS0tanNEQ3BncnhrV3ZadUVKT1BTekp0UT09--08e35497225a70946c01327fdcf56e6fac5e6329; ALGO_SESSION=4eeaf5efb2c38212d10ff9cce1a44c9a800f5c05-last-access=2019-10-29T14%3A06%3A04.141Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "cookies": {
            "ajs_group_id": "null",
            "ajs_anonymous_id": "%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22",
            "_ga": "GA1.2.1872580011.1571235636",
            "_fbp": "fb.1.1571235636317.604574724",
            "intercom-id-c9fj6354": "01941621-342b-4320-ad75-53826b5a002c",
            "hubspotutk": "105fad8a9b12bfed67330a0dbfe12c61",
            "_gid": "GA1.2.1843278152.1572282100",
            "__zlcmid": "uzie5dAUbB300Y",
            "__hstc": "69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3",
            "__hssrc": "1",
            "fs_intercom": "4655074328608768:4513847218700288",
            "XSRF-TOKEN": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "referrer": "www.google.com",
            "landing_page": "https://algorithmia.com/",
            "signup_session": "true",
            "ajs_user_id": "%22acunniffe%22",
            "fs_uid": "rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636",
            "new-algo-language": "scala",
            "_gat": "1",
            "__hssc": "69686351.4.1572357353053",
            "intercom-session-c9fj6354": "UitZdTJZU1ZPSHlUR2hrMWdwQmVEYnluUVY3SFFFbVFwQ2E3SnB2dTZaVUJIS3d4WnhWM09HS0V6cm81Z2hpaS0tanNEQ3BncnhrV3ZadUVKT1BTekp0UT09--08e35497225a70946c01327fdcf56e6fac5e6329",
            "ALGO_SESSION": "4eeaf5efb2c38212d10ff9cce1a44c9a800f5c05-last-access=2019-10-29T14%3A06%3A04.141Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "queryParameters": {}
        },
        "response": {
          "statusCode": 200,
          "headers": {
            "content-encoding": "gzip",
            "content-type": "application/json; charset=utf-8",
            "date": "Tue, 29 Oct 2019 14:06:04 GMT",
            "set-cookie": "ALGO_SESSION=4cbe79900afdc29618af95446c90e8fbe53854a6-last-access=2019-10-29T14%3A06%3A04.333Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3; Max-Age=86400; Expires=Wed, 30 Oct 2019 14:06:04 GMT; Path=/; Domain=algorithmia.com; Secure; HTTPOnly",
            "strict-transport-security": "max-age=86400; includeSubDomains",
            "vary": "Accept-Encoding",
            "x-content-type-options": "nosniff",
            "x-frame-options": "DENY",
            "content-length": "243",
            "connection": "keep-alive"
          },
          "body": [
            {
              "notification_id": "notif-016e17d233b7-5c270611-8927-4efb-8743-78eec241f572",
              "to_username": "acunniffe",
              "event_type": "system",
              "event_context": {
                "message": "Welcome to Algorithmia! - We've added 50k credits to your account!",
                "url": "/users/acunniffe/account",
                "event_type": "system"
              },
              "read_at": 1572357947000,
              "created_at": 1572357682000
            }
          ]
        }
      },
      {
        "request": {
          "url": "/webapi/v1/languages",
          "method": "GET",
          "headers": {
            "host": "algorithmia.com",
            "connection": "keep-alive",
            "pragma": "no-cache",
            "cache-control": "no-cache",
            "accept": "application/json, text/plain, */*",
            "dnt": "1",
            "x-xsrf-token": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "cors",
            "referer": "https://algorithmia.com/algorithms/acunniffe/example_test",
            "accept-encoding": "gzip, deflate, br",
            "accept-language": "en-US,en;q=0.9",
            "cookie": "ajs_group_id=null; ajs_anonymous_id=%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22; _ga=GA1.2.1872580011.1571235636; _fbp=fb.1.1571235636317.604574724; intercom-id-c9fj6354=01941621-342b-4320-ad75-53826b5a002c; hubspotutk=105fad8a9b12bfed67330a0dbfe12c61; _gid=GA1.2.1843278152.1572282100; __zlcmid=uzie5dAUbB300Y; __hstc=69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3; __hssrc=1; fs_intercom=4655074328608768:4513847218700288; XSRF-TOKEN=0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da; referrer=www.google.com; landing_page=https://algorithmia.com/; signup_session=true; ajs_user_id=%22acunniffe%22; fs_uid=rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636; new-algo-language=scala; _gat=1; __hssc=69686351.4.1572357353053; intercom-session-c9fj6354=UitZdTJZU1ZPSHlUR2hrMWdwQmVEYnluUVY3SFFFbVFwQ2E3SnB2dTZaVUJIS3d4WnhWM09HS0V6cm81Z2hpaS0tanNEQ3BncnhrV3ZadUVKT1BTekp0UT09--08e35497225a70946c01327fdcf56e6fac5e6329; ALGO_SESSION=4eeaf5efb2c38212d10ff9cce1a44c9a800f5c05-last-access=2019-10-29T14%3A06%3A04.141Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "cookies": {
            "ajs_group_id": "null",
            "ajs_anonymous_id": "%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22",
            "_ga": "GA1.2.1872580011.1571235636",
            "_fbp": "fb.1.1571235636317.604574724",
            "intercom-id-c9fj6354": "01941621-342b-4320-ad75-53826b5a002c",
            "hubspotutk": "105fad8a9b12bfed67330a0dbfe12c61",
            "_gid": "GA1.2.1843278152.1572282100",
            "__zlcmid": "uzie5dAUbB300Y",
            "__hstc": "69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3",
            "__hssrc": "1",
            "fs_intercom": "4655074328608768:4513847218700288",
            "XSRF-TOKEN": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "referrer": "www.google.com",
            "landing_page": "https://algorithmia.com/",
            "signup_session": "true",
            "ajs_user_id": "%22acunniffe%22",
            "fs_uid": "rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636",
            "new-algo-language": "scala",
            "_gat": "1",
            "__hssc": "69686351.4.1572357353053",
            "intercom-session-c9fj6354": "UitZdTJZU1ZPSHlUR2hrMWdwQmVEYnluUVY3SFFFbVFwQ2E3SnB2dTZaVUJIS3d4WnhWM09HS0V6cm81Z2hpaS0tanNEQ3BncnhrV3ZadUVKT1BTekp0UT09--08e35497225a70946c01327fdcf56e6fac5e6329",
            "ALGO_SESSION": "4eeaf5efb2c38212d10ff9cce1a44c9a800f5c05-last-access=2019-10-29T14%3A06%3A04.141Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "queryParameters": {}
        },
        "response": {
          "statusCode": 200,
          "headers": {
            "content-encoding": "gzip",
            "content-type": "application/json; charset=utf-8",
            "date": "Tue, 29 Oct 2019 14:06:04 GMT",
            "strict-transport-security": "max-age=86400; includeSubDomains",
            "vary": "Accept-Encoding",
            "x-content-type-options": "nosniff",
            "x-frame-options": "DENY",
            "content-length": "227",
            "connection": "keep-alive"
          },
          "body": {
            "results": [
              {
                "id": "java",
                "name": "Java",
                "is_deprecated": false,
                "is_experimental": false,
                "language_type": "langpack",
                "resource_type": "language"
              },
              {
                "id": "javascript",
                "name": "Javascript",
                "is_deprecated": false,
                "is_experimental": false,
                "language_type": "langpack",
                "resource_type": "language"
              },
              {
                "id": "python2-image",
                "name": "Python 2.x - Beta",
                "is_deprecated": false,
                "is_experimental": false,
                "language_type": "image",
                "resource_type": "language"
              },
              {
                "id": "python2-langpack",
                "name": "Python 2.x",
                "is_deprecated": false,
                "is_experimental": false,
                "language_type": "langpack",
                "resource_type": "language"
              },
              {
                "id": "python3-image",
                "name": "Python 3.x - Beta",
                "is_deprecated": false,
                "is_experimental": false,
                "language_type": "image",
                "resource_type": "language"
              },
              {
                "id": "python3-1",
                "name": "Python 3.x",
                "is_deprecated": false,
                "is_experimental": false,
                "language_type": "langpack",
                "resource_type": "language"
              },
              {
                "id": "r",
                "name": "R",
                "is_deprecated": false,
                "is_experimental": false,
                "language_type": "langpack",
                "resource_type": "language"
              },
              {
                "id": "ruby",
                "name": "Ruby",
                "is_deprecated": false,
                "is_experimental": false,
                "language_type": "langpack",
                "resource_type": "language"
              },
              {
                "id": "rust",
                "name": "Rust",
                "is_deprecated": false,
                "is_experimental": false,
                "language_type": "langpack",
                "resource_type": "language"
              },
              {
                "id": "scala",
                "name": "Scala",
                "is_deprecated": false,
                "is_experimental": false,
                "language_type": "langpack",
                "resource_type": "language"
              }
            ]
          }
        }
      },
      {
        "request": {
          "url": "/webapi/user",
          "method": "GET",
          "headers": {
            "host": "algorithmia.com",
            "connection": "keep-alive",
            "pragma": "no-cache",
            "cache-control": "no-cache",
            "accept": "application/json, text/plain, */*",
            "dnt": "1",
            "x-xsrf-token": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "cors",
            "referer": "https://algorithmia.com/algorithms/acunniffe/example_test",
            "accept-encoding": "gzip, deflate, br",
            "accept-language": "en-US,en;q=0.9",
            "cookie": "ajs_group_id=null; ajs_anonymous_id=%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22; _ga=GA1.2.1872580011.1571235636; _fbp=fb.1.1571235636317.604574724; intercom-id-c9fj6354=01941621-342b-4320-ad75-53826b5a002c; hubspotutk=105fad8a9b12bfed67330a0dbfe12c61; _gid=GA1.2.1843278152.1572282100; __zlcmid=uzie5dAUbB300Y; __hstc=69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3; __hssrc=1; fs_intercom=4655074328608768:4513847218700288; XSRF-TOKEN=0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da; referrer=www.google.com; landing_page=https://algorithmia.com/; signup_session=true; ajs_user_id=%22acunniffe%22; fs_uid=rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636; new-algo-language=scala; _gat=1; __hssc=69686351.4.1572357353053; intercom-session-c9fj6354=UitZdTJZU1ZPSHlUR2hrMWdwQmVEYnluUVY3SFFFbVFwQ2E3SnB2dTZaVUJIS3d4WnhWM09HS0V6cm81Z2hpaS0tanNEQ3BncnhrV3ZadUVKT1BTekp0UT09--08e35497225a70946c01327fdcf56e6fac5e6329; ALGO_SESSION=4eeaf5efb2c38212d10ff9cce1a44c9a800f5c05-last-access=2019-10-29T14%3A06%3A04.141Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "cookies": {
            "ajs_group_id": "null",
            "ajs_anonymous_id": "%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22",
            "_ga": "GA1.2.1872580011.1571235636",
            "_fbp": "fb.1.1571235636317.604574724",
            "intercom-id-c9fj6354": "01941621-342b-4320-ad75-53826b5a002c",
            "hubspotutk": "105fad8a9b12bfed67330a0dbfe12c61",
            "_gid": "GA1.2.1843278152.1572282100",
            "__zlcmid": "uzie5dAUbB300Y",
            "__hstc": "69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3",
            "__hssrc": "1",
            "fs_intercom": "4655074328608768:4513847218700288",
            "XSRF-TOKEN": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "referrer": "www.google.com",
            "landing_page": "https://algorithmia.com/",
            "signup_session": "true",
            "ajs_user_id": "%22acunniffe%22",
            "fs_uid": "rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636",
            "new-algo-language": "scala",
            "_gat": "1",
            "__hssc": "69686351.4.1572357353053",
            "intercom-session-c9fj6354": "UitZdTJZU1ZPSHlUR2hrMWdwQmVEYnluUVY3SFFFbVFwQ2E3SnB2dTZaVUJIS3d4WnhWM09HS0V6cm81Z2hpaS0tanNEQ3BncnhrV3ZadUVKT1BTekp0UT09--08e35497225a70946c01327fdcf56e6fac5e6329",
            "ALGO_SESSION": "4eeaf5efb2c38212d10ff9cce1a44c9a800f5c05-last-access=2019-10-29T14%3A06%3A04.141Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "queryParameters": {}
        },
        "response": {
          "statusCode": 200,
          "headers": {
            "cache-control": "no-cache, no-store",
            "content-encoding": "gzip",
            "content-type": "application/json; charset=utf-8",
            "date": "Tue, 29 Oct 2019 14:06:04 GMT",
            "set-cookie": "ALGO_SESSION=2b80c0ccc429a37d26038fe71fee869f453cd4b1-last-access=2019-10-29T14%3A06%3A04.345Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3; Max-Age=86400; Expires=Wed, 30 Oct 2019 14:06:04 GMT; Path=/; Domain=algorithmia.com; Secure; HTTPOnly",
            "strict-transport-security": "max-age=86400; includeSubDomains",
            "vary": "Accept-Encoding",
            "x-content-type-options": "nosniff",
            "x-frame-options": "DENY",
            "content-length": "303",
            "connection": "keep-alive"
          },
          "body": {
            "user": {
              "username": "acunniffe",
              "fullName": "Aidan C",
              "registered": 1572357682000,
              "company_role": "engineer",
              "email": "acunniffe@gmail.com",
              "emailNotifications": true,
              "orgs": [
                {
                  "org_name": "aidan_org",
                  "org_label": "Aidan Org"
                }
              ],
              "default_api_key": "simjV77+6NjYPpPduWXrFKgWJp01",
              "invite_code": "",
              "account_balance": {
                "available_credits": 54782,
                "earned_credits": 0,
                "subscription_credits": 4782
              },
              "total_calls": 0,
              "reputation": 10,
              "requested_count": 0
            }
          }
        }
      },
      {
        "request": {
          "url": "/comments/algo-533a1908-4277-4d30-bd0b-07bf2cd88517",
          "method": "GET",
          "headers": {
            "host": "algorithmia.com",
            "connection": "keep-alive",
            "pragma": "no-cache",
            "cache-control": "no-cache",
            "accept": "application/json, text/plain, */*",
            "dnt": "1",
            "x-xsrf-token": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "cors",
            "referer": "https://algorithmia.com/algorithms/acunniffe/example_test/discussion",
            "accept-encoding": "gzip, deflate, br",
            "accept-language": "en-US,en;q=0.9",
            "cookie": "ajs_group_id=null; ajs_anonymous_id=%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22; _ga=GA1.2.1872580011.1571235636; _fbp=fb.1.1571235636317.604574724; intercom-id-c9fj6354=01941621-342b-4320-ad75-53826b5a002c; hubspotutk=105fad8a9b12bfed67330a0dbfe12c61; _gid=GA1.2.1843278152.1572282100; __zlcmid=uzie5dAUbB300Y; __hstc=69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3; __hssrc=1; fs_intercom=4655074328608768:4513847218700288; XSRF-TOKEN=0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da; referrer=www.google.com; landing_page=https://algorithmia.com/; signup_session=true; ajs_user_id=%22acunniffe%22; fs_uid=rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636; new-algo-language=scala; _gat=1; __hssc=69686351.5.1572357353053; intercom-session-c9fj6354=L08zdks3K1FOZEs0NngyR2NDQjBxN3VMb1J3dE1QZ0t4N2piYXY5ZmlNWFNVMkxseFhidkxhZ0g4QStWV2hYay0tUUtjQUtFaUZvLzJIZ0drSFdnRjM0UT09--fc3e700881b2cd1507c47ce6533f5b502d54fb7c; ALGO_SESSION=d4fc1ecfc2e79ab39df69f6bb00cbcc4845bc25a-last-access=2019-10-29T14%3A06%3A07.241Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "cookies": {
            "ajs_group_id": "null",
            "ajs_anonymous_id": "%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22",
            "_ga": "GA1.2.1872580011.1571235636",
            "_fbp": "fb.1.1571235636317.604574724",
            "intercom-id-c9fj6354": "01941621-342b-4320-ad75-53826b5a002c",
            "hubspotutk": "105fad8a9b12bfed67330a0dbfe12c61",
            "_gid": "GA1.2.1843278152.1572282100",
            "__zlcmid": "uzie5dAUbB300Y",
            "__hstc": "69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3",
            "__hssrc": "1",
            "fs_intercom": "4655074328608768:4513847218700288",
            "XSRF-TOKEN": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "referrer": "www.google.com",
            "landing_page": "https://algorithmia.com/",
            "signup_session": "true",
            "ajs_user_id": "%22acunniffe%22",
            "fs_uid": "rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636",
            "new-algo-language": "scala",
            "_gat": "1",
            "__hssc": "69686351.5.1572357353053",
            "intercom-session-c9fj6354": "L08zdks3K1FOZEs0NngyR2NDQjBxN3VMb1J3dE1QZ0t4N2piYXY5ZmlNWFNVMkxseFhidkxhZ0g4QStWV2hYay0tUUtjQUtFaUZvLzJIZ0drSFdnRjM0UT09--fc3e700881b2cd1507c47ce6533f5b502d54fb7c",
            "ALGO_SESSION": "d4fc1ecfc2e79ab39df69f6bb00cbcc4845bc25a-last-access=2019-10-29T14%3A06%3A07.241Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "queryParameters": {}
        },
        "response": {
          "statusCode": 200,
          "headers": {
            "content-encoding": "gzip",
            "content-type": "application/json; charset=utf-8",
            "date": "Tue, 29 Oct 2019 14:06:08 GMT",
            "set-cookie": "ALGO_SESSION=bd80d8c0f79bbaee928869ab2011de9be06b0da8-last-access=2019-10-29T14%3A06%3A08.208Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3; Max-Age=86400; Expires=Wed, 30 Oct 2019 14:06:08 GMT; Path=/; Domain=algorithmia.com; Secure; HTTPOnly",
            "strict-transport-security": "max-age=86400; includeSubDomains",
            "vary": "Accept-Encoding",
            "x-content-type-options": "nosniff",
            "x-frame-options": "DENY",
            "content-length": "22",
            "connection": "keep-alive"
          },
          "body": []
        }
      },
      {
        "request": {
          "url": "/v1/users/acunniffe/event-listeners",
          "method": "GET",
          "headers": {
            "host": "algorithmia.com",
            "connection": "keep-alive",
            "pragma": "no-cache",
            "cache-control": "no-cache",
            "accept": "application/json, text/plain, */*",
            "dnt": "1",
            "x-xsrf-token": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "cors",
            "referer": "https://algorithmia.com/algorithms/acunniffe/example_test/event-listeners",
            "accept-encoding": "gzip, deflate, br",
            "accept-language": "en-US,en;q=0.9",
            "cookie": "ajs_group_id=null; ajs_anonymous_id=%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22; _ga=GA1.2.1872580011.1571235636; _fbp=fb.1.1571235636317.604574724; intercom-id-c9fj6354=01941621-342b-4320-ad75-53826b5a002c; hubspotutk=105fad8a9b12bfed67330a0dbfe12c61; _gid=GA1.2.1843278152.1572282100; __zlcmid=uzie5dAUbB300Y; __hstc=69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3; __hssrc=1; fs_intercom=4655074328608768:4513847218700288; XSRF-TOKEN=0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da; referrer=www.google.com; landing_page=https://algorithmia.com/; signup_session=true; ajs_user_id=%22acunniffe%22; fs_uid=rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636; new-algo-language=scala; _gat=1; __hssc=69686351.5.1572357353053; intercom-session-c9fj6354=L08zdks3K1FOZEs0NngyR2NDQjBxN3VMb1J3dE1QZ0t4N2piYXY5ZmlNWFNVMkxseFhidkxhZ0g4QStWV2hYay0tUUtjQUtFaUZvLzJIZ0drSFdnRjM0UT09--fc3e700881b2cd1507c47ce6533f5b502d54fb7c; ALGO_SESSION=bd80d8c0f79bbaee928869ab2011de9be06b0da8-last-access=2019-10-29T14%3A06%3A08.208Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "cookies": {
            "ajs_group_id": "null",
            "ajs_anonymous_id": "%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22",
            "_ga": "GA1.2.1872580011.1571235636",
            "_fbp": "fb.1.1571235636317.604574724",
            "intercom-id-c9fj6354": "01941621-342b-4320-ad75-53826b5a002c",
            "hubspotutk": "105fad8a9b12bfed67330a0dbfe12c61",
            "_gid": "GA1.2.1843278152.1572282100",
            "__zlcmid": "uzie5dAUbB300Y",
            "__hstc": "69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3",
            "__hssrc": "1",
            "fs_intercom": "4655074328608768:4513847218700288",
            "XSRF-TOKEN": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "referrer": "www.google.com",
            "landing_page": "https://algorithmia.com/",
            "signup_session": "true",
            "ajs_user_id": "%22acunniffe%22",
            "fs_uid": "rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636",
            "new-algo-language": "scala",
            "_gat": "1",
            "__hssc": "69686351.5.1572357353053",
            "intercom-session-c9fj6354": "L08zdks3K1FOZEs0NngyR2NDQjBxN3VMb1J3dE1QZ0t4N2piYXY5ZmlNWFNVMkxseFhidkxhZ0g4QStWV2hYay0tUUtjQUtFaUZvLzJIZ0drSFdnRjM0UT09--fc3e700881b2cd1507c47ce6533f5b502d54fb7c",
            "ALGO_SESSION": "bd80d8c0f79bbaee928869ab2011de9be06b0da8-last-access=2019-10-29T14%3A06%3A08.208Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "queryParameters": {}
        },
        "response": {
          "statusCode": 200,
          "headers": {
            "content-encoding": "gzip",
            "content-type": "application/json",
            "date": "Tue, 29 Oct 2019 14:06:09 GMT",
            "referrer-policy": "origin-when-cross-origin, strict-origin-when-cross-origin",
            "set-cookie": "ALGO_SESSION=f8d8dd934e31753edbeab02ea1ae6e7321f080b6-last-access=2019-10-29T14%3A06%3A09.445Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3; Max-Age=86400; Expires=Wed, 30 Oct 2019 14:06:09 GMT; Path=/; Domain=algorithmia.com; Secure; HTTPOnly",
            "strict-transport-security": "max-age=86400; includeSubDomains",
            "vary": "Accept-Encoding",
            "x-content-type-options": "nosniff",
            "x-frame-options": "DENY",
            "x-permitted-cross-domain-policies": "master-only",
            "x-xss-protection": "1; mode=block",
            "content-length": "22",
            "connection": "keep-alive"
          },
          "body": []
        }
      },
      {
        "request": {
          "url": "/v1/algorithms/acunniffe/example_test/builds",
          "method": "GET",
          "headers": {
            "host": "algorithmia.com",
            "connection": "keep-alive",
            "pragma": "no-cache",
            "cache-control": "no-cache",
            "accept": "application/json, text/plain, */*",
            "dnt": "1",
            "x-xsrf-token": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "cors",
            "referer": "https://algorithmia.com/algorithms/acunniffe/example_test/builds",
            "accept-encoding": "gzip, deflate, br",
            "accept-language": "en-US,en;q=0.9",
            "cookie": "ajs_group_id=null; ajs_anonymous_id=%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22; _ga=GA1.2.1872580011.1571235636; _fbp=fb.1.1571235636317.604574724; intercom-id-c9fj6354=01941621-342b-4320-ad75-53826b5a002c; hubspotutk=105fad8a9b12bfed67330a0dbfe12c61; _gid=GA1.2.1843278152.1572282100; __zlcmid=uzie5dAUbB300Y; __hstc=69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3; __hssrc=1; fs_intercom=4655074328608768:4513847218700288; XSRF-TOKEN=0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da; referrer=www.google.com; landing_page=https://algorithmia.com/; signup_session=true; ajs_user_id=%22acunniffe%22; fs_uid=rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636; new-algo-language=scala; _gat=1; __hssc=69686351.5.1572357353053; intercom-session-c9fj6354=L08zdks3K1FOZEs0NngyR2NDQjBxN3VMb1J3dE1QZ0t4N2piYXY5ZmlNWFNVMkxseFhidkxhZ0g4QStWV2hYay0tUUtjQUtFaUZvLzJIZ0drSFdnRjM0UT09--fc3e700881b2cd1507c47ce6533f5b502d54fb7c; ALGO_SESSION=f8d8dd934e31753edbeab02ea1ae6e7321f080b6-last-access=2019-10-29T14%3A06%3A09.445Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "cookies": {
            "ajs_group_id": "null",
            "ajs_anonymous_id": "%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22",
            "_ga": "GA1.2.1872580011.1571235636",
            "_fbp": "fb.1.1571235636317.604574724",
            "intercom-id-c9fj6354": "01941621-342b-4320-ad75-53826b5a002c",
            "hubspotutk": "105fad8a9b12bfed67330a0dbfe12c61",
            "_gid": "GA1.2.1843278152.1572282100",
            "__zlcmid": "uzie5dAUbB300Y",
            "__hstc": "69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3",
            "__hssrc": "1",
            "fs_intercom": "4655074328608768:4513847218700288",
            "XSRF-TOKEN": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "referrer": "www.google.com",
            "landing_page": "https://algorithmia.com/",
            "signup_session": "true",
            "ajs_user_id": "%22acunniffe%22",
            "fs_uid": "rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636",
            "new-algo-language": "scala",
            "_gat": "1",
            "__hssc": "69686351.5.1572357353053",
            "intercom-session-c9fj6354": "L08zdks3K1FOZEs0NngyR2NDQjBxN3VMb1J3dE1QZ0t4N2piYXY5ZmlNWFNVMkxseFhidkxhZ0g4QStWV2hYay0tUUtjQUtFaUZvLzJIZ0drSFdnRjM0UT09--fc3e700881b2cd1507c47ce6533f5b502d54fb7c",
            "ALGO_SESSION": "f8d8dd934e31753edbeab02ea1ae6e7321f080b6-last-access=2019-10-29T14%3A06%3A09.445Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "queryParameters": {
            "limit": "100"
          }
        },
        "response": {
          "statusCode": 200,
          "headers": {
            "content-encoding": "gzip",
            "content-type": "application/json; charset=utf-8",
            "date": "Tue, 29 Oct 2019 14:06:11 GMT",
            "set-cookie": "ALGO_SESSION=8670a17529deca0373bf05915869d395b2289aff-last-access=2019-10-29T14%3A06%3A11.133Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3; Max-Age=86400; Expires=Wed, 30 Oct 2019 14:06:11 GMT; Path=/; Domain=algorithmia.com; Secure; HTTPOnly",
            "strict-transport-security": "max-age=86400; includeSubDomains",
            "vary": "Accept-Encoding",
            "x-content-type-options": "nosniff",
            "x-frame-options": "DENY",
            "content-length": "59",
            "connection": "keep-alive"
          },
          "body": {
            "marker": null,
            "next_link": null,
            "results": []
          }
        }
      },
      {
        "request": {
          "url": "/webapi/v1/languages",
          "method": "GET",
          "headers": {
            "host": "algorithmia.com",
            "connection": "keep-alive",
            "pragma": "no-cache",
            "cache-control": "no-cache",
            "accept": "application/json, text/plain, */*",
            "dnt": "1",
            "x-xsrf-token": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "cors",
            "referer": "https://algorithmia.com/algorithms/acunniffe/example_test/settings",
            "accept-encoding": "gzip, deflate, br",
            "accept-language": "en-US,en;q=0.9",
            "cookie": "ajs_group_id=null; ajs_anonymous_id=%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22; _ga=GA1.2.1872580011.1571235636; _fbp=fb.1.1571235636317.604574724; intercom-id-c9fj6354=01941621-342b-4320-ad75-53826b5a002c; hubspotutk=105fad8a9b12bfed67330a0dbfe12c61; _gid=GA1.2.1843278152.1572282100; __zlcmid=uzie5dAUbB300Y; __hstc=69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3; __hssrc=1; fs_intercom=4655074328608768:4513847218700288; XSRF-TOKEN=0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da; referrer=www.google.com; landing_page=https://algorithmia.com/; signup_session=true; ajs_user_id=%22acunniffe%22; fs_uid=rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636; new-algo-language=scala; _gat=1; __hssc=69686351.5.1572357353053; intercom-session-c9fj6354=L08zdks3K1FOZEs0NngyR2NDQjBxN3VMb1J3dE1QZ0t4N2piYXY5ZmlNWFNVMkxseFhidkxhZ0g4QStWV2hYay0tUUtjQUtFaUZvLzJIZ0drSFdnRjM0UT09--fc3e700881b2cd1507c47ce6533f5b502d54fb7c; ALGO_SESSION=8670a17529deca0373bf05915869d395b2289aff-last-access=2019-10-29T14%3A06%3A11.133Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "cookies": {
            "ajs_group_id": "null",
            "ajs_anonymous_id": "%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22",
            "_ga": "GA1.2.1872580011.1571235636",
            "_fbp": "fb.1.1571235636317.604574724",
            "intercom-id-c9fj6354": "01941621-342b-4320-ad75-53826b5a002c",
            "hubspotutk": "105fad8a9b12bfed67330a0dbfe12c61",
            "_gid": "GA1.2.1843278152.1572282100",
            "__zlcmid": "uzie5dAUbB300Y",
            "__hstc": "69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3",
            "__hssrc": "1",
            "fs_intercom": "4655074328608768:4513847218700288",
            "XSRF-TOKEN": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "referrer": "www.google.com",
            "landing_page": "https://algorithmia.com/",
            "signup_session": "true",
            "ajs_user_id": "%22acunniffe%22",
            "fs_uid": "rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636",
            "new-algo-language": "scala",
            "_gat": "1",
            "__hssc": "69686351.5.1572357353053",
            "intercom-session-c9fj6354": "L08zdks3K1FOZEs0NngyR2NDQjBxN3VMb1J3dE1QZ0t4N2piYXY5ZmlNWFNVMkxseFhidkxhZ0g4QStWV2hYay0tUUtjQUtFaUZvLzJIZ0drSFdnRjM0UT09--fc3e700881b2cd1507c47ce6533f5b502d54fb7c",
            "ALGO_SESSION": "8670a17529deca0373bf05915869d395b2289aff-last-access=2019-10-29T14%3A06%3A11.133Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "queryParameters": {}
        },
        "response": {
          "statusCode": 200,
          "headers": {
            "content-encoding": "gzip",
            "content-type": "application/json; charset=utf-8",
            "date": "Tue, 29 Oct 2019 14:06:11 GMT",
            "strict-transport-security": "max-age=86400; includeSubDomains",
            "vary": "Accept-Encoding",
            "x-content-type-options": "nosniff",
            "x-frame-options": "DENY",
            "content-length": "227",
            "connection": "keep-alive"
          },
          "body": {
            "results": [
              {
                "id": "java",
                "name": "Java",
                "is_deprecated": false,
                "is_experimental": false,
                "language_type": "langpack",
                "resource_type": "language"
              },
              {
                "id": "javascript",
                "name": "Javascript",
                "is_deprecated": false,
                "is_experimental": false,
                "language_type": "langpack",
                "resource_type": "language"
              },
              {
                "id": "python2-image",
                "name": "Python 2.x - Beta",
                "is_deprecated": false,
                "is_experimental": false,
                "language_type": "image",
                "resource_type": "language"
              },
              {
                "id": "python2-langpack",
                "name": "Python 2.x",
                "is_deprecated": false,
                "is_experimental": false,
                "language_type": "langpack",
                "resource_type": "language"
              },
              {
                "id": "python3-image",
                "name": "Python 3.x - Beta",
                "is_deprecated": false,
                "is_experimental": false,
                "language_type": "image",
                "resource_type": "language"
              },
              {
                "id": "python3-1",
                "name": "Python 3.x",
                "is_deprecated": false,
                "is_experimental": false,
                "language_type": "langpack",
                "resource_type": "language"
              },
              {
                "id": "r",
                "name": "R",
                "is_deprecated": false,
                "is_experimental": false,
                "language_type": "langpack",
                "resource_type": "language"
              },
              {
                "id": "ruby",
                "name": "Ruby",
                "is_deprecated": false,
                "is_experimental": false,
                "language_type": "langpack",
                "resource_type": "language"
              },
              {
                "id": "rust",
                "name": "Rust",
                "is_deprecated": false,
                "is_experimental": false,
                "language_type": "langpack",
                "resource_type": "language"
              },
              {
                "id": "scala",
                "name": "Scala",
                "is_deprecated": false,
                "is_experimental": false,
                "language_type": "langpack",
                "resource_type": "language"
              }
            ]
          }
        }
      },
      {
        "request": {
          "url": "/webapi/algorithms/acunniffe/example_test/versions/latest",
          "method": "GET",
          "headers": {
            "host": "algorithmia.com",
            "connection": "keep-alive",
            "pragma": "no-cache",
            "cache-control": "no-cache",
            "accept": "application/json, text/plain, */*",
            "dnt": "1",
            "x-xsrf-token": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "cors",
            "referer": "https://algorithmia.com/algorithms/acunniffe/example_test/settings",
            "accept-encoding": "gzip, deflate, br",
            "accept-language": "en-US,en;q=0.9",
            "cookie": "ajs_group_id=null; ajs_anonymous_id=%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22; _ga=GA1.2.1872580011.1571235636; _fbp=fb.1.1571235636317.604574724; intercom-id-c9fj6354=01941621-342b-4320-ad75-53826b5a002c; hubspotutk=105fad8a9b12bfed67330a0dbfe12c61; _gid=GA1.2.1843278152.1572282100; __zlcmid=uzie5dAUbB300Y; __hstc=69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3; __hssrc=1; fs_intercom=4655074328608768:4513847218700288; XSRF-TOKEN=0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da; referrer=www.google.com; landing_page=https://algorithmia.com/; signup_session=true; ajs_user_id=%22acunniffe%22; fs_uid=rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636; new-algo-language=scala; _gat=1; __hssc=69686351.5.1572357353053; intercom-session-c9fj6354=L08zdks3K1FOZEs0NngyR2NDQjBxN3VMb1J3dE1QZ0t4N2piYXY5ZmlNWFNVMkxseFhidkxhZ0g4QStWV2hYay0tUUtjQUtFaUZvLzJIZ0drSFdnRjM0UT09--fc3e700881b2cd1507c47ce6533f5b502d54fb7c; ALGO_SESSION=8670a17529deca0373bf05915869d395b2289aff-last-access=2019-10-29T14%3A06%3A11.133Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "cookies": {
            "ajs_group_id": "null",
            "ajs_anonymous_id": "%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22",
            "_ga": "GA1.2.1872580011.1571235636",
            "_fbp": "fb.1.1571235636317.604574724",
            "intercom-id-c9fj6354": "01941621-342b-4320-ad75-53826b5a002c",
            "hubspotutk": "105fad8a9b12bfed67330a0dbfe12c61",
            "_gid": "GA1.2.1843278152.1572282100",
            "__zlcmid": "uzie5dAUbB300Y",
            "__hstc": "69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3",
            "__hssrc": "1",
            "fs_intercom": "4655074328608768:4513847218700288",
            "XSRF-TOKEN": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "referrer": "www.google.com",
            "landing_page": "https://algorithmia.com/",
            "signup_session": "true",
            "ajs_user_id": "%22acunniffe%22",
            "fs_uid": "rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636",
            "new-algo-language": "scala",
            "_gat": "1",
            "__hssc": "69686351.5.1572357353053",
            "intercom-session-c9fj6354": "L08zdks3K1FOZEs0NngyR2NDQjBxN3VMb1J3dE1QZ0t4N2piYXY5ZmlNWFNVMkxseFhidkxhZ0g4QStWV2hYay0tUUtjQUtFaUZvLzJIZ0drSFdnRjM0UT09--fc3e700881b2cd1507c47ce6533f5b502d54fb7c",
            "ALGO_SESSION": "8670a17529deca0373bf05915869d395b2289aff-last-access=2019-10-29T14%3A06%3A11.133Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "queryParameters": {}
        },
        "response": {
          "statusCode": 200,
          "headers": {
            "content-encoding": "gzip",
            "content-type": "application/json; charset=utf-8",
            "date": "Tue, 29 Oct 2019 14:06:11 GMT",
            "set-cookie": "ALGO_SESSION=d7fa56ac519c3ed6e0e3fe94d4144d3734d35d7d-last-access=2019-10-29T14%3A06%3A11.945Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3; Max-Age=86400; Expires=Wed, 30 Oct 2019 14:06:11 GMT; Path=/; Domain=algorithmia.com; Secure; HTTPOnly",
            "strict-transport-security": "max-age=86400; includeSubDomains",
            "vary": "Accept-Encoding",
            "x-content-type-options": "nosniff",
            "x-frame-options": "DENY",
            "content-length": "43",
            "connection": "keep-alive"
          },
          "body": {
            "latest_version": null
          }
        }
      },
      {
        "request": {
          "url": "/v1/algorithms/acunniffe/example_test",
          "method": "GET",
          "headers": {
            "host": "algorithmia.com",
            "connection": "keep-alive",
            "pragma": "no-cache",
            "cache-control": "no-cache",
            "accept": "application/json, text/plain, */*",
            "dnt": "1",
            "x-xsrf-token": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "cors",
            "referer": "https://algorithmia.com/algorithms/acunniffe/example_test/settings",
            "accept-encoding": "gzip, deflate, br",
            "accept-language": "en-US,en;q=0.9",
            "cookie": "ajs_group_id=null; ajs_anonymous_id=%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22; _ga=GA1.2.1872580011.1571235636; _fbp=fb.1.1571235636317.604574724; intercom-id-c9fj6354=01941621-342b-4320-ad75-53826b5a002c; hubspotutk=105fad8a9b12bfed67330a0dbfe12c61; _gid=GA1.2.1843278152.1572282100; __zlcmid=uzie5dAUbB300Y; __hstc=69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3; __hssrc=1; fs_intercom=4655074328608768:4513847218700288; XSRF-TOKEN=0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da; referrer=www.google.com; landing_page=https://algorithmia.com/; signup_session=true; ajs_user_id=%22acunniffe%22; fs_uid=rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636; new-algo-language=scala; _gat=1; __hssc=69686351.5.1572357353053; intercom-session-c9fj6354=L08zdks3K1FOZEs0NngyR2NDQjBxN3VMb1J3dE1QZ0t4N2piYXY5ZmlNWFNVMkxseFhidkxhZ0g4QStWV2hYay0tUUtjQUtFaUZvLzJIZ0drSFdnRjM0UT09--fc3e700881b2cd1507c47ce6533f5b502d54fb7c; ALGO_SESSION=8670a17529deca0373bf05915869d395b2289aff-last-access=2019-10-29T14%3A06%3A11.133Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "cookies": {
            "ajs_group_id": "null",
            "ajs_anonymous_id": "%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22",
            "_ga": "GA1.2.1872580011.1571235636",
            "_fbp": "fb.1.1571235636317.604574724",
            "intercom-id-c9fj6354": "01941621-342b-4320-ad75-53826b5a002c",
            "hubspotutk": "105fad8a9b12bfed67330a0dbfe12c61",
            "_gid": "GA1.2.1843278152.1572282100",
            "__zlcmid": "uzie5dAUbB300Y",
            "__hstc": "69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3",
            "__hssrc": "1",
            "fs_intercom": "4655074328608768:4513847218700288",
            "XSRF-TOKEN": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "referrer": "www.google.com",
            "landing_page": "https://algorithmia.com/",
            "signup_session": "true",
            "ajs_user_id": "%22acunniffe%22",
            "fs_uid": "rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636",
            "new-algo-language": "scala",
            "_gat": "1",
            "__hssc": "69686351.5.1572357353053",
            "intercom-session-c9fj6354": "L08zdks3K1FOZEs0NngyR2NDQjBxN3VMb1J3dE1QZ0t4N2piYXY5ZmlNWFNVMkxseFhidkxhZ0g4QStWV2hYay0tUUtjQUtFaUZvLzJIZ0drSFdnRjM0UT09--fc3e700881b2cd1507c47ce6533f5b502d54fb7c",
            "ALGO_SESSION": "8670a17529deca0373bf05915869d395b2289aff-last-access=2019-10-29T14%3A06%3A11.133Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "queryParameters": {}
        },
        "response": {
          "statusCode": 200,
          "headers": {
            "content-encoding": "gzip",
            "content-type": "application/json; charset=utf-8",
            "date": "Tue, 29 Oct 2019 14:06:11 GMT",
            "set-cookie": "ALGO_SESSION=c466f7aa6c44084d5d5cef4c1916f59d51d0e30b-last-access=2019-10-29T14%3A06%3A11.985Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3; Max-Age=86400; Expires=Wed, 30 Oct 2019 14:06:11 GMT; Path=/; Domain=algorithmia.com; Secure; HTTPOnly",
            "strict-transport-security": "max-age=86400; includeSubDomains",
            "vary": "Accept-Encoding",
            "x-content-type-options": "nosniff",
            "x-frame-options": "DENY",
            "content-length": "188",
            "connection": "keep-alive"
          },
          "body": {
            "name": "example_test",
            "details": {
              "label": "example_test",
              "tagline": ""
            },
            "settings": {
              "algorithm_callability": "private",
              "source_visibility": "closed",
              "language": "scala",
              "environment": "cpu",
              "license": "apl",
              "network_access": "full",
              "pipeline_enabled": true
            },
            "resource_type": "algorithm"
          }
        }
      },
      {
        "request": {
          "url": "/webapi/algorithms/acunniffe/example_test",
          "method": "GET",
          "headers": {
            "host": "algorithmia.com",
            "connection": "keep-alive",
            "pragma": "no-cache",
            "cache-control": "no-cache",
            "accept": "application/json, text/plain, */*",
            "dnt": "1",
            "x-xsrf-token": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "cors",
            "referer": "https://algorithmia.com/algorithms/acunniffe/example_test/settings",
            "accept-encoding": "gzip, deflate, br",
            "accept-language": "en-US,en;q=0.9",
            "cookie": "ajs_group_id=null; ajs_anonymous_id=%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22; _ga=GA1.2.1872580011.1571235636; _fbp=fb.1.1571235636317.604574724; intercom-id-c9fj6354=01941621-342b-4320-ad75-53826b5a002c; hubspotutk=105fad8a9b12bfed67330a0dbfe12c61; _gid=GA1.2.1843278152.1572282100; __zlcmid=uzie5dAUbB300Y; __hstc=69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3; __hssrc=1; fs_intercom=4655074328608768:4513847218700288; XSRF-TOKEN=0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da; referrer=www.google.com; landing_page=https://algorithmia.com/; signup_session=true; ajs_user_id=%22acunniffe%22; fs_uid=rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636; new-algo-language=scala; _gat=1; __hssc=69686351.5.1572357353053; intercom-session-c9fj6354=L08zdks3K1FOZEs0NngyR2NDQjBxN3VMb1J3dE1QZ0t4N2piYXY5ZmlNWFNVMkxseFhidkxhZ0g4QStWV2hYay0tUUtjQUtFaUZvLzJIZ0drSFdnRjM0UT09--fc3e700881b2cd1507c47ce6533f5b502d54fb7c; ALGO_SESSION=c466f7aa6c44084d5d5cef4c1916f59d51d0e30b-last-access=2019-10-29T14%3A06%3A11.985Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "cookies": {
            "ajs_group_id": "null",
            "ajs_anonymous_id": "%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22",
            "_ga": "GA1.2.1872580011.1571235636",
            "_fbp": "fb.1.1571235636317.604574724",
            "intercom-id-c9fj6354": "01941621-342b-4320-ad75-53826b5a002c",
            "hubspotutk": "105fad8a9b12bfed67330a0dbfe12c61",
            "_gid": "GA1.2.1843278152.1572282100",
            "__zlcmid": "uzie5dAUbB300Y",
            "__hstc": "69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3",
            "__hssrc": "1",
            "fs_intercom": "4655074328608768:4513847218700288",
            "XSRF-TOKEN": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "referrer": "www.google.com",
            "landing_page": "https://algorithmia.com/",
            "signup_session": "true",
            "ajs_user_id": "%22acunniffe%22",
            "fs_uid": "rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636",
            "new-algo-language": "scala",
            "_gat": "1",
            "__hssc": "69686351.5.1572357353053",
            "intercom-session-c9fj6354": "L08zdks3K1FOZEs0NngyR2NDQjBxN3VMb1J3dE1QZ0t4N2piYXY5ZmlNWFNVMkxseFhidkxhZ0g4QStWV2hYay0tUUtjQUtFaUZvLzJIZ0drSFdnRjM0UT09--fc3e700881b2cd1507c47ce6533f5b502d54fb7c",
            "ALGO_SESSION": "c466f7aa6c44084d5d5cef4c1916f59d51d0e30b-last-access=2019-10-29T14%3A06%3A11.985Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "queryParameters": {}
        },
        "response": {
          "statusCode": 200,
          "headers": {
            "content-encoding": "gzip",
            "content-type": "application/json; charset=utf-8",
            "date": "Tue, 29 Oct 2019 14:06:13 GMT",
            "set-cookie": "ALGO_SESSION=a7ec3ff9107d4d6b8e3ac586ef0d725f8cf5dd21-last-access=2019-10-29T14%3A06%3A13.141Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3; Max-Age=86400; Expires=Wed, 30 Oct 2019 14:06:13 GMT; Path=/; Domain=algorithmia.com; Secure; HTTPOnly",
            "strict-transport-security": "max-age=86400; includeSubDomains",
            "vary": "Accept-Encoding",
            "x-content-type-options": "nosniff",
            "x-frame-options": "DENY",
            "content-length": "263",
            "connection": "keep-alive"
          },
          "body": {
            "algorithm": {
              "algo_id": 130237,
              "object_id": "algo-533a1908-4277-4d30-bd0b-07bf2cd88517",
              "username": "acunniffe",
              "algoname": "example_test",
              "algolabel": "example_test",
              "language": "scala",
              "tag_line": "",
              "discoverable_world": false,
              "source_world": false,
              "license": "apl",
              "tags": [],
              "stats": {
                "total_calls": 0,
                "follower_count": 1,
                "vote_count": 0
              },
              "current_user": {
                "is_member": true,
                "is_owner": true,
                "is_follower": true,
                "is_voter": false
              }
            }
          }
        }
      },
      {
        "request": {
          "url": "/webapi/algorithms/acunniffe/example_test",
          "method": "GET",
          "headers": {
            "host": "algorithmia.com",
            "connection": "keep-alive",
            "pragma": "no-cache",
            "cache-control": "no-cache",
            "accept": "application/json, text/plain, */*",
            "dnt": "1",
            "x-xsrf-token": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "cors",
            "referer": "https://algorithmia.com/algorithms/acunniffe/example_test/settings",
            "accept-encoding": "gzip, deflate, br",
            "accept-language": "en-US,en;q=0.9",
            "cookie": "ajs_group_id=null; ajs_anonymous_id=%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22; _ga=GA1.2.1872580011.1571235636; _fbp=fb.1.1571235636317.604574724; intercom-id-c9fj6354=01941621-342b-4320-ad75-53826b5a002c; hubspotutk=105fad8a9b12bfed67330a0dbfe12c61; _gid=GA1.2.1843278152.1572282100; __zlcmid=uzie5dAUbB300Y; __hstc=69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3; __hssrc=1; fs_intercom=4655074328608768:4513847218700288; XSRF-TOKEN=0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da; referrer=www.google.com; landing_page=https://algorithmia.com/; signup_session=true; ajs_user_id=%22acunniffe%22; fs_uid=rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636; new-algo-language=scala; _gat=1; __hssc=69686351.5.1572357353053; intercom-session-c9fj6354=L08zdks3K1FOZEs0NngyR2NDQjBxN3VMb1J3dE1QZ0t4N2piYXY5ZmlNWFNVMkxseFhidkxhZ0g4QStWV2hYay0tUUtjQUtFaUZvLzJIZ0drSFdnRjM0UT09--fc3e700881b2cd1507c47ce6533f5b502d54fb7c; ALGO_SESSION=a7ec3ff9107d4d6b8e3ac586ef0d725f8cf5dd21-last-access=2019-10-29T14%3A06%3A13.141Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "cookies": {
            "ajs_group_id": "null",
            "ajs_anonymous_id": "%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22",
            "_ga": "GA1.2.1872580011.1571235636",
            "_fbp": "fb.1.1571235636317.604574724",
            "intercom-id-c9fj6354": "01941621-342b-4320-ad75-53826b5a002c",
            "hubspotutk": "105fad8a9b12bfed67330a0dbfe12c61",
            "_gid": "GA1.2.1843278152.1572282100",
            "__zlcmid": "uzie5dAUbB300Y",
            "__hstc": "69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3",
            "__hssrc": "1",
            "fs_intercom": "4655074328608768:4513847218700288",
            "XSRF-TOKEN": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "referrer": "www.google.com",
            "landing_page": "https://algorithmia.com/",
            "signup_session": "true",
            "ajs_user_id": "%22acunniffe%22",
            "fs_uid": "rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636",
            "new-algo-language": "scala",
            "_gat": "1",
            "__hssc": "69686351.5.1572357353053",
            "intercom-session-c9fj6354": "L08zdks3K1FOZEs0NngyR2NDQjBxN3VMb1J3dE1QZ0t4N2piYXY5ZmlNWFNVMkxseFhidkxhZ0g4QStWV2hYay0tUUtjQUtFaUZvLzJIZ0drSFdnRjM0UT09--fc3e700881b2cd1507c47ce6533f5b502d54fb7c",
            "ALGO_SESSION": "a7ec3ff9107d4d6b8e3ac586ef0d725f8cf5dd21-last-access=2019-10-29T14%3A06%3A13.141Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "queryParameters": {}
        },
        "response": {
          "statusCode": 200,
          "headers": {
            "content-encoding": "gzip",
            "content-type": "application/json; charset=utf-8",
            "date": "Tue, 29 Oct 2019 14:06:13 GMT",
            "set-cookie": "ALGO_SESSION=9c90249f46de3962c150fc5e2313aaea10352128-last-access=2019-10-29T14%3A06%3A13.445Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3; Max-Age=86400; Expires=Wed, 30 Oct 2019 14:06:13 GMT; Path=/; Domain=algorithmia.com; Secure; HTTPOnly",
            "strict-transport-security": "max-age=86400; includeSubDomains",
            "vary": "Accept-Encoding",
            "x-content-type-options": "nosniff",
            "x-frame-options": "DENY",
            "content-length": "263",
            "connection": "keep-alive"
          },
          "body": {
            "algorithm": {
              "algo_id": 130237,
              "object_id": "algo-533a1908-4277-4d30-bd0b-07bf2cd88517",
              "username": "acunniffe",
              "algoname": "example_test",
              "algolabel": "example_test",
              "language": "scala",
              "tag_line": "",
              "discoverable_world": false,
              "source_world": false,
              "license": "apl",
              "tags": [],
              "stats": {
                "total_calls": 0,
                "follower_count": 1,
                "vote_count": 0
              },
              "current_user": {
                "is_member": true,
                "is_owner": true,
                "is_follower": true,
                "is_voter": false
              }
            }
          }
        }
      },
      {
        "request": {
          "url": "/webapi/algorithms/acunniffe/example_test/versions/latest",
          "method": "GET",
          "headers": {
            "host": "algorithmia.com",
            "connection": "keep-alive",
            "pragma": "no-cache",
            "cache-control": "no-cache",
            "accept": "application/json, text/plain, */*",
            "dnt": "1",
            "x-xsrf-token": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "cors",
            "referer": "https://algorithmia.com/algorithms/acunniffe/example_test/settings",
            "accept-encoding": "gzip, deflate, br",
            "accept-language": "en-US,en;q=0.9",
            "cookie": "ajs_group_id=null; ajs_anonymous_id=%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22; _ga=GA1.2.1872580011.1571235636; _fbp=fb.1.1571235636317.604574724; intercom-id-c9fj6354=01941621-342b-4320-ad75-53826b5a002c; hubspotutk=105fad8a9b12bfed67330a0dbfe12c61; _gid=GA1.2.1843278152.1572282100; __zlcmid=uzie5dAUbB300Y; __hstc=69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3; __hssrc=1; fs_intercom=4655074328608768:4513847218700288; XSRF-TOKEN=0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da; referrer=www.google.com; landing_page=https://algorithmia.com/; signup_session=true; ajs_user_id=%22acunniffe%22; fs_uid=rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636; new-algo-language=scala; _gat=1; __hssc=69686351.5.1572357353053; intercom-session-c9fj6354=L08zdks3K1FOZEs0NngyR2NDQjBxN3VMb1J3dE1QZ0t4N2piYXY5ZmlNWFNVMkxseFhidkxhZ0g4QStWV2hYay0tUUtjQUtFaUZvLzJIZ0drSFdnRjM0UT09--fc3e700881b2cd1507c47ce6533f5b502d54fb7c; ALGO_SESSION=9c90249f46de3962c150fc5e2313aaea10352128-last-access=2019-10-29T14%3A06%3A13.445Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "cookies": {
            "ajs_group_id": "null",
            "ajs_anonymous_id": "%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22",
            "_ga": "GA1.2.1872580011.1571235636",
            "_fbp": "fb.1.1571235636317.604574724",
            "intercom-id-c9fj6354": "01941621-342b-4320-ad75-53826b5a002c",
            "hubspotutk": "105fad8a9b12bfed67330a0dbfe12c61",
            "_gid": "GA1.2.1843278152.1572282100",
            "__zlcmid": "uzie5dAUbB300Y",
            "__hstc": "69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3",
            "__hssrc": "1",
            "fs_intercom": "4655074328608768:4513847218700288",
            "XSRF-TOKEN": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "referrer": "www.google.com",
            "landing_page": "https://algorithmia.com/",
            "signup_session": "true",
            "ajs_user_id": "%22acunniffe%22",
            "fs_uid": "rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636",
            "new-algo-language": "scala",
            "_gat": "1",
            "__hssc": "69686351.5.1572357353053",
            "intercom-session-c9fj6354": "L08zdks3K1FOZEs0NngyR2NDQjBxN3VMb1J3dE1QZ0t4N2piYXY5ZmlNWFNVMkxseFhidkxhZ0g4QStWV2hYay0tUUtjQUtFaUZvLzJIZ0drSFdnRjM0UT09--fc3e700881b2cd1507c47ce6533f5b502d54fb7c",
            "ALGO_SESSION": "9c90249f46de3962c150fc5e2313aaea10352128-last-access=2019-10-29T14%3A06%3A13.445Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "queryParameters": {}
        },
        "response": {
          "statusCode": 200,
          "headers": {
            "content-encoding": "gzip",
            "content-type": "application/json; charset=utf-8",
            "date": "Tue, 29 Oct 2019 14:06:13 GMT",
            "set-cookie": "ALGO_SESSION=9f3f870bfdb63a8ae6013261c0f1ec868b9fb75d-last-access=2019-10-29T14%3A06%3A13.492Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3; Max-Age=86400; Expires=Wed, 30 Oct 2019 14:06:13 GMT; Path=/; Domain=algorithmia.com; Secure; HTTPOnly",
            "strict-transport-security": "max-age=86400; includeSubDomains",
            "vary": "Accept-Encoding",
            "x-content-type-options": "nosniff",
            "x-frame-options": "DENY",
            "content-length": "43",
            "connection": "keep-alive"
          },
          "body": {
            "latest_version": null
          }
        }
      },
      {
        "request": {
          "url": "/v1/algorithms/acunniffe/example_test",
          "method": "GET",
          "headers": {
            "host": "algorithmia.com",
            "connection": "keep-alive",
            "pragma": "no-cache",
            "cache-control": "no-cache",
            "accept": "application/json, text/plain, */*",
            "dnt": "1",
            "x-xsrf-token": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "cors",
            "referer": "https://algorithmia.com/algorithms/acunniffe/example_test/source",
            "accept-encoding": "gzip, deflate, br",
            "accept-language": "en-US,en;q=0.9",
            "cookie": "ajs_group_id=null; ajs_anonymous_id=%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22; _ga=GA1.2.1872580011.1571235636; _fbp=fb.1.1571235636317.604574724; intercom-id-c9fj6354=01941621-342b-4320-ad75-53826b5a002c; hubspotutk=105fad8a9b12bfed67330a0dbfe12c61; _gid=GA1.2.1843278152.1572282100; __zlcmid=uzie5dAUbB300Y; __hstc=69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3; __hssrc=1; fs_intercom=4655074328608768:4513847218700288; XSRF-TOKEN=0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da; referrer=www.google.com; landing_page=https://algorithmia.com/; signup_session=true; ajs_user_id=%22acunniffe%22; fs_uid=rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636; new-algo-language=scala; _gat=1; __hssc=69686351.5.1572357353053; intercom-session-c9fj6354=L08zdks3K1FOZEs0NngyR2NDQjBxN3VMb1J3dE1QZ0t4N2piYXY5ZmlNWFNVMkxseFhidkxhZ0g4QStWV2hYay0tUUtjQUtFaUZvLzJIZ0drSFdnRjM0UT09--fc3e700881b2cd1507c47ce6533f5b502d54fb7c; ALGO_SESSION=9f3f870bfdb63a8ae6013261c0f1ec868b9fb75d-last-access=2019-10-29T14%3A06%3A13.492Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "cookies": {
            "ajs_group_id": "null",
            "ajs_anonymous_id": "%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22",
            "_ga": "GA1.2.1872580011.1571235636",
            "_fbp": "fb.1.1571235636317.604574724",
            "intercom-id-c9fj6354": "01941621-342b-4320-ad75-53826b5a002c",
            "hubspotutk": "105fad8a9b12bfed67330a0dbfe12c61",
            "_gid": "GA1.2.1843278152.1572282100",
            "__zlcmid": "uzie5dAUbB300Y",
            "__hstc": "69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3",
            "__hssrc": "1",
            "fs_intercom": "4655074328608768:4513847218700288",
            "XSRF-TOKEN": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "referrer": "www.google.com",
            "landing_page": "https://algorithmia.com/",
            "signup_session": "true",
            "ajs_user_id": "%22acunniffe%22",
            "fs_uid": "rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636",
            "new-algo-language": "scala",
            "_gat": "1",
            "__hssc": "69686351.5.1572357353053",
            "intercom-session-c9fj6354": "L08zdks3K1FOZEs0NngyR2NDQjBxN3VMb1J3dE1QZ0t4N2piYXY5ZmlNWFNVMkxseFhidkxhZ0g4QStWV2hYay0tUUtjQUtFaUZvLzJIZ0drSFdnRjM0UT09--fc3e700881b2cd1507c47ce6533f5b502d54fb7c",
            "ALGO_SESSION": "9f3f870bfdb63a8ae6013261c0f1ec868b9fb75d-last-access=2019-10-29T14%3A06%3A13.492Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "queryParameters": {}
        },
        "response": {
          "statusCode": 200,
          "headers": {
            "content-encoding": "gzip",
            "content-type": "application/json; charset=utf-8",
            "date": "Tue, 29 Oct 2019 14:06:13 GMT",
            "set-cookie": "ALGO_SESSION=9ef33b071c999d0d79b04c6b98af1c26f50196b4-last-access=2019-10-29T14%3A06%3A13.655Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3; Max-Age=86400; Expires=Wed, 30 Oct 2019 14:06:13 GMT; Path=/; Domain=algorithmia.com; Secure; HTTPOnly",
            "strict-transport-security": "max-age=86400; includeSubDomains",
            "vary": "Accept-Encoding",
            "x-content-type-options": "nosniff",
            "x-frame-options": "DENY",
            "content-length": "188",
            "connection": "keep-alive"
          },
          "body": {
            "name": "example_test",
            "details": {
              "label": "example_test",
              "tagline": ""
            },
            "settings": {
              "algorithm_callability": "private",
              "source_visibility": "closed",
              "language": "scala",
              "environment": "cpu",
              "license": "apl",
              "network_access": "full",
              "pipeline_enabled": true
            },
            "resource_type": "algorithm"
          }
        }
      },
      {
        "request": {
          "url": "/webapi/algorithms/acunniffe/example_test",
          "method": "GET",
          "headers": {
            "host": "algorithmia.com",
            "connection": "keep-alive",
            "pragma": "no-cache",
            "cache-control": "no-cache",
            "accept": "application/json, text/plain, */*",
            "dnt": "1",
            "x-xsrf-token": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "cors",
            "referer": "https://algorithmia.com/algorithms/acunniffe/example_test/settings",
            "accept-encoding": "gzip, deflate, br",
            "accept-language": "en-US,en;q=0.9",
            "cookie": "ajs_group_id=null; ajs_anonymous_id=%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22; _ga=GA1.2.1872580011.1571235636; _fbp=fb.1.1571235636317.604574724; intercom-id-c9fj6354=01941621-342b-4320-ad75-53826b5a002c; hubspotutk=105fad8a9b12bfed67330a0dbfe12c61; _gid=GA1.2.1843278152.1572282100; __zlcmid=uzie5dAUbB300Y; __hstc=69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3; __hssrc=1; fs_intercom=4655074328608768:4513847218700288; XSRF-TOKEN=0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da; referrer=www.google.com; landing_page=https://algorithmia.com/; signup_session=true; ajs_user_id=%22acunniffe%22; fs_uid=rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636; new-algo-language=scala; _gat=1; __hssc=69686351.5.1572357353053; intercom-session-c9fj6354=L08zdks3K1FOZEs0NngyR2NDQjBxN3VMb1J3dE1QZ0t4N2piYXY5ZmlNWFNVMkxseFhidkxhZ0g4QStWV2hYay0tUUtjQUtFaUZvLzJIZ0drSFdnRjM0UT09--fc3e700881b2cd1507c47ce6533f5b502d54fb7c; ALGO_SESSION=127c3cdb80c10e021f6837fca58cd50c1047960d-last-access=2019-10-29T14%3A06%3A13.673Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "cookies": {
            "ajs_group_id": "null",
            "ajs_anonymous_id": "%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22",
            "_ga": "GA1.2.1872580011.1571235636",
            "_fbp": "fb.1.1571235636317.604574724",
            "intercom-id-c9fj6354": "01941621-342b-4320-ad75-53826b5a002c",
            "hubspotutk": "105fad8a9b12bfed67330a0dbfe12c61",
            "_gid": "GA1.2.1843278152.1572282100",
            "__zlcmid": "uzie5dAUbB300Y",
            "__hstc": "69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3",
            "__hssrc": "1",
            "fs_intercom": "4655074328608768:4513847218700288",
            "XSRF-TOKEN": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "referrer": "www.google.com",
            "landing_page": "https://algorithmia.com/",
            "signup_session": "true",
            "ajs_user_id": "%22acunniffe%22",
            "fs_uid": "rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636",
            "new-algo-language": "scala",
            "_gat": "1",
            "__hssc": "69686351.5.1572357353053",
            "intercom-session-c9fj6354": "L08zdks3K1FOZEs0NngyR2NDQjBxN3VMb1J3dE1QZ0t4N2piYXY5ZmlNWFNVMkxseFhidkxhZ0g4QStWV2hYay0tUUtjQUtFaUZvLzJIZ0drSFdnRjM0UT09--fc3e700881b2cd1507c47ce6533f5b502d54fb7c",
            "ALGO_SESSION": "127c3cdb80c10e021f6837fca58cd50c1047960d-last-access=2019-10-29T14%3A06%3A13.673Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "queryParameters": {}
        },
        "response": {
          "statusCode": 200,
          "headers": {
            "content-encoding": "gzip",
            "content-type": "application/json; charset=utf-8",
            "date": "Tue, 29 Oct 2019 14:06:14 GMT",
            "set-cookie": "ALGO_SESSION=fc52472e0aa1906b0dbde6f4d075c103306c6f32-last-access=2019-10-29T14%3A06%3A14.696Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3; Max-Age=86400; Expires=Wed, 30 Oct 2019 14:06:14 GMT; Path=/; Domain=algorithmia.com; Secure; HTTPOnly",
            "strict-transport-security": "max-age=86400; includeSubDomains",
            "vary": "Accept-Encoding",
            "x-content-type-options": "nosniff",
            "x-frame-options": "DENY",
            "content-length": "263",
            "connection": "keep-alive"
          },
          "body": {
            "algorithm": {
              "algo_id": 130237,
              "object_id": "algo-533a1908-4277-4d30-bd0b-07bf2cd88517",
              "username": "acunniffe",
              "algoname": "example_test",
              "algolabel": "example_test",
              "language": "scala",
              "tag_line": "",
              "discoverable_world": false,
              "source_world": false,
              "license": "apl",
              "tags": [],
              "stats": {
                "total_calls": 0,
                "follower_count": 1,
                "vote_count": 0
              },
              "current_user": {
                "is_member": true,
                "is_owner": true,
                "is_follower": true,
                "is_voter": false
              }
            }
          }
        }
      },
      {
        "request": {
          "url": "/notifications",
          "method": "GET",
          "headers": {
            "host": "algorithmia.com",
            "connection": "keep-alive",
            "pragma": "no-cache",
            "cache-control": "no-cache",
            "accept": "application/json, text/plain, */*",
            "dnt": "1",
            "x-xsrf-token": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "cors",
            "referer": "https://algorithmia.com/algorithms/acunniffe/example_test/settings",
            "accept-encoding": "gzip, deflate, br",
            "accept-language": "en-US,en;q=0.9",
            "cookie": "ajs_group_id=null; ajs_anonymous_id=%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22; _ga=GA1.2.1872580011.1571235636; _fbp=fb.1.1571235636317.604574724; intercom-id-c9fj6354=01941621-342b-4320-ad75-53826b5a002c; hubspotutk=105fad8a9b12bfed67330a0dbfe12c61; _gid=GA1.2.1843278152.1572282100; __zlcmid=uzie5dAUbB300Y; __hstc=69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3; __hssrc=1; fs_intercom=4655074328608768:4513847218700288; XSRF-TOKEN=0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da; referrer=www.google.com; landing_page=https://algorithmia.com/; signup_session=true; ajs_user_id=%22acunniffe%22; fs_uid=rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636; new-algo-language=scala; _gat=1; __hssc=69686351.5.1572357353053; intercom-session-c9fj6354=L08zdks3K1FOZEs0NngyR2NDQjBxN3VMb1J3dE1QZ0t4N2piYXY5ZmlNWFNVMkxseFhidkxhZ0g4QStWV2hYay0tUUtjQUtFaUZvLzJIZ0drSFdnRjM0UT09--fc3e700881b2cd1507c47ce6533f5b502d54fb7c; ALGO_SESSION=fc52472e0aa1906b0dbde6f4d075c103306c6f32-last-access=2019-10-29T14%3A06%3A14.696Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "cookies": {
            "ajs_group_id": "null",
            "ajs_anonymous_id": "%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22",
            "_ga": "GA1.2.1872580011.1571235636",
            "_fbp": "fb.1.1571235636317.604574724",
            "intercom-id-c9fj6354": "01941621-342b-4320-ad75-53826b5a002c",
            "hubspotutk": "105fad8a9b12bfed67330a0dbfe12c61",
            "_gid": "GA1.2.1843278152.1572282100",
            "__zlcmid": "uzie5dAUbB300Y",
            "__hstc": "69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3",
            "__hssrc": "1",
            "fs_intercom": "4655074328608768:4513847218700288",
            "XSRF-TOKEN": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "referrer": "www.google.com",
            "landing_page": "https://algorithmia.com/",
            "signup_session": "true",
            "ajs_user_id": "%22acunniffe%22",
            "fs_uid": "rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636",
            "new-algo-language": "scala",
            "_gat": "1",
            "__hssc": "69686351.5.1572357353053",
            "intercom-session-c9fj6354": "L08zdks3K1FOZEs0NngyR2NDQjBxN3VMb1J3dE1QZ0t4N2piYXY5ZmlNWFNVMkxseFhidkxhZ0g4QStWV2hYay0tUUtjQUtFaUZvLzJIZ0drSFdnRjM0UT09--fc3e700881b2cd1507c47ce6533f5b502d54fb7c",
            "ALGO_SESSION": "fc52472e0aa1906b0dbde6f4d075c103306c6f32-last-access=2019-10-29T14%3A06%3A14.696Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "queryParameters": {}
        },
        "response": {
          "statusCode": 200,
          "headers": {
            "content-encoding": "gzip",
            "content-type": "application/json; charset=utf-8",
            "date": "Tue, 29 Oct 2019 14:06:14 GMT",
            "set-cookie": "ALGO_SESSION=7624d4da98de0cb05847f92e7a86b9e01568b484-last-access=2019-10-29T14%3A06%3A14.796Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3; Max-Age=86400; Expires=Wed, 30 Oct 2019 14:06:14 GMT; Path=/; Domain=algorithmia.com; Secure; HTTPOnly",
            "strict-transport-security": "max-age=86400; includeSubDomains",
            "vary": "Accept-Encoding",
            "x-content-type-options": "nosniff",
            "x-frame-options": "DENY",
            "content-length": "243",
            "connection": "keep-alive"
          },
          "body": [
            {
              "notification_id": "notif-016e17d233b7-5c270611-8927-4efb-8743-78eec241f572",
              "to_username": "acunniffe",
              "event_type": "system",
              "event_context": {
                "message": "Welcome to Algorithmia! - We've added 50k credits to your account!",
                "url": "/users/acunniffe/account",
                "event_type": "system"
              },
              "read_at": 1572357947000,
              "created_at": 1572357682000
            }
          ]
        }
      },
      {
        "request": {
          "url": "/webapi/algorithms/acunniffe/example_test/versions/latest",
          "method": "GET",
          "headers": {
            "host": "algorithmia.com",
            "connection": "keep-alive",
            "pragma": "no-cache",
            "cache-control": "no-cache",
            "accept": "application/json, text/plain, */*",
            "dnt": "1",
            "x-xsrf-token": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "cors",
            "referer": "https://algorithmia.com/algorithms/acunniffe/example_test/settings",
            "accept-encoding": "gzip, deflate, br",
            "accept-language": "en-US,en;q=0.9",
            "cookie": "ajs_group_id=null; ajs_anonymous_id=%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22; _ga=GA1.2.1872580011.1571235636; _fbp=fb.1.1571235636317.604574724; intercom-id-c9fj6354=01941621-342b-4320-ad75-53826b5a002c; hubspotutk=105fad8a9b12bfed67330a0dbfe12c61; _gid=GA1.2.1843278152.1572282100; __zlcmid=uzie5dAUbB300Y; __hstc=69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3; __hssrc=1; fs_intercom=4655074328608768:4513847218700288; XSRF-TOKEN=0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da; referrer=www.google.com; landing_page=https://algorithmia.com/; signup_session=true; ajs_user_id=%22acunniffe%22; fs_uid=rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636; new-algo-language=scala; _gat=1; __hssc=69686351.5.1572357353053; intercom-session-c9fj6354=L08zdks3K1FOZEs0NngyR2NDQjBxN3VMb1J3dE1QZ0t4N2piYXY5ZmlNWFNVMkxseFhidkxhZ0g4QStWV2hYay0tUUtjQUtFaUZvLzJIZ0drSFdnRjM0UT09--fc3e700881b2cd1507c47ce6533f5b502d54fb7c; ALGO_SESSION=fc52472e0aa1906b0dbde6f4d075c103306c6f32-last-access=2019-10-29T14%3A06%3A14.696Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "cookies": {
            "ajs_group_id": "null",
            "ajs_anonymous_id": "%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22",
            "_ga": "GA1.2.1872580011.1571235636",
            "_fbp": "fb.1.1571235636317.604574724",
            "intercom-id-c9fj6354": "01941621-342b-4320-ad75-53826b5a002c",
            "hubspotutk": "105fad8a9b12bfed67330a0dbfe12c61",
            "_gid": "GA1.2.1843278152.1572282100",
            "__zlcmid": "uzie5dAUbB300Y",
            "__hstc": "69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3",
            "__hssrc": "1",
            "fs_intercom": "4655074328608768:4513847218700288",
            "XSRF-TOKEN": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "referrer": "www.google.com",
            "landing_page": "https://algorithmia.com/",
            "signup_session": "true",
            "ajs_user_id": "%22acunniffe%22",
            "fs_uid": "rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636",
            "new-algo-language": "scala",
            "_gat": "1",
            "__hssc": "69686351.5.1572357353053",
            "intercom-session-c9fj6354": "L08zdks3K1FOZEs0NngyR2NDQjBxN3VMb1J3dE1QZ0t4N2piYXY5ZmlNWFNVMkxseFhidkxhZ0g4QStWV2hYay0tUUtjQUtFaUZvLzJIZ0drSFdnRjM0UT09--fc3e700881b2cd1507c47ce6533f5b502d54fb7c",
            "ALGO_SESSION": "fc52472e0aa1906b0dbde6f4d075c103306c6f32-last-access=2019-10-29T14%3A06%3A14.696Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "queryParameters": {}
        },
        "response": {
          "statusCode": 200,
          "headers": {
            "content-encoding": "gzip",
            "content-type": "application/json; charset=utf-8",
            "date": "Tue, 29 Oct 2019 14:06:14 GMT",
            "set-cookie": "ALGO_SESSION=f3f8b39d5fd9068263244cbd94f6f2212548896f-last-access=2019-10-29T14%3A06%3A14.804Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3; Max-Age=86400; Expires=Wed, 30 Oct 2019 14:06:14 GMT; Path=/; Domain=algorithmia.com; Secure; HTTPOnly",
            "strict-transport-security": "max-age=86400; includeSubDomains",
            "vary": "Accept-Encoding",
            "x-content-type-options": "nosniff",
            "x-frame-options": "DENY",
            "content-length": "43",
            "connection": "keep-alive"
          },
          "body": {
            "latest_version": null
          }
        }
      },
      {
        "request": {
          "url": "/webapi/v1/languages",
          "method": "GET",
          "headers": {
            "host": "algorithmia.com",
            "connection": "keep-alive",
            "pragma": "no-cache",
            "cache-control": "no-cache",
            "accept": "application/json, text/plain, */*",
            "dnt": "1",
            "x-xsrf-token": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "cors",
            "referer": "https://algorithmia.com/algorithms/acunniffe/example_test/settings",
            "accept-encoding": "gzip, deflate, br",
            "accept-language": "en-US,en;q=0.9",
            "cookie": "ajs_group_id=null; ajs_anonymous_id=%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22; _ga=GA1.2.1872580011.1571235636; _fbp=fb.1.1571235636317.604574724; intercom-id-c9fj6354=01941621-342b-4320-ad75-53826b5a002c; hubspotutk=105fad8a9b12bfed67330a0dbfe12c61; _gid=GA1.2.1843278152.1572282100; __zlcmid=uzie5dAUbB300Y; __hstc=69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3; __hssrc=1; fs_intercom=4655074328608768:4513847218700288; XSRF-TOKEN=0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da; referrer=www.google.com; landing_page=https://algorithmia.com/; signup_session=true; ajs_user_id=%22acunniffe%22; fs_uid=rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636; new-algo-language=scala; _gat=1; __hssc=69686351.5.1572357353053; intercom-session-c9fj6354=L08zdks3K1FOZEs0NngyR2NDQjBxN3VMb1J3dE1QZ0t4N2piYXY5ZmlNWFNVMkxseFhidkxhZ0g4QStWV2hYay0tUUtjQUtFaUZvLzJIZ0drSFdnRjM0UT09--fc3e700881b2cd1507c47ce6533f5b502d54fb7c; ALGO_SESSION=fc52472e0aa1906b0dbde6f4d075c103306c6f32-last-access=2019-10-29T14%3A06%3A14.696Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "cookies": {
            "ajs_group_id": "null",
            "ajs_anonymous_id": "%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22",
            "_ga": "GA1.2.1872580011.1571235636",
            "_fbp": "fb.1.1571235636317.604574724",
            "intercom-id-c9fj6354": "01941621-342b-4320-ad75-53826b5a002c",
            "hubspotutk": "105fad8a9b12bfed67330a0dbfe12c61",
            "_gid": "GA1.2.1843278152.1572282100",
            "__zlcmid": "uzie5dAUbB300Y",
            "__hstc": "69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3",
            "__hssrc": "1",
            "fs_intercom": "4655074328608768:4513847218700288",
            "XSRF-TOKEN": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "referrer": "www.google.com",
            "landing_page": "https://algorithmia.com/",
            "signup_session": "true",
            "ajs_user_id": "%22acunniffe%22",
            "fs_uid": "rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636",
            "new-algo-language": "scala",
            "_gat": "1",
            "__hssc": "69686351.5.1572357353053",
            "intercom-session-c9fj6354": "L08zdks3K1FOZEs0NngyR2NDQjBxN3VMb1J3dE1QZ0t4N2piYXY5ZmlNWFNVMkxseFhidkxhZ0g4QStWV2hYay0tUUtjQUtFaUZvLzJIZ0drSFdnRjM0UT09--fc3e700881b2cd1507c47ce6533f5b502d54fb7c",
            "ALGO_SESSION": "fc52472e0aa1906b0dbde6f4d075c103306c6f32-last-access=2019-10-29T14%3A06%3A14.696Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "queryParameters": {}
        },
        "response": {
          "statusCode": 200,
          "headers": {
            "content-encoding": "gzip",
            "content-type": "application/json; charset=utf-8",
            "date": "Tue, 29 Oct 2019 14:06:14 GMT",
            "strict-transport-security": "max-age=86400; includeSubDomains",
            "vary": "Accept-Encoding",
            "x-content-type-options": "nosniff",
            "x-frame-options": "DENY",
            "content-length": "227",
            "connection": "keep-alive"
          },
          "body": {
            "results": [
              {
                "id": "java",
                "name": "Java",
                "is_deprecated": false,
                "is_experimental": false,
                "language_type": "langpack",
                "resource_type": "language"
              },
              {
                "id": "javascript",
                "name": "Javascript",
                "is_deprecated": false,
                "is_experimental": false,
                "language_type": "langpack",
                "resource_type": "language"
              },
              {
                "id": "python2-image",
                "name": "Python 2.x - Beta",
                "is_deprecated": false,
                "is_experimental": false,
                "language_type": "image",
                "resource_type": "language"
              },
              {
                "id": "python2-langpack",
                "name": "Python 2.x",
                "is_deprecated": false,
                "is_experimental": false,
                "language_type": "langpack",
                "resource_type": "language"
              },
              {
                "id": "python3-image",
                "name": "Python 3.x - Beta",
                "is_deprecated": false,
                "is_experimental": false,
                "language_type": "image",
                "resource_type": "language"
              },
              {
                "id": "python3-1",
                "name": "Python 3.x",
                "is_deprecated": false,
                "is_experimental": false,
                "language_type": "langpack",
                "resource_type": "language"
              },
              {
                "id": "r",
                "name": "R",
                "is_deprecated": false,
                "is_experimental": false,
                "language_type": "langpack",
                "resource_type": "language"
              },
              {
                "id": "ruby",
                "name": "Ruby",
                "is_deprecated": false,
                "is_experimental": false,
                "language_type": "langpack",
                "resource_type": "language"
              },
              {
                "id": "rust",
                "name": "Rust",
                "is_deprecated": false,
                "is_experimental": false,
                "language_type": "langpack",
                "resource_type": "language"
              },
              {
                "id": "scala",
                "name": "Scala",
                "is_deprecated": false,
                "is_experimental": false,
                "language_type": "langpack",
                "resource_type": "language"
              }
            ]
          }
        }
      },
      {
        "request": {
          "url": "/v1/algorithms/acunniffe/example_test",
          "method": "GET",
          "headers": {
            "host": "algorithmia.com",
            "connection": "keep-alive",
            "pragma": "no-cache",
            "cache-control": "no-cache",
            "accept": "application/json, text/plain, */*",
            "dnt": "1",
            "x-xsrf-token": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "cors",
            "referer": "https://algorithmia.com/algorithms/acunniffe/example_test/settings",
            "accept-encoding": "gzip, deflate, br",
            "accept-language": "en-US,en;q=0.9",
            "cookie": "ajs_group_id=null; ajs_anonymous_id=%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22; _ga=GA1.2.1872580011.1571235636; _fbp=fb.1.1571235636317.604574724; intercom-id-c9fj6354=01941621-342b-4320-ad75-53826b5a002c; hubspotutk=105fad8a9b12bfed67330a0dbfe12c61; _gid=GA1.2.1843278152.1572282100; __zlcmid=uzie5dAUbB300Y; __hstc=69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3; __hssrc=1; fs_intercom=4655074328608768:4513847218700288; XSRF-TOKEN=0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da; referrer=www.google.com; landing_page=https://algorithmia.com/; signup_session=true; ajs_user_id=%22acunniffe%22; fs_uid=rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636; new-algo-language=scala; _gat=1; __hssc=69686351.5.1572357353053; intercom-session-c9fj6354=L08zdks3K1FOZEs0NngyR2NDQjBxN3VMb1J3dE1QZ0t4N2piYXY5ZmlNWFNVMkxseFhidkxhZ0g4QStWV2hYay0tUUtjQUtFaUZvLzJIZ0drSFdnRjM0UT09--fc3e700881b2cd1507c47ce6533f5b502d54fb7c; ALGO_SESSION=fc52472e0aa1906b0dbde6f4d075c103306c6f32-last-access=2019-10-29T14%3A06%3A14.696Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "cookies": {
            "ajs_group_id": "null",
            "ajs_anonymous_id": "%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22",
            "_ga": "GA1.2.1872580011.1571235636",
            "_fbp": "fb.1.1571235636317.604574724",
            "intercom-id-c9fj6354": "01941621-342b-4320-ad75-53826b5a002c",
            "hubspotutk": "105fad8a9b12bfed67330a0dbfe12c61",
            "_gid": "GA1.2.1843278152.1572282100",
            "__zlcmid": "uzie5dAUbB300Y",
            "__hstc": "69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3",
            "__hssrc": "1",
            "fs_intercom": "4655074328608768:4513847218700288",
            "XSRF-TOKEN": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "referrer": "www.google.com",
            "landing_page": "https://algorithmia.com/",
            "signup_session": "true",
            "ajs_user_id": "%22acunniffe%22",
            "fs_uid": "rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636",
            "new-algo-language": "scala",
            "_gat": "1",
            "__hssc": "69686351.5.1572357353053",
            "intercom-session-c9fj6354": "L08zdks3K1FOZEs0NngyR2NDQjBxN3VMb1J3dE1QZ0t4N2piYXY5ZmlNWFNVMkxseFhidkxhZ0g4QStWV2hYay0tUUtjQUtFaUZvLzJIZ0drSFdnRjM0UT09--fc3e700881b2cd1507c47ce6533f5b502d54fb7c",
            "ALGO_SESSION": "fc52472e0aa1906b0dbde6f4d075c103306c6f32-last-access=2019-10-29T14%3A06%3A14.696Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "queryParameters": {}
        },
        "response": {
          "statusCode": 200,
          "headers": {
            "content-encoding": "gzip",
            "content-type": "application/json; charset=utf-8",
            "date": "Tue, 29 Oct 2019 14:06:14 GMT",
            "set-cookie": "ALGO_SESSION=71c09162e47dd0ca8d81ea36aeda755fcf0acc4d-last-access=2019-10-29T14%3A06%3A14.843Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3; Max-Age=86400; Expires=Wed, 30 Oct 2019 14:06:14 GMT; Path=/; Domain=algorithmia.com; Secure; HTTPOnly",
            "strict-transport-security": "max-age=86400; includeSubDomains",
            "vary": "Accept-Encoding",
            "x-content-type-options": "nosniff",
            "x-frame-options": "DENY",
            "content-length": "188",
            "connection": "keep-alive"
          },
          "body": {
            "name": "example_test",
            "details": {
              "label": "example_test",
              "tagline": ""
            },
            "settings": {
              "algorithm_callability": "private",
              "source_visibility": "closed",
              "language": "scala",
              "environment": "cpu",
              "license": "apl",
              "network_access": "full",
              "pipeline_enabled": true
            },
            "resource_type": "algorithm"
          }
        }
      },
      {
        "request": {
          "url": "/vote/algo-533a1908-4277-4d30-bd0b-07bf2cd88517",
          "method": "PUT",
          "headers": {
            "host": "algorithmia.com",
            "connection": "keep-alive",
            "content-length": "4",
            "pragma": "no-cache",
            "cache-control": "no-cache",
            "accept": "application/json, text/plain, */*",
            "origin": "https://algorithmia.com",
            "x-xsrf-token": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36",
            "dnt": "1",
            "content-type": "application/json",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "cors",
            "referer": "https://algorithmia.com/algorithms/acunniffe/example_test/settings",
            "accept-encoding": "gzip, deflate, br",
            "accept-language": "en-US,en;q=0.9",
            "cookie": "ajs_group_id=null; ajs_anonymous_id=%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22; _ga=GA1.2.1872580011.1571235636; _fbp=fb.1.1571235636317.604574724; intercom-id-c9fj6354=01941621-342b-4320-ad75-53826b5a002c; hubspotutk=105fad8a9b12bfed67330a0dbfe12c61; _gid=GA1.2.1843278152.1572282100; __zlcmid=uzie5dAUbB300Y; __hstc=69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3; __hssrc=1; fs_intercom=4655074328608768:4513847218700288; XSRF-TOKEN=0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da; referrer=www.google.com; landing_page=https://algorithmia.com/; signup_session=true; ajs_user_id=%22acunniffe%22; fs_uid=rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636; new-algo-language=scala; _gat=1; __hssc=69686351.5.1572357353053; intercom-session-c9fj6354=L08zdks3K1FOZEs0NngyR2NDQjBxN3VMb1J3dE1QZ0t4N2piYXY5ZmlNWFNVMkxseFhidkxhZ0g4QStWV2hYay0tUUtjQUtFaUZvLzJIZ0drSFdnRjM0UT09--fc3e700881b2cd1507c47ce6533f5b502d54fb7c; ALGO_SESSION=71c09162e47dd0ca8d81ea36aeda755fcf0acc4d-last-access=2019-10-29T14%3A06%3A14.843Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "cookies": {
            "ajs_group_id": "null",
            "ajs_anonymous_id": "%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22",
            "_ga": "GA1.2.1872580011.1571235636",
            "_fbp": "fb.1.1571235636317.604574724",
            "intercom-id-c9fj6354": "01941621-342b-4320-ad75-53826b5a002c",
            "hubspotutk": "105fad8a9b12bfed67330a0dbfe12c61",
            "_gid": "GA1.2.1843278152.1572282100",
            "__zlcmid": "uzie5dAUbB300Y",
            "__hstc": "69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3",
            "__hssrc": "1",
            "fs_intercom": "4655074328608768:4513847218700288",
            "XSRF-TOKEN": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "referrer": "www.google.com",
            "landing_page": "https://algorithmia.com/",
            "signup_session": "true",
            "ajs_user_id": "%22acunniffe%22",
            "fs_uid": "rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636",
            "new-algo-language": "scala",
            "_gat": "1",
            "__hssc": "69686351.5.1572357353053",
            "intercom-session-c9fj6354": "L08zdks3K1FOZEs0NngyR2NDQjBxN3VMb1J3dE1QZ0t4N2piYXY5ZmlNWFNVMkxseFhidkxhZ0g4QStWV2hYay0tUUtjQUtFaUZvLzJIZ0drSFdnRjM0UT09--fc3e700881b2cd1507c47ce6533f5b502d54fb7c",
            "ALGO_SESSION": "71c09162e47dd0ca8d81ea36aeda755fcf0acc4d-last-access=2019-10-29T14%3A06%3A14.843Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "queryParameters": {},
          "body": true
        },
        "response": {
          "statusCode": 200,
          "headers": {
            "content-encoding": "gzip",
            "content-type": "application/json; charset=utf-8",
            "date": "Tue, 29 Oct 2019 14:06:18 GMT",
            "set-cookie": "ALGO_SESSION=cdd3365c9b25dde3c674dfce1b3adecb53de5730-last-access=2019-10-29T14%3A06%3A18.220Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3; Max-Age=86400; Expires=Wed, 30 Oct 2019 14:06:18 GMT; Path=/; Domain=algorithmia.com; Secure; HTTPOnly",
            "strict-transport-security": "max-age=86400; includeSubDomains",
            "vary": "Accept-Encoding",
            "x-content-type-options": "nosniff",
            "x-frame-options": "DENY",
            "content-length": "35",
            "connection": "keep-alive"
          },
          "body": {
            "result": true
          }
        }
      },
      {
        "request": {
          "url": "/webapi/algorithms/acunniffe/example_test/follow",
          "method": "DELETE",
          "headers": {
            "host": "algorithmia.com",
            "connection": "keep-alive",
            "pragma": "no-cache",
            "cache-control": "no-cache",
            "accept": "application/json, text/plain, */*",
            "origin": "https://algorithmia.com",
            "x-xsrf-token": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36",
            "dnt": "1",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "cors",
            "referer": "https://algorithmia.com/algorithms/acunniffe/example_test/settings",
            "accept-encoding": "gzip, deflate, br",
            "accept-language": "en-US,en;q=0.9",
            "cookie": "ajs_group_id=null; ajs_anonymous_id=%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22; _ga=GA1.2.1872580011.1571235636; _fbp=fb.1.1571235636317.604574724; intercom-id-c9fj6354=01941621-342b-4320-ad75-53826b5a002c; hubspotutk=105fad8a9b12bfed67330a0dbfe12c61; _gid=GA1.2.1843278152.1572282100; __zlcmid=uzie5dAUbB300Y; __hstc=69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3; __hssrc=1; fs_intercom=4655074328608768:4513847218700288; XSRF-TOKEN=0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da; referrer=www.google.com; landing_page=https://algorithmia.com/; signup_session=true; ajs_user_id=%22acunniffe%22; fs_uid=rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636; new-algo-language=scala; _gat=1; __hssc=69686351.5.1572357353053; intercom-session-c9fj6354=L08zdks3K1FOZEs0NngyR2NDQjBxN3VMb1J3dE1QZ0t4N2piYXY5ZmlNWFNVMkxseFhidkxhZ0g4QStWV2hYay0tUUtjQUtFaUZvLzJIZ0drSFdnRjM0UT09--fc3e700881b2cd1507c47ce6533f5b502d54fb7c; ALGO_SESSION=cdd3365c9b25dde3c674dfce1b3adecb53de5730-last-access=2019-10-29T14%3A06%3A18.220Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "cookies": {
            "ajs_group_id": "null",
            "ajs_anonymous_id": "%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22",
            "_ga": "GA1.2.1872580011.1571235636",
            "_fbp": "fb.1.1571235636317.604574724",
            "intercom-id-c9fj6354": "01941621-342b-4320-ad75-53826b5a002c",
            "hubspotutk": "105fad8a9b12bfed67330a0dbfe12c61",
            "_gid": "GA1.2.1843278152.1572282100",
            "__zlcmid": "uzie5dAUbB300Y",
            "__hstc": "69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3",
            "__hssrc": "1",
            "fs_intercom": "4655074328608768:4513847218700288",
            "XSRF-TOKEN": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "referrer": "www.google.com",
            "landing_page": "https://algorithmia.com/",
            "signup_session": "true",
            "ajs_user_id": "%22acunniffe%22",
            "fs_uid": "rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636",
            "new-algo-language": "scala",
            "_gat": "1",
            "__hssc": "69686351.5.1572357353053",
            "intercom-session-c9fj6354": "L08zdks3K1FOZEs0NngyR2NDQjBxN3VMb1J3dE1QZ0t4N2piYXY5ZmlNWFNVMkxseFhidkxhZ0g4QStWV2hYay0tUUtjQUtFaUZvLzJIZ0drSFdnRjM0UT09--fc3e700881b2cd1507c47ce6533f5b502d54fb7c",
            "ALGO_SESSION": "cdd3365c9b25dde3c674dfce1b3adecb53de5730-last-access=2019-10-29T14%3A06%3A18.220Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "queryParameters": {}
        },
        "response": {
          "statusCode": 200,
          "headers": {
            "content-encoding": "gzip",
            "content-type": "application/json; charset=utf-8",
            "date": "Tue, 29 Oct 2019 14:06:20 GMT",
            "set-cookie": "ALGO_SESSION=efffc56c8fafabe19b8613ec9ce64655f4fa467a-last-access=2019-10-29T14%3A06%3A20.864Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3; Max-Age=86400; Expires=Wed, 30 Oct 2019 14:06:20 GMT; Path=/; Domain=algorithmia.com; Secure; HTTPOnly",
            "strict-transport-security": "max-age=86400; includeSubDomains",
            "vary": "Accept-Encoding",
            "x-content-type-options": "nosniff",
            "x-frame-options": "DENY",
            "content-length": "54",
            "connection": "keep-alive"
          },
          "body": {
            "result": "unfollowing algorithm"
          }
        }
      },
      {
        "request": {
          "url": "/webapi/algorithms/search",
          "method": "GET",
          "headers": {
            "host": "algorithmia.com",
            "connection": "keep-alive",
            "pragma": "no-cache",
            "cache-control": "no-cache",
            "accept": "application/json, text/plain, */*",
            "dnt": "1",
            "x-xsrf-token": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "cors",
            "referer": "https://algorithmia.com/search",
            "accept-encoding": "gzip, deflate, br",
            "accept-language": "en-US,en;q=0.9",
            "cookie": "ajs_group_id=null; ajs_anonymous_id=%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22; _ga=GA1.2.1872580011.1571235636; _fbp=fb.1.1571235636317.604574724; intercom-id-c9fj6354=01941621-342b-4320-ad75-53826b5a002c; hubspotutk=105fad8a9b12bfed67330a0dbfe12c61; _gid=GA1.2.1843278152.1572282100; __zlcmid=uzie5dAUbB300Y; __hstc=69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3; __hssrc=1; fs_intercom=4655074328608768:4513847218700288; XSRF-TOKEN=0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da; referrer=www.google.com; landing_page=https://algorithmia.com/; signup_session=true; ajs_user_id=%22acunniffe%22; fs_uid=rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636; new-algo-language=scala; _gat=1; __hssc=69686351.5.1572357353053; intercom-session-c9fj6354=L08zdks3K1FOZEs0NngyR2NDQjBxN3VMb1J3dE1QZ0t4N2piYXY5ZmlNWFNVMkxseFhidkxhZ0g4QStWV2hYay0tUUtjQUtFaUZvLzJIZ0drSFdnRjM0UT09--fc3e700881b2cd1507c47ce6533f5b502d54fb7c; ALGO_SESSION=efffc56c8fafabe19b8613ec9ce64655f4fa467a-last-access=2019-10-29T14%3A06%3A20.864Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "cookies": {
            "ajs_group_id": "null",
            "ajs_anonymous_id": "%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22",
            "_ga": "GA1.2.1872580011.1571235636",
            "_fbp": "fb.1.1571235636317.604574724",
            "intercom-id-c9fj6354": "01941621-342b-4320-ad75-53826b5a002c",
            "hubspotutk": "105fad8a9b12bfed67330a0dbfe12c61",
            "_gid": "GA1.2.1843278152.1572282100",
            "__zlcmid": "uzie5dAUbB300Y",
            "__hstc": "69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3",
            "__hssrc": "1",
            "fs_intercom": "4655074328608768:4513847218700288",
            "XSRF-TOKEN": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "referrer": "www.google.com",
            "landing_page": "https://algorithmia.com/",
            "signup_session": "true",
            "ajs_user_id": "%22acunniffe%22",
            "fs_uid": "rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636",
            "new-algo-language": "scala",
            "_gat": "1",
            "__hssc": "69686351.5.1572357353053",
            "intercom-session-c9fj6354": "L08zdks3K1FOZEs0NngyR2NDQjBxN3VMb1J3dE1QZ0t4N2piYXY5ZmlNWFNVMkxseFhidkxhZ0g4QStWV2hYay0tUUtjQUtFaUZvLzJIZ0drSFdnRjM0UT09--fc3e700881b2cd1507c47ce6533f5b502d54fb7c",
            "ALGO_SESSION": "efffc56c8fafabe19b8613ec9ce64655f4fa467a-last-access=2019-10-29T14%3A06%3A20.864Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "queryParameters": {
            "q": "undefined"
          }
        },
        "response": {
          "statusCode": 200,
          "headers": {
            "content-encoding": "gzip",
            "content-type": "application/json; charset=utf-8",
            "date": "Tue, 29 Oct 2019 14:06:23 GMT",
            "set-cookie": "ALGO_SESSION=a30111e245168ae3f99b717754696d87884b5c2a-last-access=2019-10-29T14%3A06%3A23.049Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3; Max-Age=86400; Expires=Wed, 30 Oct 2019 14:06:23 GMT; Path=/; Domain=algorithmia.com; Secure; HTTPOnly",
            "strict-transport-security": "max-age=86400; includeSubDomains",
            "vary": "Accept-Encoding",
            "x-content-type-options": "nosniff",
            "x-frame-options": "DENY",
            "content-length": "17726",
            "connection": "keep-alive"
          },
          "body": {
            "results": [
              {
                "algo_id": 3482,
                "object_id": "ddf69570-a679-11e4-840d-12f53eafe9d2",
                "username": "nlp",
                "algoname": "ProfanityDetection",
                "algolabel": "Profanity Detection",
                "language": "java3",
                "tag_line": "Detect profanity in text automatically",
                "card_line": "Detect profanity in text automatically",
                "summary": "<h1>Profanity Detection</h1><p>This algorithm implements a profanity detector based on string comparisons.The default usage just checks the input string to see if any of its substrings match a list of known obscenities and profanities, and returns a Map with identified profanities as keys and the number of times that profanity appeared as value. Our default dictionary of profanity includes about 340 words drawn from <a href=\"http://www.noswearing.com\">noswearing.com</a> on 01/28/2015.</p><p><strong>Note</strong>: that for compound profanities this may over count. This is not as straight forward to use as a boolean return value, but provides additional information that might be useful - for instance, a single use of the word &#34;damn&#34;, or references to genitalia in a medical context, may not be considered objectionable, whereas stronger profanity or large volumes of profanity might be. For the maximum strictness, just check for an empty Map.</p><p><strong>Note</strong>: that this is word-based only. It may miss some words, miss certain misspellings, or double entendres and other material that is offensive in context.</p><p><strong>Note</strong>: Profanity Detection has now been upgraded to batch &amp; json formatting with version <code>1.0.0</code></p><h1>Table of Contents</h1><ul><li><a href=\"#input\">Input</a></li><li><a href=\"#output\">Output</a></li><li><a href=\"#console\">Algorithm Console</a></li></ul><p><a id=\"input\"></a></p><h1>Input</h1><pre><code>{&#10;  data: String[],&#10;  additionalWorkds: String[]&#10;  customizedExclusive: Boolean&#10;}&#10;</code></pre><pre><code>{  &#10;   &#34;documents&#34;:[  &#10;      &#34;He is acting like a damn jackass, and as far as I'm concerned he can frack off.&#34;,&#10;      &#34;It really depends on what kind of type safety you need.&#34;,&#10;      &#34;I am following a tutorial on asp.net web api and mongodb here and on step 4 it talks about dependency injection and adding it to the start.cs in the ConfigureServices() method, however this doesnt seem to exist anymore. My web api templates startup.cs looks something like this...&#34;&#10;   ],&#10;   &#34;extraWords&#34;:[  &#10;      &#34;frack&#34;,&#10;      &#34;damn&#34;,&#10;      &#34;api&#34;&#10;   ],&#10;   &#34;customizedExclusive&#34;:false&#10;}&#10;</code></pre><ul><li>documents -  <strong><em>(required)</em></strong>  - Can be an array of strings of any length.</li><li>additionalWords - <strong><em>(optional)</em></strong> - Any additional words you want to detect can be input here.</li><li>extraWords - <strong><em>(switch)</em></strong> - If true, the input data is checked against <em>only</em> the words defined by extraWords, if false the input is checked against the default database <em>and</em> the words defined by extraWords. <em>defaults to false</em>.</li></ul><p><a id=\"output\"></a></p><h1>Output</h1><pre><code>Sentences[word_counts]&#10;</code></pre><pre><code>{  &#10;   &#34;I am following a tutorial on asp.net web api and mongodb here and on step 4 it talks about dependency injection and adding it to the start.cs in the ConfigureServices() method, however this doesnt seem to exist anymore. My web api templates startup.cs looks something like this...&#34;:{  &#10;      &#34;api&#34;:2&#10;   },&#10;   &#34;It really depends on what kind of type safety you need.&#34;:{  &#10;&#10;   },&#10;   &#34;He is acting like a damn jackass, and as far as I'm concerned he can frack off.&#34;:{  &#10;      &#34;damn&#34;:1,&#10;      &#34;jackass&#34;:1,&#10;      &#34;frack&#34;:1&#10;   }&#10;}&#10;</code></pre><ul><li>sentences - the sentence label for each word_counts object.</li><li>word_counts - a json object containing the detected words and the number of times detected.</li></ul><p><a id=\"console\"></a></p>",
                "submitted_at": 1448999618000,
                "discoverable_world": true,
                "source_world": true,
                "is_suppressed": false,
                "license": "apl",
                "total_calls": 3047118,
                "tags": [
                  "nlp",
                  "profanity detection",
                  "text analysis"
                ],
                "runner_id": 5
              },
              {
                "algo_id": 43955,
                "object_id": "algo-293072b6-3026-497c-b623-97566b304581",
                "username": "wilsonmar",
                "algoname": "RGB2ColorName",
                "algolabel": "RGB 2 Color Name",
                "language": "python2-langpack",
                "tag_line": "Get the name of the color closest to the three numbers specifying a color (RGB)",
                "card_line": "Get the name of the color closest to the three numbers specifying a color (RGB)",
                "summary": "<span>This API makes it easier for artists to identify color names to use English words to describe colors. </span><br/><p style=\"color: rgb(85, 85, 85);background-color: rgb(255, 255, 255);\"><span>Colors are defined by 3 integers for RGB (Red Green Blue). </span><span>The program returns black if any number is larger than the 255 maximum value for each color. The 255x255x255 = 16,581,375 possible individual color values.</span><br/></p><p style=\"color: rgb(85, 85, 85);background-color: rgb(255, 255, 255);\"><span>Currently, this API knows about </span><b>2,790</b><span> unique color names widely defined publicly. </span></p><p style=\"color: rgb(85, 85, 85);background-color: rgb(255, 255, 255);\"><span>The three dimensions involved in specifying a color makes it difficult to <b style=\"color: rgb(85, 85, 85);background-color: rgb(255, 255, 255);\"><b>manually</b></b> identify the closest point with a color name.<br/></span></p><p style=\"color: rgb(85, 85, 85);background-color: rgb(255, 255, 255);\">The bulk of the work on this API was in compiling the color names and their RGB coordinates. There were many duplicates in both names and color coordinates.</p><h1><span style=\"color: inherit;\"><b>Inputs and Outputs:</b></span><br/></h1><p><span>The colors of a few famous social media and tech companies are known by this API, thanks to https://www.materialui.co/socialcolors. Additional companies have been added into this API, such as Google, Amazon, and IBM.</span><br/></p><p><span></span></p><p></p><h3><b></b><b><b></b><b><b>Example 1: IBM Blue and Hex equivalent</b></b></b><br/></h3><p></p><p>Organizations need to precisely specify the colors in their logo so that vendors accurately render it online, in packaging, etc.. </p><p>In <span><a href=\"https://www-03.ibm.com/press/us/en/photo/20190.wss\" target=\"_blank\">https://www-03.ibm.com/press/us/en/photo/20190.wss</a> IBM defines the color of its trademark Blue color as &#34;PMS 2718C; Process equivalent: Cyan 75%, Magenta 43%, Yellow 0%, Black 0%; <b>RGB equivalent: Red 90, Green 135, Blue 197</b>; Broadcast equivalent: Red 22%, Green 42%, Blue 70%.: Let's see if this API recognizes it:</span></p><p><span></span></p><p></p><pre style=\"color: rgb(85, 85, 85);background-color: rgb(245, 245, 245);\"><b><b><b>[90,135,197]</b></b></b></pre><p style=\"color: rgb(85, 85, 85);background-color: rgb(255, 255, 255);\">The output:</p><pre><code class=\"hljs json\">{&#10;  <span class=\"hljs-attr\">&#34;ColorName&#34;</span>: <span class=\"hljs-string\">&#34;IBM Blue&#34;</span>,&#10;  <span class=\"hljs-attr\">&#34;ColorRGB&#34;</span>: <span class=\"hljs-string\">[90,135,197]</span>,&#10;  <span class=\"hljs-attr\">&#34;ColorHex&#34;</span>: <span class=\"hljs-string\">&#34;#5A87C5&#34;</span>,&#10;  <span class=\"hljs-attr\">&#34;ColorDiff&#34;</span>: <span class=\"hljs-string\">&#34;(+0,+0,+0)&#34;</span>&#10;}</code></pre><p></p><p></p><p style=\"color: rgb(85, 85, 85);background-color: rgb(255, 255, 255);\">&#34;#5A87C5&#34; is the <b>hex equivalent </b>of the RGB color found.<br/></p><p style=\"color: rgb(85, 85, 85);background-color: rgb(255, 255, 255);\">&#34;(+0,+0,+0)&#34; means that the color found is a direct hit of the color input.<br/></p><p style=\"color: rgb(85, 85, 85);background-color: rgb(255, 255, 255);\"><b><b></b></b></p><h3 style=\"color: rgb(85, 85, 85);background-color: rgb(255, 255, 255);\"><b>Example 2: Pantone<br/></b></h3><p><b></b></p><p style=\"color: rgb(85, 85, 85);background-color: rgb(255, 255, 255);\">So for many years, designers make use of the Pantone palette of <span>1,340 colors, which are</span><span> proprietary because of the work that went into figuring out what mix of pigments of paints and dyes are needed to duplicate it accurately. </span></p><p style=\"color: rgb(85, 85, 85);background-color: rgb(255, 255, 255);\"><span>Pantone's &#34;PMS&#34; colors are from http://us.labelpartners.com/pantone_coated_table.html.<br/></span></p><p style=\"color: rgb(85, 85, 85);background-color: rgb(255, 255, 255);\"><span>For a fee, Pantone offers tools pros use to specify and measure a wide number of colors, such as</span><span> </span><a target=\"_blank\" href=\"https://www.visualnews.com/2016/06/15/worlds-ugliest-color)\">&#34;the world's ugliest color&#34;</a><span> </span><span>Pantone 448 C at [&#34;74&#34;,&#34;65&#34;,42&#34;], which governments use to discourage smoking. </span></p><h3><span>Example 3: X11, SVG, CSS</span></h3><p style=\"color: rgb(85, 85, 85);background-color: rgb(255, 255, 255);\"><span>The X11 and SVG standards were created to name colors that can best be displayed by display monitor hardware with minimal processing (at a time when displays had a smaller gamut than today). </span></p><p><span>A sample input is:</span></p><p></p><pre style=\"color: rgb(85, 85, 85);background-color: rgb(245, 245, 245);\"><b><b>[221,18,137] </b></b></pre><p style=\"color: rgb(85, 85, 85);background-color: rgb(255, 255, 255);\">It is closest to the color named &#34;burlywood&#34;, a brownish color defined by the X11 standard as &#34;#DEB887&#34; is the hex value used in CSS for display on <b>computer monitors</b>. Such colors may not be available in physical paint from a hardware store.</p><p>The &#34;(-3,+6,-5)&#34; means the color name is 3 less on the Red scale, 6 more in the Green scale, and 5 less on the Blue scale.</p><pre><code class=\"hljs json\">{&#10;  <span class=\"hljs-attr\">&#34;ColorName&#34;</span>: <span class=\"hljs-string\">&#34;Pantone 219 C&#34;</span>,&#10;  <span class=\"hljs-attr\">&#34;ColorRGB&#34;</span>: <span class=\"hljs-string\">[218,24,132]</span>,&#10;  <span class=\"hljs-attr\">&#34;ColorHex&#34;</span>: <span class=\"hljs-string\">&#34;#DA1884&#34;</span>,&#10;  <span class=\"hljs-attr\">&#34;ColorDiff&#34;</span>: <span class=\"hljs-string\">&#34;(-3,+6,-5)&#34;</span>&#10;}</code></pre><p><span></span></p><br/><p></p><p><img src=\"https://cloud.githubusercontent.com/assets/300046/18149649/a88d4c6e-6f9e-11e6-9797-78618ae963f5.jpg\" style=\"color: inherit;\"/><br/></p><h3><span style=\"color: inherit;\">Credits:</span><br/></h3><p>The bulk of the work on this is to reconcile duplicate colors and color names from a variety of sources. </p><ul><li><span>19 &#34;Metro&#34; colors are defined by Microsoft for Windows 8 from https://www.materialui.co/metrocolors</span><br/></li><li>18 Material Flat colors from <a target=\"_blank\" href=\"https://www.materialui.co/flatuicolors\" style=\"color: rgb(153, 99, 255);text-align: left;background-color: rgb(255, 255, 255);\">https://www.materialui.co/flatuicolors</a></li><li> 29 Company colors from https://www.materialui.co/socialcolors</li><li>Crayola colors</li><li>US Federal Standard 595 from http://www.fed-std-595.com/FS-595-Paint-Spec.html</li></ul><p><span>Thanks to Ayush Pareek for his Python numpy genius.</span></p><ul><li><p style=\"color: rgb(85, 85, 85);background-color: rgb(255, 255, 255);\"><span>This capability is also needed for a finger camera (IoT device) which speaks the color name.</span></p></li></ul><span></span>",
                "discoverable_world": true,
                "source_world": false,
                "is_suppressed": false,
                "license": "apl",
                "total_calls": 282475,
                "tags": [
                  "accessibility",
                  "color",
                  "color palette",
                  "data transformation",
                  "mapping",
                  "python"
                ],
                "runner_id": 5
              },
              {
                "algo_id": 70812,
                "object_id": "algo-9f255309-6fbb-4eff-9862-8372af7a826a",
                "username": "deeplearning",
                "algoname": "ObjectDetectionCOCO",
                "algolabel": "ObjectDetection - COCO",
                "language": "python3-1",
                "tag_line": "Detecting Objects in complex scenes",
                "card_line": "Detecting Objects in complex scenes",
                "summary": "<h1>Object Detection - COCO</h1>\n<p><img src=\"http://i.imgur.com/Yv8JblW.png\"></img></p>\n<p>This algorithm is able to discover not only what's in an image, but where it is too! It discovers the location within an image and generates a <a href=\"https://en.wikipedia.org/wiki/Minimum_bounding_box\">bounding box annotation</a>. This algorithm uses the latest pre-trained models from Google's <a href=\"https://www.tensorflow.org/\">Tensorflow</a> <a href=\"https://github.com/tensorflow/models/tree/master/object_detection\">object detection</a> project. All available models were all trained on the <a href=\"http://cocodataset.org/\">Common Objects in Context</a> Dataset.</p>\n<p>A list of all available labels is below.</p>\n<h2>Table of Contents</h2>\n<ul>\n<li><a href=\"#io\">I/O</a></li>\n<li><a href=\"#labels\">labels</a></li>\n<li><a href=\"#examples\">Examples</a></li>\n<li><a href=\"#credits\">credits</a></li>\n<li><a href=\"#console\">Algorithm Console</a></li>\n</ul>\n<p><a id=\"io\"></a></p>\n<h2>I/O</h2>\n<h3>Input</h3>\n<pre><code>{  \n   &quot;image&quot;: String,\n   &quot;output&quot;: String,\n   &quot;max_boxes&quot;: Integer,\n   &quot;min_score&quot;: Float,\n   &quot;model&quot;: String\n}\n</code></pre>\n<ul>\n<li>image - <strong><em>(required)</em></strong> - a hosted image file, may be a web url (<code>http</code>, <code>https</code>) or a data connector URI (<code>data://</code>, <code>s3://</code>, etc).</li>\n<li>output - <strong><em>(optional)</em></strong> - the output data connector URI (<code>data://</code>, <code>s3://</code>, etc) for the resultant annotated image. <em>If output is not provided, only the bounding box data is returned.</em></li>\n<li>max_boxes - <strong><em>(optional)</em></strong> - the maximum number of bounding boxes to return in the results. <em>If max_boxes is not defined, it defaults to 20</em></li>\n<li>min_score - <strong><em>(optional)</em></strong> - the minimum score threshold for bounding box annotations, if a prediction's confidence is less than this minimum, it's not returned in the results. _If min_score is not defined, it defaults to 0.5</li>\n<li>models - <strong><em>(optional)</em></strong> - the pre-trained object detection model to use, may be any of the following:</li>\n</ul>\n<table>\n<thead>\n<tr><th>Model name</th><th align=\"center\">compute time per image</th><th align=\"center\">COCO accuracy (mAP)</th></tr>\n</thead>\n<tbody>\n<tr><td>ssd_mobilenet_v1</td><td align=\"center\">4.78</td><td align=\"center\">21</td></tr>\n<tr><td>ssd_inception_v2</td><td align=\"center\">8.75</td><td align=\"center\">24</td></tr>\n<tr><td>rfcn_resnet101</td><td align=\"center\">10.25</td><td align=\"center\">30</td></tr>\n<tr><td>faster_rcnn_resnet101</td><td align=\"center\">11.05</td><td align=\"center\">32</td></tr>\n<tr><td>faster_rcnn_inception_resnet_v2_atrous</td><td align=\"center\">16.78</td><td align=\"center\">37</td></tr>\n</tbody>\n</table>\n<p><em>when model is not defined, defaults to <code>ssd_mobilenet_v1</code></em></p>\n<p><strong>Alternatively you can just pass a url directly to the algorithm as a string.</strong></p>\n<h3>Output</h3>\n<pre><code>{\n    &quot;image&quot;: String,\n    &quot;boxes&quot;: [\n        {\n            &quot;coordinates&quot;: {\n                &quot;x0&quot;: Float,\n                &quot;y0&quot;: Float,\n                &quot;x1&quot;: Float,\n                &quot;y1&quot;: Float\n            },\n            &quot;label&quot;: String,\n            &quot;confidence&quot;: Float\n        },\n    ...\n    ]\n}\n</code></pre>\n<ul>\n<li>image - The bounding box annotated image (if <code>output</code> was defined) data connector URI.</li>\n<li>boxes - a list of all detected objects and their bounding boxes.</li>\n<li>coordinates - the <code>absolute</code> cartesian coordinates of the bounding box found in the specimen image.</li>\n<li>label - the predicted label/class for the detected object</li>\n<li>confidence - the confidence of the class prediction (0 -&gt; 1)</li>\n</ul>\n<p><a id=\"examples\"></a></p>\n<h2>Examples</h2>\n<h3>Example 1 - Street car</h3>\n<p><strong>Input</strong></p>\n<p><img src=\"http://i.imgur.com/k67kjlB.jpg\" height=400></img></p>\n<pre><code>{  \n   &quot;image&quot;:&quot;http://i.imgur.com/k67kjlB.jpg&quot;,\n   &quot;output&quot;:&quot;data://.algo/temp/streetcar.png&quot;,\n   &quot;model&quot;:&quot;ssd_inception_v2&quot;\n}\n</code></pre>\n<p><strong>Output</strong></p>\n<p><img src=\"http://i.imgur.com/9OS5bRu.png\" height=400></img></p>\n<pre><code>{  \n   &quot;boxes&quot;:[  \n      {  \n         &quot;confidence&quot;:0.9845596551895142,\n         &quot;coordinates&quot;:{  \n            &quot;x0&quot;:276,\n            &quot;x1&quot;:490,\n            &quot;y0&quot;:170,\n            &quot;y1&quot;:386\n         },\n         &quot;label&quot;:&quot;train&quot;\n      },\n      {  \n         &quot;confidence&quot;:0.8447293043136597,\n         &quot;coordinates&quot;:{  \n            &quot;x0&quot;:36,\n            &quot;x1&quot;:132,\n            &quot;y0&quot;:280,\n            &quot;y1&quot;:314\n         },\n         &quot;label&quot;:&quot;car&quot;\n      },\n      {  \n         &quot;confidence&quot;:0.7735579609870911,\n         &quot;coordinates&quot;:{  \n            &quot;x0&quot;:520,\n            &quot;x1&quot;:555,\n            &quot;y0&quot;:273,\n            &quot;y1&quot;:305\n         },\n         &quot;label&quot;:&quot;car&quot;\n      }\n   ],\n   &quot;image&quot;:&quot;data://.algo/temp/streetcar.png&quot;\n}\n</code></pre>\n<h3>Example 2 - Dog Park</h3>\n<p><strong>Input</strong></p>\n<p><img src=\"http://i.imgur.com/1IWZX69.jpg\" height=400></img></p>\n<pre><code>{  \n   &quot;image&quot;:&quot;http://i.imgur.com/1IWZX69.jpg&quot;,\n   &quot;output&quot;:&quot;data://.algo/temp/dog_park.png&quot;,\n   &quot;min_score&quot;:0.7,\n   &quot;model&quot;:&quot;faster_rcnn_resnet101&quot;\n}\n</code></pre>\n<p><strong>Output</strong></p>\n<p><img src=\"http://i.imgur.com/8vThmwH.jpg\" height=400></img></p>\n<pre><code>{  \n   &quot;boxes&quot;:[  \n      {  \n         &quot;confidence&quot;:0.9997156262397766,\n         &quot;coordinates&quot;:{  \n            &quot;x0&quot;:1484,\n            &quot;x1&quot;:1675,\n            &quot;y0&quot;:221,\n            &quot;y1&quot;:655\n         },\n         &quot;label&quot;:&quot;person&quot;\n      },\n      {  \n         &quot;confidence&quot;:0.999693751335144,\n         &quot;coordinates&quot;:{  \n            &quot;x0&quot;:1456,\n            &quot;x1&quot;:1752,\n            &quot;y0&quot;:651,\n            &quot;y1&quot;:922\n         },\n         &quot;label&quot;:&quot;dog&quot;\n      },\n      {  \n         &quot;confidence&quot;:0.9996084570884703,\n         &quot;coordinates&quot;:{  \n            &quot;x0&quot;:478,\n            &quot;x1&quot;:634,\n            &quot;y0&quot;:895,\n            &quot;y1&quot;:1041\n         },\n         &quot;label&quot;:&quot;dog&quot;\n      },\n      {  \n         &quot;confidence&quot;:0.9993320107460022,\n         &quot;coordinates&quot;:{  \n            &quot;x0&quot;:308,\n            &quot;x1&quot;:508,\n            &quot;y0&quot;:721,\n            &quot;y1&quot;:954\n         },\n         &quot;label&quot;:&quot;dog&quot;\n      },\n      {  \n         &quot;confidence&quot;:0.9990590214729308,\n         &quot;coordinates&quot;:{  \n            &quot;x0&quot;:105,\n            &quot;x1&quot;:264,\n            &quot;y0&quot;:449,\n            &quot;y1&quot;:988\n         },\n         &quot;label&quot;:&quot;person&quot;\n      },\n      {  \n         &quot;confidence&quot;:0.9984574317932128,\n         &quot;coordinates&quot;:{  \n            &quot;x0&quot;:775,\n            &quot;x1&quot;:1122,\n            &quot;y0&quot;:735,\n            &quot;y1&quot;:1103\n         },\n         &quot;label&quot;:&quot;dog&quot;\n      },\n      {  \n         &quot;confidence&quot;:0.9961158037185668,\n         &quot;coordinates&quot;:{  \n            &quot;x0&quot;:644,\n            &quot;x1&quot;:793,\n            &quot;y0&quot;:529,\n            &quot;y1&quot;:781\n         },\n         &quot;label&quot;:&quot;person&quot;\n      },\n      {  \n         &quot;confidence&quot;:0.9699774980545044,\n         &quot;coordinates&quot;:{  \n            &quot;x0&quot;:782,\n            &quot;x1&quot;:833,\n            &quot;y0&quot;:518,\n            &quot;y1&quot;:660\n         },\n         &quot;label&quot;:&quot;person&quot;\n      },\n      {  \n         &quot;confidence&quot;:0.9487058520317078,\n         &quot;coordinates&quot;:{  \n            &quot;x0&quot;:1056,\n            &quot;x1&quot;:1124,\n            &quot;y0&quot;:506,\n            &quot;y1&quot;:652\n         },\n         &quot;label&quot;:&quot;person&quot;\n      },\n      {  \n         &quot;confidence&quot;:0.9246744513511658,\n         &quot;coordinates&quot;:{  \n            &quot;x0&quot;:1005,\n            &quot;x1&quot;:1088,\n            &quot;y0&quot;:589,\n            &quot;y1&quot;:739\n         },\n         &quot;label&quot;:&quot;person&quot;\n      },\n      {  \n         &quot;confidence&quot;:0.737799882888794,\n         &quot;coordinates&quot;:{  \n            &quot;x0&quot;:344,\n            &quot;x1&quot;:508,\n            &quot;y0&quot;:781,\n            &quot;y1&quot;:945\n         },\n         &quot;label&quot;:&quot;dog&quot;\n      }\n   ],\n   &quot;image&quot;:&quot;data://.algo/temp/dog_park.png&quot;\n}\n</code></pre>\n<p><a id=\"labels\"></a></p>\n<h2>Labels</h2>\n<p>The dataset that this algorithm was trained on has 90 possible labels, here's a list for easy reference:</p>\n<pre><code>- person\n- bicycle\n- car\n- motorcycle\n- airplane\n- bus\n- train\n- truck\n- boat\n- traffic light\n- fire hydrant\n- stop sign\n- parking meter\n- bench\n- bird\n- cat\n- dog\n- horse\n- sheep\n- cow\n- elephant\n- bear\n- zebra\n- giraffe\n- backpack\n- umbrella\n- handbag\n- tie\n- suitcase\n- frisbee\n- skis\n- snowboard\n- sports ball\n- kite\n- baseball bat\n- baseball glove\n- skateboard\n- surfboard\n- tennis racket\n- bottle\n- wine glass\n- cub\n- fork\n- knife\n- spoon\n- bowl\n- banana\n- apple\n- sandwich\n- orange\n- broccoli\n- carrot\n- hot dog\n- pizza\n- donut\n- cake\n- chair\n- couch\n- potted plant\n- bed\n- dining table\n- toilet\n- tv\n- laptop\n- mouse\n- remote\n- keyboard\n- cell phone\n- microwave\n- oven\n- toaster\n- sink\n- refigerator\n- book\n- clock\n- vase\n- scissors\n- teddy bear\n- hair drier\n- toothbrush\n</code></pre>\n<p><a id=\"credits\"></a></p>\n<h2>Credits</h2>\n<p>This algorithm uses modified code from the <a href=\"https://github.com/tensorflow/models/tree/master/object_detection\">object detection module</a> from the <a href=\"https://www.tensorflow.org/\">Google Tensorflow</a> project.</p>\n<p>All images sourced from the <a href=\"https://commons.wikimedia.org/wiki/Main_Page\">wikimedia foundation</a> with the creative commons license</p>\n<p><a id=\"console\"></a></p>\n",
                "discoverable_world": true,
                "source_world": false,
                "is_suppressed": false,
                "license": "apl",
                "total_calls": 142439,
                "tags": [
                  "bounding box",
                  "computer vision",
                  "deep learning",
                  "machine learning",
                  "object detection"
                ],
                "runner_id": 5
              },
              {
                "algo_id": 31877,
                "object_id": "algo-976af9ed-96c9-4372-9ca1-d98f23859da2",
                "username": "jgardner",
                "algoname": "random_choice",
                "algolabel": "random_choice",
                "language": "python2-langpack",
                "card_line": "Returns a random item from the input.",
                "summary": "<p>Returns a random item from the input.</p><p>If the input is a list, it will return an item from the list.</p><p>If the input is a string, it will return a random character from the string.</p><p>Otherwise, the behavior is undefined.<br/></p>",
                "submitted_at": 1452187237000,
                "discoverable_world": true,
                "source_world": true,
                "is_suppressed": false,
                "license": "gpl3",
                "total_calls": 3,
                "runner_id": 5
              },
              {
                "algo_id": 286,
                "object_id": "bb6c4f9a-9aa7-11e3-8351-040108385a01",
                "username": "codeb34v3r",
                "algoname": "BinaryMerge",
                "algolabel": "BinaryMerge",
                "language": "java3",
                "card_line": "A single threaded algorithm to union merge two integer arrays.",
                "summary": "A single threaded algorithm to union merge two integer arrays. The arrays must be in sorted order, otherwise the behavior is undefined.",
                "submitted_at": 1445289944000,
                "discoverable_world": true,
                "source_world": true,
                "is_suppressed": false,
                "license": "apl",
                "total_calls": 18,
                "tags": [
                  "algorithms 101"
                ],
                "runner_id": 5
              },
              {
                "algo_id": 2752,
                "object_id": "9347e8c0-9abe-11e4-be78-12e1fbfbf82c",
                "username": "Geo",
                "algoname": "LatLongDistance",
                "algolabel": "Lat Long Distance",
                "language": "java3",
                "tag_line": "Distance between two points",
                "card_line": "Distance between two points",
                "summary": "Returns the geographical distance between two points defined by latitude and longitude. The first two arguments are the coordinates of one points, the second two the coordinates of the second point. The final argument is string, either &#34;km&#34; or &#34;mile&#34;, depending upon if units of kilometers or miles are desired. This is calculated using the haversine formula and may not be accurate for points that are very close.",
                "submitted_at": 1458089929000,
                "discoverable_world": true,
                "source_world": true,
                "is_suppressed": false,
                "license": "apl",
                "total_calls": 7606,
                "tags": [
                  "geographic",
                  "geographic coordinates",
                  "microservices",
                  "utilities"
                ],
                "runner_id": 5
              },
              {
                "algo_id": 80816,
                "object_id": "algo-4d38539a-37ff-4182-8d31-3e2f4dbdb8a8",
                "username": "guardlogic",
                "algoname": "AdultImageClassifier",
                "algolabel": "AdultImageClassifier",
                "language": "python2-langpack",
                "tag_line": "  Assesses if an image contains \"Adult\" content where the term \"Adult\" is defined as \"sexually explicit\".",
                "card_line": "Assesses if an image contains \"Adult\" content where the term \"Adult\" is defined as \"sexually explicit\".",
                "summary": "<h2>Overview</h2>\n<p>Estimates the probability that an image contains &quot;adult&quot; content. This generally means sexually explicit, not-safe-for-work (NSFW) content.</p>\n<h2>Usage</h2>\n<h3>Input</h3>\n<p><em>Image url</em>: eg,,  <a href=\"http://www.domain.com/img.jpg\">http://www.domain.com/img.jpg</a></p>\n<p>or</p>\n<p><em>Algorithmia data url</em>: eg., <a href=\"data://path_to_image_file\">data://path_to_image_file</a></p>\n<p>or</p>\n<p>json request with the field <strong>image</strong> containing the image url or data url. Images can be color or gray-scale.</p>\n<h3>Output</h3>\n<p>json containing <strong>adult_prob</strong> as the probability that the image contains adult content. The probability lies in (0,1) and its value is formatted as a string.</p>\n<p><strong>Note:</strong> It is up to the user to decide the threshold in (0,1) above which the content of the image will be treated as &quot;adult&quot; in his or her application.</p>\n<h2>Examples</h2>\n<p>Request:</p>\n<pre><code>{'image': 'https://upload.wikimedia.org/wikipedia/commons/thumb/0/00/Sus_cebifrons_negrinus_piglet.jpg/1599px-Sus_cebifrons_negrinus_piglet.jpg'}\n\nor\n\n'https://upload.wikimedia.org/wikipedia/commons/thumb/0/00/Sus_cebifrons_negrinus_piglet.jpg/1599px-Sus_cebifrons_negrinus_piglet.jpg'\n\n</code></pre>\n<p>Result:</p>\n<pre><code>\n{'adult_prob': '000106323'}\n\n</code></pre>\n",
                "discoverable_world": true,
                "source_world": false,
                "is_suppressed": false,
                "license": "apl",
                "total_calls": 4403,
                "tags": [
                  "computer vision",
                  "content filtering",
                  "deep learning",
                  "image",
                  "inappropriate content",
                  "machine learning",
                  "nsfw",
                  "nudity detection",
                  "photo",
                  "porn filtering"
                ],
                "runner_id": 6,
                "algorithm_builder_id": 1
              },
              {
                "algo_id": 57512,
                "object_id": "algo-c46c08c4-d932-453e-9db0-8b970408ee2a",
                "username": "cindyxiaoxiaoli",
                "algoname": "KeywordExtraction",
                "algolabel": "Keyword Extraction",
                "language": "python3-1",
                "tag_line": "Keyword/KeyPhrase Extraction from Sentence",
                "card_line": "Keyword/KeyPhrase Extraction from Sentence",
                "summary": "<h2>Keyword Extraction from Sentence</h2><p>Given a sentence, the algorithm extracts a list of keywords from it. Keywords here are defined as words/phrases that represent meaningful topics. It could be especially useful to understand short pieces of text.</p><p>The algorithm relies on NLTK for does Part-Of-Speech-Tagging and a stop word list but it is not trained on any pre-defined dataset. It can be used on any domain. It extracts Noun Phrases from the sentence which are valuable in representing meanings.<br/></p><h3 style=\"font-size: 24px;\"><b>Features</b></h3><p style=\"font-size: 16px;\">Extracts keywords that are single word and/or multi-word phrases.</p><p style=\"font-size: 16px;\">Case of the letters and the form of the words are kept intact.</p><p style=\"font-size: 16px;\">All keywords in a sentence are extracted.</p><p style=\"font-size: 16px;\">If a keyword appeared multiple times it will appear multiple times in the result so if you need it for further analysis it may be helpful.</p><h2>Example</h2><p>Input:</p><pre><span style=\"font-size: 14px;float: none;\">&#34;Natural language processing (NLP) is a field of computer science, artificial intelligence, and computational linguistics concerned with the interactions between computers and human (natural) languages and, in particular, concerned with programming computers to fruitfully process large natural language corpora. &#34;</span></pre><p>Output:</p><pre>[&#34;Natural language processing&#34;,&#34;NLP&#34;,&#34;field&#34;,&#34;computer science&#34;,&#34;artificial intelligence&#34;,&#34;computational linguistics&#34;,&#34;interactions&#34;,&#34;computers&#34;,&#34;languages&#34;,&#34;computers&#34;,&#34;large natural language corpora&#34;]<br/></pre><p>Input:</p><pre>​&#34;I really like the pictures listed on their mobile website and I also like the customer service.&#34;</pre><p>Output:</p><pre>​[&#34;pictures&#34;,&#34;mobile website&#34;,&#34;customer service&#34;]</pre>",
                "discoverable_world": true,
                "source_world": false,
                "is_suppressed": false,
                "license": "apl",
                "total_calls": 35936,
                "tags": [
                  "keyword extraction",
                  "keyword mining",
                  "keywords",
                  "nlp",
                  "text analysis"
                ],
                "runner_id": 5
              },
              {
                "algo_id": 84058,
                "object_id": "algo-c35c3158-b786-4b17-afd6-35ea22ae8b81",
                "username": "alexbol99",
                "algoname": "PolygonBooleanOp",
                "algolabel": "Polygon Boolean Operations",
                "language": "javascript",
                "tag_line": " Boolean operations on polygons (union, subtract, intersect)",
                "card_line": "Boolean operations on polygons (union, subtract, intersect)",
                "summary": "<h2>Boolean operations on polygons</h2>\n<p>BooleanOp algorithm performs fast and reliable boolean operations on polygons. It supports all basic operations on polygons:</p>\n<ul>\n<li>unify</li>\n<li>intersect</li>\n<li>subtract</li>\n</ul>\n<p>BooleanOp dependent on <a href=\"https://github.com/alexbol99/flatten-js\">flatten-js</a> javascript library.\nThis library provides Polygon class definition together with the methods to treat faces and edges.<br/>\nPolygon is actually a multi-polygon comprised from a number of faces. Each face is a closed loop of edges - segments or circular arcs.\nThe orientation of faces (clockwise or counterclockwise) is matter, because algorithm implemented in the way that it never changes an original direction of the edge. For the boolean operation to be performed correctly, faces have to fit the following rules:</p>\n<ol>\n<li>Each face is a non-degenerated simple closed polygon. In another words, face should not have self-intersections and its orientation may be strictly defined.</li>\n<li>If one face is totally inside another face, its orientation should be opposite to the orientation of external face. Then we will call external faces islands and internal faces holes. So the rule is &quot;no island inside island and no hole inside hole&quot;.</li>\n<li>Faces of the polygon should not overlap each other</li>\n</ol>\n<p>BolleanOp algorithm does not check that input polygon fits these rules, this is on the responsibility of the caller.</p>\n<p>The result of boolean operation is also a polygon. Note, that the resulted polygon may be empty, for example as the result of the intersection between two disjoint polygons.</p>\n<h3>Applicable Scenarios and Problems</h3>\n<p><em>What scenarios or problems would this algorithm work well in?</em></p>\n<h2>Usage</h2>\n<h3>Input</h3>\n<table>\n<thead>\n<tr><th>Parameter</th><th>Description</th></tr>\n</thead>\n<tbody>\n<tr><td>Polygon1</td><td>First Polygon in JSON format</td></tr>\n<tr><td>Polygon2</td><td>Second Polygon in JSON format</td></tr>\n<tr><td>Operarion</td><td>Boolean operation code</td></tr>\n</tbody>\n</table>\n<p>JSON format for polygon defined as an array of faces, where each face describes edges.</p>\n<p>Face array may be defined in 2 forms:</p>\n<ol>\n<li>Simplified form - array of points as an array of numbers, where numbers at odd places describing x-coordinates and numbers ar even places describing y-coordinates<br/></li>\n<li>Regular form - array of edges where each edge describes segment or arc in the following format:</li>\n</ol>\n<p>Segment:</p>\n<pre><code>&quot;\n{\n\t&quot;name&quot;: &quot;segment&quot;,\n\t&quot;ps&quot; : {&quot;x&quot;: number, &quot;y&quot;: number},\n\t&quot;pe&quot; : {&quot;x&quot;: number, &quot;y&quot;: number}\n}\n&quot;\n</code></pre>\n<p>Circular arc:</p>\n<pre><code>&quot;\n{\n\t&quot;name&quot;: &quot;arc&quot;,\n\t&quot;pc&quot;: {&quot;x&quot;: number, &quot;y&quot;: number&quot;},\n\t&quot;r&quot;: number,\n\t&quot;startAngle&quot;: number,\n\t&quot;endAngle&quot;: number,\n\t&quot;counterClockwise&quot;: boolean\n}\n&quot;\n</code></pre>\n<p>Operation is one of the constants (defined in flatten-js library):</p>\n<p>1 - Unify<br/>\n2 - Intersect<br/>\n3 - Subtract<br/></p>\n<p><em>What data pre-processing would be great to perform on the input before calling this algorithm?</em></p>\n<h3>Output</h3>\n<p>Output of the algorithm is also a polygon in the same JSON format</p>\n<table>\n<thead>\n<tr><th>Parameter</th><th>Description</th></tr>\n</thead>\n<tbody>\n<tr><td>polygon</td><td>Resulted polygon</td></tr>\n</tbody>\n</table>\n<h2>Examples</h2>\n<p><em>Provide and explain examples of input and output for your algorithm.</em></p>\n",
                "discoverable_world": true,
                "source_world": true,
                "is_suppressed": false,
                "license": "apl",
                "total_calls": 58,
                "tags": [
                  "2d",
                  "arrangement",
                  "boolean operations",
                  "clipping",
                  "geometry",
                  "intersection",
                  "polygon",
                  "subtraction",
                  "union"
                ],
                "runner_id": 5,
                "algorithm_builder_id": 1
              },
              {
                "algo_id": 65155,
                "object_id": "algo-0dc3b69a-acd9-4f1a-935e-49195e0c0c75",
                "username": "api2ninja",
                "algoname": "ObjectDiff",
                "algolabel": "Object Diff",
                "language": "javascript",
                "tag_line": "Determining the structural differences between objects",
                "card_line": "Determining the structural differences between objects",
                "summary": "<p>Determining the structural differences between objects.</p><div><br/></div><h2 style=\"font-size: 24px;vertical-align: baseline;color: rgba(0, 0, 0, 0.8);\">Features</h2><ul style=\"font-size: 16px;vertical-align: baseline;\"><li style=\"font-size: 16px;vertical-align: baseline;\">Get the structural differences between two objects.</li><li style=\"font-size: 16px;vertical-align: baseline;\">Observe the structural differences between two objects.</li><li style=\"font-size: 16px;vertical-align: baseline;\">When structural differences represent change, apply change from one object to another.</li><li style=\"font-size: 16px;vertical-align: baseline;\">When structural differences represent change, selectively apply change from one object to another.</li></ul><h3 style=\"font-size: 20px;vertical-align: baseline;color: rgba(0, 0, 0, 0.8);\"><br/></h3><h3 style=\"font-size: 20px;vertical-align: baseline;color: rgba(0, 0, 0, 0.8);\">Differences</h3><p style=\"font-size: 16px;vertical-align: baseline;\">Differences are reported as one or more change records. Change records have the following structure:</p><ul style=\"font-size: 16px;vertical-align: baseline;\"><li style=\"font-size: 16px;vertical-align: baseline;\"><code style=\"font-size: inherit;vertical-align: baseline;\">kind</code> - indicates the kind of change; will be one of the following:<ul style=\"font-size: inherit;vertical-align: baseline;\"><li style=\"font-size: 16px;vertical-align: baseline;\"><code style=\"font-size: inherit;vertical-align: baseline;\">N</code> - indicates a newly added property/element</li><li style=\"font-size: 16px;vertical-align: baseline;\"><code style=\"font-size: inherit;vertical-align: baseline;\">D</code> - indicates a property/element was deleted</li><li style=\"font-size: 16px;vertical-align: baseline;\"><code style=\"font-size: inherit;vertical-align: baseline;\">E</code> - indicates a property/element was edited</li><li style=\"font-size: 16px;vertical-align: baseline;\"><code style=\"font-size: inherit;vertical-align: baseline;\">A</code> - indicates a change occurred within an array</li></ul></li><li style=\"font-size: 16px;vertical-align: baseline;\"><code style=\"font-size: inherit;vertical-align: baseline;\">path</code> - the property path (from the left-hand-side root)</li><li style=\"font-size: 16px;vertical-align: baseline;\"><code style=\"font-size: inherit;vertical-align: baseline;\">lhs</code> - the value on the left-hand-side of the comparison (undefined if kind === 'N')</li><li style=\"font-size: 16px;vertical-align: baseline;\"><code style=\"font-size: inherit;vertical-align: baseline;\">rhs</code> - the value on the right-hand-side of the comparison (undefined if kind === 'D')</li><li style=\"font-size: 16px;vertical-align: baseline;\"><code style=\"font-size: inherit;vertical-align: baseline;\">index</code> - when kind === 'A', indicates the array index where the change occurred</li><li style=\"font-size: 16px;vertical-align: baseline;\"><code style=\"font-size: inherit;vertical-align: baseline;\">item</code> - when kind === 'A', contains a nested change record indicating the change that occurred at the array index</li></ul><p><br/></p><p>Input:</p><blockquote><p>{ obj1: &#34;FIRST OBJECT&#34;, obj2: &#34;SEC OBJECT&#34; }</p></blockquote><div><br/></div><div>based on deep-diff<br/><p><br/></p></div>",
                "discoverable_world": true,
                "source_world": false,
                "is_suppressed": false,
                "license": "apl",
                "total_calls": 10,
                "tags": [
                  "data preprocessing",
                  "utilities"
                ],
                "runner_id": 5
              },
              {
                "algo_id": 103576,
                "object_id": "algo-999f67f2-564c-4712-a574-8fb5e04911f9",
                "username": "util",
                "algoname": "MySql",
                "algolabel": "MySql",
                "language": "python3-1",
                "tag_line": " Query a preconfigured MySql database",
                "card_line": "Query a preconfigured MySql database",
                "summary": "<h2>Overview</h2>\n<p>Query a MySql Database which has been preconfigured via <a href=\"../MySqlConfig\">util/MySqlConfig</a></p>\n<h2>Usage</h2>\n<h3>Input: bare query string</h3>\n<p>Any valid SQL query (note that BLOBs or very long result sets may return too much data to transfer; use of LIMIT is encouraged)</p>\n<pre><code>&quot;Select Firstname, Lastname from Employees LIMIT 100&quot;\n</code></pre>\n<h3>Input: query</h3>\n<table>\n<thead>\n<tr><th>Parameter</th><th>Description</th></tr>\n</thead>\n<tbody>\n<tr><td>query</td><td>Any valid SQL</td></tr>\n</tbody>\n</table>\n<pre><code>{\n\t&quot;query&quot;: &quot;Select Firstname, Lastname from Employees LIMIT 100&quot;\n}\n</code></pre>\n<h3>Input: query on a specific namespace</h3>\n<p><a href=\"../MySqlConfig\">util/MySqlConfig</a> supports storing different configuration files, referred to as namespaces</p>\n<table>\n<thead>\n<tr><th>Parameter</th><th>Description</th></tr>\n</thead>\n<tbody>\n<tr><td>namespace</td><td>Alphanumeric namespace defined in via MySqlConfig</td></tr>\n<tr><td>query</td><td>Any valid SQL</td></tr>\n</tbody>\n</table>\n<pre><code>{\n\t&quot;namespace&quot;: &quot;staging&quot;,\n\t&quot;query&quot;: &quot;Select Firstname, Lastname from Employees LIMIT 100&quot;\n}\n</code></pre>\n<h3>Output</h3>\n<p>Query results as multidimensional Array</p>\n<pre><code>[\n  [&quot;Jane&quot;, &quot;Doe&quot;],\n  [&quot;Jon&quot;, &quot;Doe&quot;]\n]\n</code></pre>\n",
                "discoverable_world": true,
                "source_world": true,
                "is_suppressed": false,
                "license": "apl",
                "total_calls": 55,
                "tags": [
                  "database",
                  "MySql"
                ],
                "runner_id": 5,
                "algorithm_builder_id": 1
              },
              {
                "algo_id": 65404,
                "object_id": "algo-c6009c00-7217-4fdd-9804-d3f1434edade",
                "username": "gb96",
                "algoname": "RamerDouglasPeucker",
                "algolabel": "Ramer–Douglas–Peucker",
                "language": "javascript",
                "tag_line": "Simplify a 2D or 3D line",
                "card_line": "Simplify a 2D or 3D line",
                "summary": "<p>Implements the <b>Ramer-Douglas-Peucker algorithm</b> for simplifying a line defined by an ordered set of points, as described in <a href=\"https://en.wikipedia.org/wiki/Ramer%E2%80%93Douglas%E2%80%93Peucker_algorithm\" target=\"\">Wikipedia: Ramer-Douglas-Peucker algorithm</a>​.</p><p>The current implementation is a recursive imperitive function with no attempt at parallelisation or optimisation.  Computational complexity is Θ(n log n) on average. However, the worst-case complexity is Θ(n<sup>2</sup>).</p><p>The input is an array of <b>points </b>(either 2D [x, y], or 3D [x, y, z]) and a non-negative real scalar parameter <b>epsilon</b>.</p><p>The output is an array of points representing a subset of the input points, as an approximation to the original line.</p>",
                "discoverable_world": true,
                "source_world": true,
                "is_suppressed": false,
                "license": "apl",
                "total_calls": 42,
                "runner_id": 5
              },
              {
                "algo_id": 73628,
                "object_id": "algo-053bf6d6-fb71-4259-9793-7cacbab77f5b",
                "username": "zeryx",
                "algoname": "openimagesDemo",
                "algolabel": "Open Images Detector",
                "language": "python3-1",
                "tag_line": "An example of a Tensorflow Object Detector",
                "card_line": "An example of a Tensorflow Object Detector",
                "summary": "<p><img src=\"https://i.imgur.com/sImfd3X.png\" height=400></img></p>\n<p>This is an object detection example alorithm that utilizes the <a href=\"https://github.com/openimages/dataset\">open images</a> dataset. For more information, take a look our <a href=\"https://blog.algorithmia.com/deep-dive-into-object-detection-with-open-images-using-tensorflow/\">deep dive tutorial</a>. Exploring this algorithms source is a great place to start when creating your own Tensorflow powered Object Detector.</p>\n<p><a id=\"io\"></a></p>\n<h2>I/O</h2>\n<h3>Input</h3>\n<pre><code>{  \n   &quot;image&quot;: String,\n   &quot;output&quot;: String,\n   &quot;min_score&quot;: Float,\n}\n</code></pre>\n<ul>\n<li>image - <strong><em>(required)</em></strong> - a hosted image file, may be a web url (<code>http</code>, <code>https</code>) or a data connector URI (<code>data://</code>, <code>s3://</code>, etc).</li>\n<li>output - <strong><em>(optional)</em></strong> - the output data connector URI (<code>data://</code>, <code>s3://</code>, etc) for the resultant annotated image. <em>If output is not provided, only the bounding box data is returned.</em></li>\n<li>min_score - <strong><em>(optional)</em></strong> - the minimum score threshold for bounding box annotations, if a prediction's confidence is less than this minimum, it's not returned in the results. _If min_score is not defined, it defaults to 0.5</li>\n</ul>\n<p><strong>Alternatively you can just pass a url directly to the algorithm as a string.</strong></p>\n<h3>Output</h3>\n<pre><code>{\n    &quot;image&quot;: String,\n    &quot;boxes&quot;: [\n        {\n            &quot;coordinates&quot;: {\n                &quot;x0&quot;: Float,\n                &quot;y0&quot;: Float,\n                &quot;x1&quot;: Float,\n                &quot;y1&quot;: Float\n            },\n            &quot;label&quot;: String,\n            &quot;confidence&quot;: Float\n        },\n    ...\n    ]\n}\n</code></pre>\n<ul>\n<li>image - The bounding box annotated image (if <code>output</code> was defined) data connector URI.</li>\n<li>boxes - a list of all detected objects and their bounding boxes.</li>\n<li>coordinates - the <code>absolute</code> cartesian coordinates of the bounding box found in the specimen image.</li>\n<li>label - the predicted label/class for the detected object</li>\n<li>confidence - the confidence of the class prediction (0 -&gt; 1)</li>\n</ul>\n",
                "discoverable_world": true,
                "source_world": true,
                "is_suppressed": false,
                "license": "apl",
                "total_calls": 658,
                "tags": [
                  "deep learning",
                  "demo",
                  "image",
                  "object detection"
                ],
                "runner_id": 5,
                "algorithm_builder_id": 1
              },
              {
                "algo_id": 32274,
                "object_id": "algo-05c26451-9d95-4f4e-ab12-046f98f6ada2",
                "username": "vagrant",
                "algoname": "AreaPolling",
                "algolabel": "Geo-Fence (Radial)",
                "language": "python2-langpack",
                "tag_line": "Define a geofence. Check if GPS coordinates are within that Geofence",
                "card_line": "Define a geofence. Check if GPS coordinates are within that Geofence",
                "summary": "<h2><span style=\"color: inherit;\">The Algorithm</span><br/></h2><p>This is an O(n) algorithm that provides information about wether or not a group of GPS coordinates are contained within a user defined Geo-Fence.    <br/>  <br/></p><div style=\"text-align: justify;\"><span>Calculations are made using a spherical earth model (ignoring ellipsoidal effects).  </span><span style=\"text-align: justify;\">While the earth is very slightly ellipsoidal, spherical models used in this algorithm will only </span><span style=\"text-align: justify;\">yield</span><span style=\"text-align: justify;\"> up to a 0.3% error margin.</span></div><p></p><p></p><p><img src=\"http://imgur.com/EGnvuMX.png\"/><img src=\"http://imgur.com/JOuO8cK.png\"/><i><br/></i></p><p><i>Object within Geo-Fence(left). Object not within Geo-Fence(right)</i><br/></p><h3>Defining Geo-Fences</h3><p>To define a geo-fence two pieces of information must be given.<br/><br/>1) The relative position of the center of the geo-boundary. Expressed as GPS coordinates.  <br/><br/>2) The radius of the geo-fence expressed in meters. If this value is not provided a default value of 150 meters will be assumed.</p><p><br/>The algorithm will detect if the GPS positions given are within the defined radius of the geo-fence.    <br/>  <span style=\"color: inherit;\"><br/><span><b>GPS information</b></span></span></p><p>A single call to this algorithm checks a batch size of up to 1,000 GPS markers. In the event that more than 1,000 of these markers are provided, only the first 1,000 will be processed, the rest will be returned as a list of unprocessed objects.    <br/><br/>Processed objects will convey six types of information.  </p><p>1)  A boolean indicating wether or not the processed object is within the geo-boundary.  </p><p><span>2) Distance from the center of the geo-fence to the processed object; Expressed in meters </span><br/></p><p><span>4) The smallest distance from the geo-fence center to the processed object; Expressed in meters</span></p><p><span>5) The original lat, lon information.  </span></p><p><span>6) An error margin, expressed in meters. This margin details distance computation errors that may accrue for larger distances.  </span></p><p><br/> </p>",
                "submitted_at": 1455339385000,
                "discoverable_world": true,
                "source_world": false,
                "is_suppressed": false,
                "license": "apl",
                "total_calls": 225,
                "tags": [
                  "geographic",
                  "geographic coordinates"
                ],
                "runner_id": 5
              },
              {
                "algo_id": 48161,
                "object_id": "algo-e408e70c-ee62-445c-b8b9-c1417656be52",
                "username": "media",
                "algoname": "VideoTransform",
                "algolabel": "Video Transform",
                "language": "rust",
                "tag_line": "Transform a video with image algorithms",
                "card_line": "Transform a video with image algorithms",
                "summary": "<h1>Video Transform</h1>\n<p><img src=\"http://i.imgur.com/oziWGjx.png\" width=800></img></p>\n<p>This algorithm uses an image processing algorithm to alter each frame of a video, then recombines it back into a freshly transformed video file.</p>\n<p><strong>note:</strong> This algorithm takes longer than most other algorithms as it recursively calls an image algorithm over each frame of a video file, make sure to add a <a href=\"http://docs.algorithmia.com/#query-parameters\">custom timeout to your algorithm call</a>.</p>\n<p><strong>note:</strong> This algorithm is royalty free, but the image processing algorithms it can call might not be, check your account's credit balance before running this algorithm on a custom video.</p>\n<h1>Changelog</h1>\n<p>0.6.3 - August 1st, 2018:</p>\n<ul>\n<li>Added a early termination watchdog thread that detects processing jobs that are forecasted to take longer than the maximum timeout of <code>50 minutes</code>.</li>\n<li>various bug fixes that should improve stability and early termination in the event of a detected failure.</li>\n</ul>\n<p>0.5.0 - May 23, 2017:</p>\n<ul>\n<li>Added <a href=\"https://algorithmia.com/algorithms/media/SmartVideoDownloader\">Smart Video Downloader</a> support to resolve a compressed gzip request problem</li>\n<li>with Smart Video Downloader added, <code>input_file</code> may now point to any web hosted URL, including youtube, vimeo, etc.</li>\n</ul>\n<h1>Input</h1>\n<pre><code>input_file: String,\noutput_file: String,\nalgorithm: String,\nadvanced_input: Json,\nfps: Double,\nimage_compression: Int,\nvideo_compression: Int\n</code></pre>\n<ul>\n<li>input_file - <strong><em>(required)</em></strong> - The input url of the video file, can be any standard video container format (mp4, mkv, avi, etc), can be an http/https url or a data connector uri(<code>data://</code>, <code>s3://</code>, <code>dropbox://</code>, etc).</li>\n<li>output_file - <strong><em>(required)</em></strong> - The output url of the altered video file, must be a data connector uri (<code>data://</code>, <code>s3://</code>, <code>dropbox://</code>, etc).</li>\n<li>algorithm - <strong><em>(required)</em></strong> - The image processing algorithmia algorithm uri, if no default mode is found for that algorithm, advanced_input <em>must</em> be defined.</li>\n<li>advanced_input - <strong><em>(optional)</em></strong> - if you have advanced requirements or want to use an algorithm with no default parameters, See <a href=\"#advancedInput\">Advanced Input</a>.</li>\n<li>fps - <strong><em>(optional)</em></strong> - If you have a desired fps sampling rate, input it here. <em>defaults to the input video's fps.</em></li>\n<li>image_compression - <strong><em>(optional)</em></strong> - if you want to improve performance of processing, it's possible to compress each frame using the jpeg compression algorithm, the value provided is the associated compression ratio - from <code>0</code> (uncompressed) to <code>100</code> (most compressed). <em>If undefined, we use the PNG algorithm and image format instead, <strong>beware as some algorithms don't support jpg, or vice versa.</strong></em></li>\n<li>video_compression - <strong><em>(optional)</em></strong> - by default, the output video file is raw and uncompressed, if you desire to compress your output video using the libx264 codec, provide a compression ratio value for this element, from <code>0</code> (uncompressed) to `100 (most compressed)</li>\n</ul>\n<p><a id=\"advancedInput\"></a></p>\n<h2>Advanced Input</h2>\n<p>If advanced_input is found, this algorithm will parse it as a json object; finding and replacing keywords relating to uploading and downloading files in both batch and single form with paths that the Video Transform algorithm uses.</p>\n<p>The keywords are:</p>\n<p><code>$SINGLE_INPUT</code> - whenever you see a single image input path for an algorithm, this keyword will work</p>\n<p><code>$SINGLE_OUTPUT</code> whenever you see a single image output path for an algorithm, this keyword will work</p>\n<p><code>$BATCH_INPUT</code> - similar to single input keyword, but works for arrays of input files (DeepFilter for example)</p>\n<p><code>$BATCH_OUTPUT</code> - similar to single input keyword, but works for arrays of input files (DeepFilter for example)</p>\n<h2>Example:</h2>\n<h4>SalNet algorithm default input</h4>\n<pre><code>{\n  &quot;image&quot;: &quot;data://deeplearning/example_data/mona_lisa.jpg&quot;,\n  &quot;location&quot;: &quot;data://.algo/temp/test42.png&quot;\n}\n\n</code></pre>\n<h4>Video Transform with advanced salnet input</h4>\n<pre><code>\n{  \n   &quot;input_file&quot;: &quot;data://path/to/file.mp4&quot;,\n   &quot;output_file&quot;: &quot;data://save/file.mp4,\n   &quot;algorithm&quot;: &quot;algo://deeplearning/SalNet/0.1.6&quot;,\n   &quot;advanced_input&quot;: {\n  &quot;image&quot;: &quot;$SINGLE_INPUT&quot;,\n  &quot;location&quot;: &quot;$SINGLE_OUTPUT&quot;\n},\n   &quot;fps&quot;: Double\n}\n\n</code></pre>\n<p><a id=\"outputs\"></a></p>\n<h1>Output</h1>\n<pre><code>{  \n    &quot;output_file&quot;: String\n}\n\n</code></pre>\n<ul>\n<li>output_file - the complete algorithmia URI for where the output video file has been uploaded to.</li>\n</ul>\n<p><a id=\"defaults\"></a></p>\n<h1>Default Options</h1>\n<p>This algorithm has default parameters set up for a number of algorithms, this list will grow as new image altering algorithms are released:</p>\n<ul>\n<li><strong>DeepFilter</strong> - uses version <code>0.6.0</code>, <code>filterName</code> is <code>gan_vogh</code> - (deeplearning/DeepFilter)</li>\n<li><strong>SalNet</strong> - uses version <code>0.2.0</code> - (deeplearning/SalNet)</li>\n<li><strong>Colorful Image Colorization</strong> - uses version <code>1.1.6</code> - (deeplearning/ColorfulImageColorization)</li>\n</ul>\n<p><a id=\"examples\"></a></p>\n<h1>Examples</h1>\n<h3>DeepFilter default input</h3>\n<pre><code>{  \n   &quot;input_file&quot;:&quot;data://media/videos/lounge_demo.mp4&quot;,\n   &quot;output_file&quot;:&quot;data://.algo/temp/altered_lounge_demo.mp4&quot;,\n   &quot;algorithm&quot;:&quot;algo://deeplearning/DeepFilter&quot;\n}\n\n</code></pre>\n<h3>DeepFilter advanced input</h3>\n<pre><code>{  \n   &quot;input_file&quot;:&quot;data://media/videos/lounge_demo.mp4&quot;,\n   &quot;output_file&quot;:&quot;data://.algo/temp/altered_lounge_demo.mp4&quot;,\n   &quot;algorithm&quot;:&quot;algo://deeplearning/DeepFilter/0.3.2&quot;,\n   &quot;advanced_input&quot;:{  \n      &quot;images&quot;:&quot;$BATCH_INPUT&quot;,\n      &quot;savePaths&quot;:&quot;$BATCH_OUTPUT&quot;,\n      &quot;filterName&quot;:&quot;neo_instinct&quot;\n   }\n}\n\n</code></pre>\n<h3>SalNet default input with fps</h3>\n<pre><code>{  \n   &quot;input_file&quot;:&quot;data://media/videos/lounge_demo.mp4&quot;,\n   &quot;output_file&quot;:&quot;data://.algo/temp/altered_lounge_demo.mp4&quot;,\n   &quot;algorithm&quot;:&quot;algo://deeplearning/SalNet&quot;,\n   &quot;fps&quot;: 14.24\n}\n\n</code></pre>\n<p><a id=\"credits\"></a></p>\n<h1>Credits</h1>\n<p>All video processing is handled by <code>FFMpeg</code>, which is a fantastic video/image manipulation tool that can be found <a href=\"https://ffmpeg.org/\">here</a><a id=\"console\"></a></p>\n",
                "discoverable_world": true,
                "source_world": false,
                "is_suppressed": false,
                "license": "apl",
                "total_calls": 1848,
                "tags": [
                  "audio video",
                  "computer vision",
                  "image processing",
                  "video processing"
                ],
                "runner_id": 5
              },
              {
                "algo_id": 65826,
                "object_id": "algo-b8037498-b86c-4017-b45f-bb47792c35bb",
                "username": "PBittencourt",
                "algoname": "NaiveDBScan",
                "algolabel": "NaiveDBScan",
                "language": "javascript",
                "tag_line": "Simple 2D DBScan Clustering Algorithm",
                "card_line": "Simple 2D DBScan Clustering Algorithm",
                "summary": "<h2>2d DBScan<br/><!--StartFragment--><b style=\"font-size: 14px;\">2 dimesional Density-based spatial clustering of applications with noise</b></h2><p>This is a very simple implementation of the DBScan clustering algorithm, DBScan has two major advantages to the most known K-means :</p><ul><li>​Automatic inference of the number of clusters (in case you do not know a priori the number of classes in the dataset);</li><li>Works on noisy data (there is a well defined &#34;noise&#34; class for data points not in clusters).</li></ul><p>For the details of the theoretical basis of DBScan, wikipedia article is very straightforward on the inner workings. Strongly recommend going trough it for details [<a href=\"https://en.wikipedia.org/wiki/DBSCAN\" target=\"\">link</a>] </p><p><br/></p><h2>​How to use</h2><p>In this first version the algorithm input is a json object with the points to be clustered, by now only 2 dimensional data, the json must have the form [{&#34;x&#34;:P1x,&#34;y&#34;:P1y}, <span style=\"font-size: 16px;float: none;\">{&#34;x&#34;:P2x,&#34;y&#34;:P2y}, ... , <span style=\"font-size: 16px;float: none;\">{&#34;x&#34;:Pnx,&#34;y&#34;:Pny}] and the output is an array with the cluster number [Cp1,Cp2,...,Cpn].</span></span></p><h2>​Current limitations</h2><ul><li>​Fixed epsilon of 15 (normalize your data accordingly);</li><li>Fixed minimum points of 3;</li><li>2 dimensional data;</li><li>Only euclidean distance.</li></ul><h2>​disclaimer</h2><p>I strongly suggest to not use this version in production code, just for simple validation and small ad-hoc analysis by now. This version is extremely limited in terms of parametrization and dimensionality and is naively implemented make it very inefficient for larger datasets (+10k points).</p><h1><p><br/></p></h1>",
                "discoverable_world": true,
                "source_world": false,
                "is_suppressed": false,
                "license": "apl",
                "total_calls": 20,
                "tags": [
                  "clustering",
                  "data preprocessing",
                  "unsupervised machine learning"
                ],
                "runner_id": 5
              },
              {
                "algo_id": 103574,
                "object_id": "algo-e84bab43-ee67-4fea-8b89-00cb68372ac4",
                "username": "util",
                "algoname": "MsSqlServer",
                "algolabel": "MsSqlServer",
                "language": "python3-1",
                "tag_line": "  Query a preconfigured MsSqlServer database",
                "card_line": "Query a preconfigured MsSqlServer database",
                "summary": "<h2>Overview</h2>\n<p>Query a MS SQL Server Database which has been preconfigured via <a href=\"../MsSqlServerConfig\">util/MsSqlServerConfig</a></p>\n<h2>Usage</h2>\n<h3>Input: bare query string</h3>\n<p>Any valid SQL query (note that BLOBs or very long result sets may return too much data to transfer). Separate USE statement with <code>;</code></p>\n<pre><code>&quot;USE employees; SELECT firstname, lastname FROM employees&quot;\n</code></pre>\n<h3>Input: query</h3>\n<table>\n<thead>\n<tr><th>Parameter</th><th>Description</th></tr>\n</thead>\n<tbody>\n<tr><td>query</td><td>Any valid SQL</td></tr>\n</tbody>\n</table>\n<pre><code>{\n\t&quot;query&quot;: &quot;USE employees; SELECT firstname, lastname FROM employees&quot;\n}\n</code></pre>\n<h3>Input: query on a specific namespace</h3>\n<p><a href=\"../MsSqlServerConfig\">util/MsSqlServerConfig</a> supports storing different configuration files, referred to as namespaces</p>\n<table>\n<thead>\n<tr><th>Parameter</th><th>Description</th></tr>\n</thead>\n<tbody>\n<tr><td>namespace</td><td>Alphanumeric namespace defined in via MsSqlServerConfig</td></tr>\n<tr><td>query</td><td>Any valid SQL</td></tr>\n</tbody>\n</table>\n<pre><code>{\n\t&quot;namespace&quot;: &quot;staging&quot;,\n\t&quot;query&quot;: &quot;USE employees; SELECT firstname, lastname FROM employees&quot;\n}\n</code></pre>\n<h3>Output</h3>\n<p>Query results as multidimensional Array</p>\n<pre><code>[\n  [&quot;Jane&quot;, &quot;Doe&quot;],\n  [&quot;Jon&quot;, &quot;Doe&quot;]\n]\n</code></pre>\n",
                "discoverable_world": true,
                "source_world": true,
                "is_suppressed": false,
                "license": "apl",
                "total_calls": 56,
                "tags": [
                  "database",
                  "MS SQL Server",
                  "MsSql"
                ],
                "runner_id": 5,
                "algorithm_builder_id": 1
              },
              {
                "algo_id": 103575,
                "object_id": "algo-7c78aa99-90d3-41cd-adff-c71459f398db",
                "username": "util",
                "algoname": "PostgreSQL",
                "algolabel": "PostgreSQL",
                "language": "python3-1",
                "tag_line": " Query a preconfigured PostgreSQL database ",
                "card_line": "Query a preconfigured PostgreSQL database",
                "summary": "<h2>Overview</h2>\n<p>Query a PostgreSQL Database which has been preconfigured via <a href=\"../PostgreSQLConfig\">util/PostgreSQLConfig</a></p>\n<h2>Usage</h2>\n<h3>Input: bare query string</h3>\n<p>Any valid SQL query (note that BLOBs or very long result sets may return too much data to transfer; use of LIMIT is encouraged)</p>\n<pre><code>&quot;Select Firstname, Lastname from Employees LIMIT 100&quot;\n</code></pre>\n<h3>Input: query</h3>\n<table>\n<thead>\n<tr><th>Parameter</th><th>Description</th></tr>\n</thead>\n<tbody>\n<tr><td>query</td><td>Any valid SQL</td></tr>\n</tbody>\n</table>\n<pre><code>{\n\t&quot;query&quot;: &quot;Select Firstname, Lastname from Employees LIMIT 100&quot;\n}\n</code></pre>\n<h3>Input: query on a specific namespace</h3>\n<p><a href=\"../PostgreSQLConfig\">util/PostgreSQLConfig</a> supports storing different configuration files, referred to as namespaces</p>\n<table>\n<thead>\n<tr><th>Parameter</th><th>Description</th></tr>\n</thead>\n<tbody>\n<tr><td>namespace</td><td>Alphanumeric namespace defined in via PostgreSQLConfig</td></tr>\n<tr><td>query</td><td>Any valid SQL</td></tr>\n</tbody>\n</table>\n<pre><code>{\n\t&quot;namespace&quot;: &quot;staging&quot;,\n\t&quot;query&quot;: &quot;Select Firstname, Lastname from Employees LIMIT 100&quot;\n}\n</code></pre>\n<h3>Output</h3>\n<p>Query results as multidimensional Array</p>\n<pre><code>[\n  [&quot;Jane&quot;, &quot;Doe&quot;],\n  [&quot;Jon&quot;, &quot;Doe&quot;]\n]\n</code></pre>\n",
                "discoverable_world": true,
                "source_world": true,
                "is_suppressed": false,
                "license": "apl",
                "total_calls": 33,
                "tags": [
                  "database",
                  "PostgreSQL"
                ],
                "runner_id": 5,
                "algorithm_builder_id": 1
              },
              {
                "algo_id": 2734,
                "object_id": "327eeeeb-992c-11e4-be78-12e1fbfbf82c",
                "username": "TimeSeries",
                "algoname": "LinearDetrend",
                "algolabel": "Linear Detrend",
                "language": "java3",
                "tag_line": "Fits a linear trend to the given dataset, and returns the linear trend subtracted out",
                "card_line": "Fits a linear trend to the given dataset, and returns the linear trend subtracted out",
                "summary": "<h1>Linear Detrend</h1><p>Takes a time series dataset, fits a linear trend to the data, and returns the dataset with the linear trend subtracted out.</p><h1>Table of Contents</h1><ul><li><a href=\"#inputs\">Inputs</a></li><li><a href=\"#outputs\">Outputs</a></li><li><a href=\"#console\">Algorithm Console</a></li></ul><p><img src=\"https://help.scilab.org/docs/5.5.2/en_US/detrend_1.png\" alt=\"alt text\" title=\"courtesy of scilab.org\"/></p><p><a id=\"inputs\"></a></p><h1>Inputs</h1><h3>JSON Format</h3><p>You must set either <code>uniformlySpaced</code> or <code>variablySpaced</code> json values, but not both.</p><pre><code>{&#10;    &#34;uniformlySpaced&#34;: Double[],&#10;    &#34;variablySpaced&#34;: Double[][]&#10;}&#10;</code></pre><p><strong>uniformly spaced</strong></p><pre><code>{&#34;uniformlySpaced&#34;: [1,2,3,4,3,4,6,7,5,4,2,1,1]}&#10;</code></pre><p><strong>variably spaced</strong></p><pre><code>{&#34;variablySpaced&#34;: [[1,2,3,4,5,6,6.5,7,8.5,9,10,11,12],[1,2,3,4,3,4,6,7,5,4,2,1,1]]}&#10;</code></pre><ul><li>uniformlySpaced - <strong><em>(pick one)</em></strong> - dataset is a 1D array filled with uniformly spaced y coordinates, assumes all datapoints are uniformly spaced in the X axis (IE: input[y] where <code>dx(1) = dx(n)</code>)</li><li>variablySpaced - <strong><em>(pick one)</em></strong> - Dataset is a 2D array where with the first axis X and second Y (IE: <code>input[X][Y]</code>). <em>both arrays must be the same size.</em></li></ul><h2>Array Format</h2><pre><code>[&#10;    first: Double[],&#10;    second: Double[]&#10;]&#10;    &#10;</code></pre><p><strong>uniformly spaced</strong></p><pre><code>[[1,2,3,4,3,4,6,7,5,4,2,1,1]]&#10;</code></pre><p><strong>variably spaced</strong></p><pre><code>[[1,2,4,8,16,32,64,128,256,512],[1,2,3,4,3,4,6,7,5,4]]&#10;</code></pre><ul><li>first -  <strong><em>(required)</em></strong> - if second is not defined, this field defines the dataset's Y axis, and assumes that all datapoints are uniformly spaced in the X axis (IE: <code>dx(1) = dx(n)</code>)</li><li>second - <strong><em>(optional)</em></strong> - if defined, first becomes the X axis coordinates for each datapoint, and second becomes the Y axis for each datapoint.</li></ul><p><a id=\"outputs\"></a></p><h1>Outputs</h1><p>This algorithm output's in the same format it recieved input: if you passed it JSON data it returns JSON data, if you passed it array data it returns array data, etc.</p><h2>JSON Format</h2><pre><code>{&#34;output&#34;: [&#10;  -2.373626373626374,&#10;  -1.3626373626373631,&#10;  -0.3516483516483522,&#10;  0.6593406593406588,&#10;  -0.3296703296703303,&#10;  0.6813186813186807,&#10;  2.6923076923076916,&#10;  3.7032967032967026,&#10;  1.7142857142857135,&#10;  0.7252747252747245,&#10;  -1.2637362637362641,&#10;  -2.252747252747253,&#10;  -2.241758241758242&#10;]}&#10;</code></pre><ul><li>output - The input datset with any linear trend removed.</li></ul><h2>Array Format</h2><pre><code>[&#10;  -2.373626373626374,&#10;  -1.3626373626373631,&#10;  -0.3516483516483522,&#10;  0.6593406593406588,&#10;  -0.3296703296703303,&#10;  0.6813186813186807,&#10;  2.6923076923076916,&#10;  3.7032967032967026,&#10;  1.7142857142857135,&#10;  0.7252747252747245,&#10;  -1.2637362637362641,&#10;  -2.252747252747253,&#10;  -2.241758241758242&#10;]&#10;</code></pre><ul><li>output - The input datset with any linear trend removed.</li></ul><p><a id=\"console\"></a></p>",
                "submitted_at": 1460394616000,
                "discoverable_world": true,
                "source_world": true,
                "is_suppressed": false,
                "license": "apl",
                "total_calls": 54599,
                "tags": [
                  "computational mathematics",
                  "time series",
                  "time series detrend",
                  "time series preprocessing"
                ],
                "runner_id": 5
              },
              {
                "algo_id": 104178,
                "object_id": "algo-ffb93790-a2e2-475f-aaeb-c1c5172ad42e",
                "username": "util",
                "algoname": "BackblazeUpload",
                "algolabel": "BackblazeUpload",
                "language": "python3-1",
                "tag_line": "Upload a file to Backblaze ",
                "card_line": "Upload a file to Backblaze",
                "summary": "<h2>Overview</h2>\n<p>Upload a file into your Backblaze account which has been preconfigured via <a href=\"../BackblazeConfig\">util/BackblazeConfig</a></p>\n<h2>Usage</h2>\n<h3>Input</h3>\n<table>\n<thead>\n<tr><th>Parameter</th><th>Description</th></tr>\n</thead>\n<tbody>\n<tr><td>bucket_name</td><td>name of a Backblaze bucket you can access</td></tr>\n<tr><td>file</td><td><a href=\"https://algorithmia.com/developers/data/\">Data URI</a> of a file you wish to upload</td></tr>\n<tr><td>remote_file</td><td>path and filename to put into bucket</td></tr>\n</tbody>\n</table>\n<pre><code>{\n\t&quot;bucket_name&quot;: &quot;somebucket&quot;,\n\t&quot;file&quot;: &quot;data://util/somecollection/somefile.txt&quot;,\n\t&quot;remote_file&quot;: &quot;somefolder/somefile.txt&quot;\n}\n</code></pre>\n<h3>Input: using a specific namespace</h3>\n<p><a href=\"../BackblazeConfig\">util/BackblazeConfig</a> supports storing different configuration files, referred to as namespaces</p>\n<table>\n<thead>\n<tr><th>Parameter</th><th>Description</th></tr>\n</thead>\n<tbody>\n<tr><td>namespace</td><td>Alphanumeric namespace defined in via BackblazeConfig</td></tr>\n<tr><td>bucket_name</td><td>name of a Backblaze bucket you can access</td></tr>\n<tr><td>file</td><td><a href=\"https://algorithmia.com/developers/data/\">Data URI</a> of a file you wish to upload</td></tr>\n<tr><td>remote_file</td><td>path and filename to put into bucket</td></tr>\n</tbody>\n</table>\n<pre><code>{\n\t&quot;namespace&quot;: &quot;staging&quot;,\n\t&quot;bucket_name&quot;: &quot;somebucket&quot;,\n\t&quot;file&quot;: &quot;data://util/somecollection/somefile.txt&quot;,\n\t&quot;remote_file&quot;: &quot;somefolder/somefile.txt&quot;\n}\n</code></pre>\n<h3>Output</h3>\n<p>The URL of the created file (not that it will only be publicly accessible if your bucket is <a href=\"https://www.backblaze.com/blog/b2-for-beginners-inside-the-b2-web-interface/\">set to &quot;Public&quot;</a>)</p>\n<p><code>https://f000.backblazeb2.com/b2api/v2/b2_download_file_by_id?fileId=4_z4caed893f8e6eefd6b690c17_f1106039448e3a8b7_d20181107_m220406_c000_v0001060_t0005</code></p>\n",
                "discoverable_world": true,
                "source_world": true,
                "is_suppressed": false,
                "license": "apl",
                "total_calls": 37,
                "tags": [
                  "Backblaze",
                  "file storage"
                ],
                "runner_id": 5,
                "algorithm_builder_id": 1
              }
            ]
          }
        }
      },
      {
        "request": {
          "url": "/webapi/algorithms/search",
          "method": "GET",
          "headers": {
            "host": "algorithmia.com",
            "connection": "keep-alive",
            "pragma": "no-cache",
            "cache-control": "no-cache",
            "accept": "application/json, text/plain, */*",
            "dnt": "1",
            "x-xsrf-token": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "cors",
            "referer": "https://algorithmia.com/search?q=text",
            "accept-encoding": "gzip, deflate, br",
            "accept-language": "en-US,en;q=0.9",
            "cookie": "ajs_group_id=null; ajs_anonymous_id=%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22; _ga=GA1.2.1872580011.1571235636; _fbp=fb.1.1571235636317.604574724; intercom-id-c9fj6354=01941621-342b-4320-ad75-53826b5a002c; hubspotutk=105fad8a9b12bfed67330a0dbfe12c61; _gid=GA1.2.1843278152.1572282100; __zlcmid=uzie5dAUbB300Y; __hstc=69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3; __hssrc=1; fs_intercom=4655074328608768:4513847218700288; XSRF-TOKEN=0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da; referrer=www.google.com; landing_page=https://algorithmia.com/; signup_session=true; ajs_user_id=%22acunniffe%22; fs_uid=rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636; new-algo-language=scala; _gat=1; __hssc=69686351.5.1572357353053; intercom-session-c9fj6354=L08zdks3K1FOZEs0NngyR2NDQjBxN3VMb1J3dE1QZ0t4N2piYXY5ZmlNWFNVMkxseFhidkxhZ0g4QStWV2hYay0tUUtjQUtFaUZvLzJIZ0drSFdnRjM0UT09--fc3e700881b2cd1507c47ce6533f5b502d54fb7c; ALGO_SESSION=a30111e245168ae3f99b717754696d87884b5c2a-last-access=2019-10-29T14%3A06%3A23.049Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "cookies": {
            "ajs_group_id": "null",
            "ajs_anonymous_id": "%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22",
            "_ga": "GA1.2.1872580011.1571235636",
            "_fbp": "fb.1.1571235636317.604574724",
            "intercom-id-c9fj6354": "01941621-342b-4320-ad75-53826b5a002c",
            "hubspotutk": "105fad8a9b12bfed67330a0dbfe12c61",
            "_gid": "GA1.2.1843278152.1572282100",
            "__zlcmid": "uzie5dAUbB300Y",
            "__hstc": "69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3",
            "__hssrc": "1",
            "fs_intercom": "4655074328608768:4513847218700288",
            "XSRF-TOKEN": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "referrer": "www.google.com",
            "landing_page": "https://algorithmia.com/",
            "signup_session": "true",
            "ajs_user_id": "%22acunniffe%22",
            "fs_uid": "rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636",
            "new-algo-language": "scala",
            "_gat": "1",
            "__hssc": "69686351.5.1572357353053",
            "intercom-session-c9fj6354": "L08zdks3K1FOZEs0NngyR2NDQjBxN3VMb1J3dE1QZ0t4N2piYXY5ZmlNWFNVMkxseFhidkxhZ0g4QStWV2hYay0tUUtjQUtFaUZvLzJIZ0drSFdnRjM0UT09--fc3e700881b2cd1507c47ce6533f5b502d54fb7c",
            "ALGO_SESSION": "a30111e245168ae3f99b717754696d87884b5c2a-last-access=2019-10-29T14%3A06%3A23.049Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "queryParameters": {
            "q": "text"
          }
        },
        "response": {
          "statusCode": 200,
          "headers": {
            "content-encoding": "gzip",
            "content-type": "application/json; charset=utf-8",
            "date": "Tue, 29 Oct 2019 14:06:24 GMT",
            "set-cookie": "ALGO_SESSION=66eefa07ae441ca9cd1014925cac18c04210119b-last-access=2019-10-29T14%3A06%3A24.843Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3; Max-Age=86400; Expires=Wed, 30 Oct 2019 14:06:24 GMT; Path=/; Domain=algorithmia.com; Secure; HTTPOnly",
            "strict-transport-security": "max-age=86400; includeSubDomains",
            "vary": "Accept-Encoding",
            "x-content-type-options": "nosniff",
            "x-frame-options": "DENY",
            "content-length": "2936",
            "connection": "keep-alive"
          },
          "body": {
            "results": [
              {
                "algo_id": 87374,
                "object_id": "algo-bf7023fa-3aad-4513-bfaf-545234333bc9",
                "username": "lucifer05",
                "algoname": "test",
                "algolabel": "test",
                "language": "python2-langpack",
                "card_line": "Overview Provide a short overview of your algorithm.",
                "summary": "<h2>Overview</h2>\n<p><em>Provide a short overview of your algorithm.</em></p>\n<h3>Applicable Scenarios and Problems</h3>\n<p><em>What scenarios or problems would this algorithm work well in?</em></p>\n<h2>Usage</h2>\n<h3>Input</h3>\n<p><em>Describe the input fields for your algorithm. For example:</em></p>\n<table>\n<thead>\n<tr><th>Parameter</th><th>Description</th></tr>\n</thead>\n<tbody>\n<tr><td>field</td><td>Description of field</td></tr>\n</tbody>\n</table>\n<p><em>What data pre-processing would be great to perform on the input before calling this algorithm?</em></p>\n<h3>Output</h3>\n<p><em>Describe the output fields for your algorithm. For example:</em></p>\n<table>\n<thead>\n<tr><th>Parameter</th><th>Description</th></tr>\n</thead>\n<tbody>\n<tr><td>field</td><td>Description of field</td></tr>\n</tbody>\n</table>\n<h2>Examples</h2>\n<p><em>Provide and explain examples of input and output for your algorithm.</em></p>\n",
                "discoverable_world": true,
                "source_world": false,
                "is_suppressed": false,
                "license": "apl",
                "total_calls": 29,
                "tags": [
                  "aaa",
                  "max",
                  "min",
                  "test"
                ],
                "runner_id": 5,
                "algorithm_builder_id": 1
              },
              {
                "algo_id": 33930,
                "object_id": "algo-30622d3c-79d6-4e11-813c-3771b0d257b4",
                "username": "pmcq",
                "algoname": "test",
                "algolabel": "test",
                "language": "python2-langpack",
                "submitted_at": 1461359031000,
                "discoverable_world": true,
                "source_world": true,
                "is_suppressed": false,
                "license": "gpl3",
                "total_calls": 25,
                "runner_id": 5
              },
              {
                "algo_id": 129139,
                "object_id": "algo-8674b29f-b740-4081-b2c0-2b46ae0f0493",
                "username": "notbanker",
                "algoname": "Next",
                "algolabel": "Next",
                "language": "python3-1",
                "tag_line": "Return next value",
                "discoverable_world": true,
                "source_world": false,
                "is_suppressed": false,
                "license": "apl",
                "total_calls": 15,
                "runner_id": 5,
                "algorithm_builder_id": 1
              },
              {
                "algo_id": 70993,
                "object_id": "algo-c64d3985-2f5a-4c05-b1f9-ac656d7b405e",
                "username": "erniu",
                "algoname": "test",
                "algolabel": "test",
                "language": "python3-1",
                "discoverable_world": true,
                "source_world": true,
                "is_suppressed": false,
                "license": "apl",
                "total_calls": 4,
                "runner_id": 5
              },
              {
                "algo_id": 97156,
                "object_id": "algo-94b7a032-3fd5-45ec-a67f-d1f489176945",
                "username": "kartikeyakirar",
                "algoname": "test",
                "algolabel": "test",
                "language": "r",
                "discoverable_world": true,
                "source_world": false,
                "is_suppressed": false,
                "license": "apl",
                "total_calls": 3,
                "runner_id": 6,
                "algorithm_builder_id": 9
              },
              {
                "algo_id": 129660,
                "object_id": "algo-dc4d8a06-788c-4729-95dd-f73ae76c1fa3",
                "username": "conjointly",
                "algoname": "textclassifier",
                "algolabel": "textclassifier",
                "language": "r",
                "tag_line": "Simple text classification test",
                "discoverable_world": true,
                "source_world": false,
                "is_suppressed": false,
                "license": "apl",
                "total_calls": 7,
                "runner_id": 5,
                "algorithm_builder_id": 9
              },
              {
                "algo_id": 70532,
                "object_id": "algo-b54c4a79-8789-4d26-8529-f0f546f8fd15",
                "username": "ramamoorthygi",
                "algoname": "test",
                "algolabel": "test",
                "language": "java4",
                "tag_line": "testing",
                "card_line": "testing",
                "summary": "<h2>Overview</h2>\n<p>Test</p>\n<h2>Usage</h2>\n<h3>Input</h3>\n<p><em>Describe the input fields for your algorithm. For example:</em></p>\n<table>\n<thead>\n<tr><th>Parameter</th><th>Description</th></tr>\n</thead>\n<tbody>\n<tr><td>field</td><td>Description of field</td></tr>\n</tbody>\n</table>\n<h3>Output</h3>\n<p><em>Describe the output fields for your algorithm. For example:</em></p>\n<table>\n<thead>\n<tr><th>Parameter</th><th>Description</th></tr>\n</thead>\n<tbody>\n<tr><td>field</td><td>Description of field</td></tr>\n</tbody>\n</table>\n<h2>Examples</h2>\n<p><em>Provide and explain examples of input and output for your algorithm.</em></p>\n<pre><code>{\n    &quot;field&quot;: &quot;value&quot;\n}\n</code></pre>\n",
                "discoverable_world": true,
                "source_world": true,
                "is_suppressed": false,
                "license": "apl",
                "total_calls": 109,
                "tags": [
                  "testing"
                ],
                "runner_id": 5
              },
              {
                "algo_id": 94969,
                "object_id": "algo-f8e1a9d4-8037-46ab-a6b7-b3ddc4a55e6d",
                "username": "cretest",
                "algoname": "test",
                "algolabel": "test",
                "language": "java",
                "discoverable_world": true,
                "source_world": true,
                "is_suppressed": false,
                "license": "apl",
                "total_calls": 65,
                "runner_id": 5,
                "algorithm_builder_id": 1
              },
              {
                "algo_id": 105149,
                "object_id": "algo-d872254f-ec04-4445-9f84-6cf4e620c237",
                "username": "j4024437",
                "algoname": "test",
                "algolabel": "test",
                "language": "python3-1",
                "discoverable_world": true,
                "source_world": false,
                "is_suppressed": false,
                "license": "apl",
                "total_calls": 39,
                "runner_id": 5,
                "algorithm_builder_id": 1
              },
              {
                "algo_id": 94328,
                "object_id": "algo-e9303ffe-51bf-408d-be1c-1924240de0fa",
                "username": "taiyakikun",
                "algoname": "test",
                "algolabel": "test",
                "language": "java",
                "discoverable_world": true,
                "source_world": true,
                "is_suppressed": false,
                "license": "apl",
                "total_calls": 25,
                "runner_id": 5,
                "algorithm_builder_id": 1
              },
              {
                "algo_id": 40564,
                "object_id": "algo-b12afa4e-3670-4285-b95a-49492e51e9aa",
                "username": "TOSHISTATS",
                "algoname": "Test",
                "algolabel": "Test",
                "language": "python2-langpack",
                "discoverable_world": true,
                "source_world": true,
                "is_suppressed": false,
                "license": "apl",
                "total_calls": 14,
                "runner_id": 5
              },
              {
                "algo_id": 87793,
                "object_id": "algo-54c1466d-ef41-4ee7-ab43-ebc8602840a2",
                "username": "behrica",
                "algoname": "test",
                "algolabel": "test",
                "language": "java",
                "discoverable_world": true,
                "source_world": true,
                "is_suppressed": false,
                "license": "apl",
                "total_calls": 8,
                "runner_id": 5,
                "algorithm_builder_id": 1
              },
              {
                "algo_id": 57051,
                "object_id": "algo-6d25693e-3743-4a4f-a37c-e149ba386c62",
                "username": "csong27",
                "algoname": "Test",
                "algolabel": "Test",
                "language": "python2-langpack",
                "discoverable_world": true,
                "source_world": false,
                "is_suppressed": false,
                "license": "apl",
                "total_calls": 7,
                "runner_id": 5
              },
              {
                "algo_id": 34981,
                "object_id": "algo-498ec5fd-8eb8-41a2-a1d3-ff9b9f271345",
                "username": "oa",
                "algoname": "Test",
                "algolabel": "Test",
                "language": "java4",
                "discoverable_world": true,
                "source_world": true,
                "is_suppressed": false,
                "license": "apl",
                "total_calls": 4,
                "runner_id": 5
              },
              {
                "algo_id": 91829,
                "object_id": "algo-a6af3fe0-9455-4df2-b9fa-7ac14bf9a1c5",
                "username": "ambarish",
                "algoname": "test",
                "algolabel": "test",
                "language": "java",
                "card_line": "This is Ed's test",
                "summary": "<p>This is Ed's test</p>\n",
                "discoverable_world": true,
                "source_world": true,
                "is_suppressed": false,
                "license": "apl",
                "total_calls": 3,
                "runner_id": 5,
                "algorithm_builder_id": 1
              },
              {
                "algo_id": 4304,
                "object_id": "95c04f73-b2a5-11e4-840d-12f53eafe9d2",
                "username": "tea",
                "algoname": "test",
                "algolabel": "test",
                "language": "java3",
                "submitted_at": 1445290564000,
                "discoverable_world": true,
                "source_world": true,
                "is_suppressed": false,
                "license": "apl",
                "total_calls": 2,
                "runner_id": 5
              },
              {
                "algo_id": 44025,
                "object_id": "algo-258617bf-1ee9-4d06-924a-e575f112deb7",
                "username": "PetiteProgrammer",
                "algoname": "TextSimilarity",
                "algolabel": "Text Similarity",
                "language": "python3-1",
                "tag_line": "Find the most similar text files within a collection of documents",
                "card_line": "Find the most similar text files within a collection of documents",
                "summary": "<p>This algorithm will compare documents (can be any kind of document) and report which documents are the most similar.<br/><br/>Some examples this algorithm could be used for:<br/></p><ul><li>Plagiarism detection (natural language, programming source, etc.)</li><li>Removal of similar copies within some directory</li><li>Analysis and clustering of documents.</li></ul><h1>Example</h1><p>Input:</p><pre>{&#10;    &#34;files&#34;: [&#10;        [&#34;doc1&#34;, &#34;this is an example input&#34;],&#10;        [&#34;doc2&#34;, &#34;this is another example input&#34;],&#10;        [&#34;doc3&#34;, &#34;the third document is not like the others&#34;]&#10;    ]&#10;}<br/></pre><p>Output:</p><pre>[&#10;    [0.6825611979794738, &#34;doc1&#34;, &#34;doc2&#34;],&#10;    [0.1303428532021814, &#34;doc2&#34;, &#34;doc3&#34;],&#10;    [0.05714684431258296, &#34;doc1&#34;, &#34;doc3&#34;]&#10;]<br/></pre><h1><br/></h1><h1>Input</h1><pre>argument      type                 description&#10;&#10;files         [[String, String]]   list of document id's and document content&#10;num_results   Int (optional)       number of results, default = 100 (less if less document pairs can be computed)</pre><p><br/></p><h1>Output</h1><p>[[Float, String, String]]: Similarity value, document id 1, document id 2.<br/><br/></p><p><br/></p>",
                "discoverable_world": true,
                "source_world": false,
                "is_suppressed": false,
                "license": "apl",
                "total_calls": 98450,
                "tags": [
                  "data transformation",
                  "filter",
                  "machine learning",
                  "natural language",
                  "nlp",
                  "text analysis",
                  "utilities"
                ],
                "runner_id": 5
              },
              {
                "algo_id": 2729,
                "object_id": "fc774cec-983a-11e4-be78-12e1fbfbf82c",
                "username": "util",
                "algoname": "ExtractText",
                "algolabel": "Extract Text",
                "language": "java3",
                "tag_line": "Extracts text from a given file",
                "card_line": "Extracts text from a given file",
                "summary": "Extracts text from a given file. Supported formats include Office documents (Word, Powerpoint, etc), HTML, XML, PDF, RTF, etc. For more information on supported formats, please take a look at <a href=\"http://tika.apache.org/1.4/formats.html\">Apache Tika's documentation page</a>.<div><br/></div><div>This algorithm handles any URL, be it from the Data API or the URL to a file on the internet.</div>",
                "submitted_at": 1459875305000,
                "discoverable_world": true,
                "source_world": true,
                "is_suppressed": false,
                "license": "apl",
                "total_calls": 10208,
                "tags": [
                  "text extraction",
                  "utilities"
                ],
                "runner_id": 5
              },
              {
                "algo_id": 34768,
                "object_id": "algo-a34a9349-b4c8-4fb5-b19f-168a28a056b7",
                "username": "kerem",
                "algoname": "TransliterateText",
                "algolabel": "Transliterate Text",
                "language": "ruby",
                "tag_line": "Replace accented characters with ASCII",
                "card_line": "Replace accented characters with ASCII",
                "summary": "<p style=\"color: rgb(51, 51, 51);\"><strong></strong><b>Replace accented characters with ASCII<br/></b><br/>For example:</p><pre style=\"background-color: rgb(247, 247, 247);color: rgb(51, 51, 51);\"><span class=\"pl-s\" style=\"color: rgb(24, 54, 145);\">Le cœur de la crémiére</span></pre><p style=\"color: rgb(51, 51, 51);\">Will output:</p><pre style=\"background-color: rgb(247, 247, 247);color: rgb(51, 51, 51);\"><span style=\"background-color: transparent;color: inherit;\">Le coeur de la cremiere</span><br/></pre>",
                "discoverable_world": true,
                "source_world": false,
                "is_suppressed": false,
                "license": "apl",
                "total_calls": 15,
                "tags": [
                  "ascii",
                  "text processing",
                  "transliterate"
                ],
                "runner_id": 5
              },
              {
                "algo_id": 126010,
                "object_id": "algo-c7887fc6-9a2b-4d6f-8aec-30948d8f607f",
                "username": "conradho",
                "algoname": "TokenizeText",
                "algolabel": "Tokenize Text",
                "language": "python3-1",
                "tag_line": "",
                "discoverable_world": true,
                "source_world": true,
                "is_suppressed": false,
                "license": "apl",
                "total_calls": 4,
                "runner_id": 6,
                "algorithm_builder_id": 1
              }
            ]
          }
        }
      },
      {
        "request": {
          "url": "/webapi/categories",
          "method": "GET",
          "headers": {
            "host": "algorithmia.com",
            "connection": "keep-alive",
            "pragma": "no-cache",
            "cache-control": "no-cache",
            "accept": "application/json, text/plain, */*",
            "dnt": "1",
            "x-xsrf-token": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "cors",
            "referer": "https://algorithmia.com/search?q=text",
            "accept-encoding": "gzip, deflate, br",
            "accept-language": "en-US,en;q=0.9",
            "cookie": "ajs_group_id=null; ajs_anonymous_id=%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22; _ga=GA1.2.1872580011.1571235636; _fbp=fb.1.1571235636317.604574724; intercom-id-c9fj6354=01941621-342b-4320-ad75-53826b5a002c; hubspotutk=105fad8a9b12bfed67330a0dbfe12c61; _gid=GA1.2.1843278152.1572282100; __zlcmid=uzie5dAUbB300Y; __hstc=69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3; __hssrc=1; fs_intercom=4655074328608768:4513847218700288; XSRF-TOKEN=0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da; referrer=www.google.com; landing_page=https://algorithmia.com/; signup_session=true; ajs_user_id=%22acunniffe%22; fs_uid=rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636; new-algo-language=scala; __hssc=69686351.5.1572357353053; intercom-session-c9fj6354=L08zdks3K1FOZEs0NngyR2NDQjBxN3VMb1J3dE1QZ0t4N2piYXY5ZmlNWFNVMkxseFhidkxhZ0g4QStWV2hYay0tUUtjQUtFaUZvLzJIZ0drSFdnRjM0UT09--fc3e700881b2cd1507c47ce6533f5b502d54fb7c; ALGO_SESSION=66eefa07ae441ca9cd1014925cac18c04210119b-last-access=2019-10-29T14%3A06%3A24.843Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "cookies": {
            "ajs_group_id": "null",
            "ajs_anonymous_id": "%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22",
            "_ga": "GA1.2.1872580011.1571235636",
            "_fbp": "fb.1.1571235636317.604574724",
            "intercom-id-c9fj6354": "01941621-342b-4320-ad75-53826b5a002c",
            "hubspotutk": "105fad8a9b12bfed67330a0dbfe12c61",
            "_gid": "GA1.2.1843278152.1572282100",
            "__zlcmid": "uzie5dAUbB300Y",
            "__hstc": "69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3",
            "__hssrc": "1",
            "fs_intercom": "4655074328608768:4513847218700288",
            "XSRF-TOKEN": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "referrer": "www.google.com",
            "landing_page": "https://algorithmia.com/",
            "signup_session": "true",
            "ajs_user_id": "%22acunniffe%22",
            "fs_uid": "rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636",
            "new-algo-language": "scala",
            "__hssc": "69686351.5.1572357353053",
            "intercom-session-c9fj6354": "L08zdks3K1FOZEs0NngyR2NDQjBxN3VMb1J3dE1QZ0t4N2piYXY5ZmlNWFNVMkxseFhidkxhZ0g4QStWV2hYay0tUUtjQUtFaUZvLzJIZ0drSFdnRjM0UT09--fc3e700881b2cd1507c47ce6533f5b502d54fb7c",
            "ALGO_SESSION": "66eefa07ae441ca9cd1014925cac18c04210119b-last-access=2019-10-29T14%3A06%3A24.843Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "queryParameters": {}
        },
        "response": {
          "statusCode": 200,
          "headers": {
            "content-encoding": "gzip",
            "content-type": "application/json; charset=utf-8",
            "date": "Tue, 29 Oct 2019 14:06:29 GMT",
            "set-cookie": "ALGO_SESSION=024e61a7adf120754eb69171fd0ea0cc2d16fc6c-last-access=2019-10-29T14%3A06%3A29.578Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3; Max-Age=86400; Expires=Wed, 30 Oct 2019 14:06:29 GMT; Path=/; Domain=algorithmia.com; Secure; HTTPOnly",
            "strict-transport-security": "max-age=86400; includeSubDomains",
            "vary": "Accept-Encoding",
            "x-content-type-options": "nosniff",
            "x-frame-options": "DENY",
            "content-length": "3235",
            "connection": "keep-alive"
          },
          "body": {
            "categories": [
              {
                "tag": "text analysis",
                "title": "Text Analysis",
                "tagline": "Make sense of unstructured text",
                "summary": "<p>Text Analysis or Natural Language Processing (NLP) is a way for computers to analyze, understand, and derive meaning from human language in a smart and useful way. By utilizing NLP, developers can organize and structure knowledge to perform tasks such as automatic summarization, translation, named entity recognition, relationship extraction, <a href=\"https://blog.algorithmia.com/introduction-sentiment-analysis/\" target=\"_blank\" rel=\"nofollow\">sentiment analysis</a>, speech recognition, and topic segmentation. <strong>Read: <a href=\"https://blog.algorithmia.com/introduction-natural-language-processing-nlp/\" target=\"_blank\" rel=\"nofollow\">Introduction to Natural Language Processing</a></strong></p>\n<h2 id=\"interactive-demos-\">Interactive Demos:</h2>\n<ul>\n<li><a href=\"https://algorithmia.com/algorithms/deeplearning/Parsey#console\" target=\"_blank\" rel=\"nofollow\">Parse Sentences</a></li>\n<li><a href=\"https://algorithmia.com/algorithms/nlp/SentimentAnalysis#console\" target=\"_blank\" rel=\"nofollow\">Analyze the Sentiment of a Text</a> (interactive console at bottom)</li>\n</ul>\n<h2 id=\"recipes-\">Recipes:</h2>\n<ul>\n<li><a href=\"https://algorithmia.com/developers/tutorials/recipes/language_detector/\" target=\"_blank\" rel=\"nofollow\">Categorize your documents by the text's natural language</a></li>\n<li><a href=\"https://algorithmia.com/developers/tutorials/recipes/topic_modeling_lda/\" target=\"_blank\" rel=\"nofollow\">Classify documents to topics</a></li>\n<li><a href=\"https://algorithmia.com/developers/tutorials/recipes/site_crawler_analyzer/\" target=\"_blank\" rel=\"nofollow\">Crawl, scrape, and analyze websites</a></li>\n<li><a href=\"https://algorithmia.com/developers/tutorials/recipes/named_entity_recognition/\" target=\"_blank\" rel=\"nofollow\">Named entities of Tweets</a></li>\n<li><a href=\"https://algorithmia.com/developers/tutorials/recipes/sentiment_web_scraping/\" target=\"_blank\" rel=\"nofollow\">Sentiment Analysis Pipeline</a></li>\n<li><a href=\"https://algorithmia.com/developers/tutorials/recipes/summarize_slideshow_presentations/\" target=\"_blank\" rel=\"nofollow\">Summarize a slideshow presentation</a></li>\n</ul>\n",
                "icon": "/public/categories/synapse/text-analysis.svg",
                "position": 1
              },
              {
                "tag": "machine learning",
                "title": "Machine Learning",
                "tagline": "Teach your app to teach itself",
                "summary": "<p>Machine learning is a set of mathematical approaches to teaching computers to learn based on large quantities of data, instead of human step by step instruction. There are many categories of Machine Learning including <a href=\"https://blog.algorithmia.com/introduction-natural-language-processing-nlp/\" target=\"_blank\" rel=\"nofollow\">Natural Language Processing</a>, <a href=\"https://algorithmia.com/tags/computer-vision\" target=\"_blank\" rel=\"nofollow\">Computer Vision</a>, <a href=\"https://algorithmia.com/tags/time-series\" target=\"_blank\" rel=\"nofollow\">Time Series</a>, and more.</p>\n<h2 id=\"demos-\">Demos:</h2>\n<ul>\n<li><p><a href=\"http://demos.algorithmia.com/video-metadata/\" target=\"_blank\" rel=\"nofollow\">Search the content within any video</a></p>\n</li>\n<li><p><a href=\"http://demos.algorithmia.com/colorize-photos/\" target=\"_blank\" rel=\"nofollow\">Colorize a Black and White Photo</a></p>\n</li>\n<li><a href=\"https://algorithmia.com/use-cases\" target=\"_blank\" rel=\"nofollow\">The whole Machine Learning demo gallery</a> :)</li>\n</ul>\n",
                "icon": "/public/categories/synapse/machine-learning.svg",
                "position": 2
              },
              {
                "tag": "computer vision",
                "title": "Computer Vision",
                "tagline": "Identify objects in images",
                "summary": "<p>Computer Vision gives us the ability to teach a computer to make meaning of the physical world through vision. These tools allow us to develop applications that can make meaning from the input of cameras, photos, and videos to mind-bending degrees. <strong>Read more: <a href=\"https://blog.algorithmia.com/introduction-computer-vision/\" target=\"_blank\" rel=\"nofollow\">Introduction to Computer Vision</a></strong></p>\n<h2 id=\"computer-vision-demos-\">Computer Vision Demos:</h2>\n<ul>\n<li><a href=\"http://demos.algorithmia.com/image-tagger\" target=\"_blank\" rel=\"nofollow\">Automatic Image Tagging and Object Detection</a></li>\n<li><a href=\"http://demos.algorithmia.com/isitnude/\" target=\"_blank\" rel=\"nofollow\">Nudity Detection</a></li>\n</ul>\n<h2 id=\"tutorials-\">Tutorials:</h2>\n<ul>\n<li><p><a href=\"https://blog.algorithmia.com/censoring-faces-automatically/\" target=\"_blank\" rel=\"nofollow\">Censoring Faces Automatically</a></p>\n</li>\n<li><p><a href=\"https://blog.algorithmia.com/introduction-to-horizon-line-estimation/\" target=\"_blank\" rel=\"nofollow\">Horizon line estimation</a></p>\n</li>\n</ul>\n",
                "icon": "/public/categories/synapse/computer-vision.svg",
                "position": 3
              },
              {
                "tag": "deep learning",
                "title": "Deep Learning",
                "tagline": "Learn from your data",
                "summary": "<p><strong>New to Deep Learning?</strong> Check our our gentle <a href=\"http://blog.algorithmia.com/introduction-to-deep-learning-2016/\" target=\"_blank\" rel=\"nofollow\">introduction to deep learning</a>. </p>\n<p>More about deep learning: </p>\n<ul>\n<li><a href=\"http://blog.algorithmia.com/ai-why-deep-learning-matters/\" target=\"_blank\" rel=\"nofollow\">Why Deep Learning Matters and What’s Next for Artificial Intelligence</a> </li>\n<li><a href=\"http://blog.algorithmia.com/deploying-deep-learning-cloud-services/\" target=\"_blank\" rel=\"nofollow\">Lessons Learned from Deploying Deep Learning at Scale</a> </li>\n<li><a href=\"http://blog.algorithmia.com/cloud-hosted-deep-learning-models/\" target=\"_blank\" rel=\"nofollow\">Turn Your Deep Learning Model into a Serverless Microservice </a></li>\n</ul>\n<p><strong>Want to host your deep learning model as a microservice?</strong> Check our our guides for hosting your <a href=\"https://algorithmia.com/developers/algorithm-development/model-guides/theano/\" target=\"_blank\" rel=\"nofollow\">Theano</a>, <a href=\"https://algorithmia.com/developers/algorithm-development/model-guides/tensorflow/\" target=\"_blank\" rel=\"nofollow\">TensorFlow</a>, and <a href=\"https://algorithmia.com/developers/algorithm-development/model-guides/caffe/\" target=\"_blank\" rel=\"nofollow\">Caffe</a> models as scalable REST APIs.</p>\n",
                "icon": "/public/categories/synapse/deep-learning.svg",
                "position": 4
              },
              {
                "tag": "utilities",
                "title": "Utilities",
                "tagline": "Ready to use microservices",
                "summary": "",
                "icon": "/public/categories/synapse/utilities.svg",
                "position": 5
              },
              {
                "tag": "microservices",
                "title": "Microservices",
                "tagline": "Serverless and simple",
                "summary": "<p><a href=\"https://blog.algorithmia.com/introduction-to-serverless-microservices/\" target=\"\">Microservices</a> are a software architecture that allows for highly elastic and scalable computing, and AI is the killer app for microservices. In our AI marketplace, you can choose from thousands of ML models and algorithms and utilize them as much or as little as you need. </p>",
                "position": 6
              },
              {
                "tag": "web",
                "title": "Web Tools",
                "tagline": "Composable tools you need",
                "summary": "<p>Sometimes, all you need to do is extract some simple information from publicly available sources: for example, finding all the email addresses of a company’s C-Suite, or summarizing the topic pages of a FAQ. You could accomplish some of it with a Python script and some RegEx magic, but now it's even easier with the power of serverless microservices </p><h2>Interactive Demos:</h2><ul><li><a href=\"http://demos.algorithmia.com/web-page-inspector/\" target=\"\">Retrieve and clean structured data from any URL</a></li><li><a href=\"http://demos.algorithmia.com/sitemap/\" target=\"\">How to crawl a site and map its links</a></li></ul><h2>Tutorials:</h2><p></p><ul><li><a href=\"https://blog.algorithmia.com/rapidly-extract-information-from-public-websites/\" target=\"\">Rapidly Extract Information from Public Websites</a></li></ul><p></p>",
                "position": 7
              },
              {
                "tag": "time series",
                "title": "Time Series",
                "tagline": "Predicting future results",
                "summary": "<p>Time Series Analysis uses a set of powerful statistical and machine learning tools for predicting future events based on past data.<b> Read more: <a href=\"http://blog.algorithmia.com/sentiment-time-series-analysis/\">Understanding customer data using time series analysis</a>. </b></p><h3>Interactive Time Series Demos</h3><ul><li><a href=\"http://demos.algorithmia.com/timeseries/\" target=\"\">Time Series Analysis</a></li></ul><h3>Time Series Tutorials</h3><ul><li><a href=\"http://blog.algorithmia.com/predictive-algorithms-track-real-time-health-trends/\">Using predictive time series algorithms to track real-time health trends</a></li><li><a href=\"http://blog.algorithmia.com/forecast-sentiment-analysis-with-r/\">Use R to build a sentiment analysis forecasting pipeline</a></li></ul>",
                "position": 8
              },
              {
                "tag": "sentiment analysis",
                "title": "Sentiment Analysis",
                "tagline": "Tools to determine the attitude of content",
                "summary": "<p><a href=\"https://algorithmia.com/algorithms/nlp/SentimentAnalysis\" target=\"_blank\" rel=\"nofollow\">Sentiment Analysis</a> is the use of natural language processing, statistics, and text analysis to extract and identify the sentiment of text into positive, negative, or neutral categories. We often see sentiment analysis used to arrive at a binary decision: somebody is either for or against something, users like or dislike something, or the product is good or bad. <strong>Read: <a href=\"https://blog.algorithmia.com/introduction-sentiment-analysis-algorithms/\" target=\"_blank\" rel=\"nofollow\">Introduction to Sentiment Analysis Algorithms Article</a></strong></p>\n<h3 id=\"sentiment-analysis-interactive-demos-\">Sentiment Analysis Interactive Demos:</h3>\n<ul>\n<li><p><a href=\"http://demos.algorithmia.com/web-page-inspector/\" target=\"_blank\" rel=\"nofollow\">Web Page Inspector</a></p>\n</li>\n<li><p><a href=\"http://demos.algorithmia.com/rss-dashboard/\" target=\"_blank\" rel=\"nofollow\">RSS Dashboard</a></p>\n</li>\n</ul>\n<h3 id=\"sentiment-analysis-span-id-selectionboundary_1507670991399_25412472751733106-class-rangyselectionboundary-span-tutorials-\">Sentiment Analysis ﻿TUTORIALS:</h3>\n<ul>\n<li><p><a href=\"https://blog.algorithmia.com/building-an-emotionally-aware-chatbot/\" target=\"_blank\" rel=\"nofollow\">Build an Emotionally-Aware Chatbot</a></p>\n</li>\n<li><p><a href=\"https://blog.algorithmia.com/anaylze-tweets-topic-sentiment-analysis/\" target=\"_blank\" rel=\"nofollow\">Introduction to Twitter Topic and Sentiment Analysis</a></p>\n</li>\n<li><p><a href=\"https://blog.algorithmia.com/sentiment-analysis-pipeline-for-web-scraping/\" target=\"_blank\" rel=\"nofollow\">Building a Sentiment Analysis Pipeline for Web Scraping</a></p>\n</li>\n<li><p><a href=\"https://blog.algorithmia.com/sentiment-analysis-tool-api-social-media/\" target=\"_blank\" rel=\"nofollow\">How to Add Sentiment Analysis to Your Project in Five Lines of Code</a></p>\n</li>\n</ul>\n",
                "icon": "/assets/images/categories/default.png",
                "position": 9
              }
            ]
          }
        }
      },
      {
        "request": {
          "url": "/webapi/users/acunniffe/algorithms",
          "method": "GET",
          "headers": {
            "host": "algorithmia.com",
            "connection": "keep-alive",
            "pragma": "no-cache",
            "cache-control": "no-cache",
            "accept": "application/json, text/plain, */*",
            "dnt": "1",
            "x-xsrf-token": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "cors",
            "referer": "https://algorithmia.com/algorithms",
            "accept-encoding": "gzip, deflate, br",
            "accept-language": "en-US,en;q=0.9",
            "cookie": "ajs_group_id=null; ajs_anonymous_id=%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22; _ga=GA1.2.1872580011.1571235636; _fbp=fb.1.1571235636317.604574724; intercom-id-c9fj6354=01941621-342b-4320-ad75-53826b5a002c; hubspotutk=105fad8a9b12bfed67330a0dbfe12c61; _gid=GA1.2.1843278152.1572282100; __zlcmid=uzie5dAUbB300Y; __hstc=69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3; __hssrc=1; fs_intercom=4655074328608768:4513847218700288; XSRF-TOKEN=0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da; referrer=www.google.com; landing_page=https://algorithmia.com/; signup_session=true; ajs_user_id=%22acunniffe%22; fs_uid=rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636; new-algo-language=scala; __hssc=69686351.5.1572357353053; intercom-session-c9fj6354=L08zdks3K1FOZEs0NngyR2NDQjBxN3VMb1J3dE1QZ0t4N2piYXY5ZmlNWFNVMkxseFhidkxhZ0g4QStWV2hYay0tUUtjQUtFaUZvLzJIZ0drSFdnRjM0UT09--fc3e700881b2cd1507c47ce6533f5b502d54fb7c; ALGO_SESSION=024e61a7adf120754eb69171fd0ea0cc2d16fc6c-last-access=2019-10-29T14%3A06%3A29.578Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "cookies": {
            "ajs_group_id": "null",
            "ajs_anonymous_id": "%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22",
            "_ga": "GA1.2.1872580011.1571235636",
            "_fbp": "fb.1.1571235636317.604574724",
            "intercom-id-c9fj6354": "01941621-342b-4320-ad75-53826b5a002c",
            "hubspotutk": "105fad8a9b12bfed67330a0dbfe12c61",
            "_gid": "GA1.2.1843278152.1572282100",
            "__zlcmid": "uzie5dAUbB300Y",
            "__hstc": "69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3",
            "__hssrc": "1",
            "fs_intercom": "4655074328608768:4513847218700288",
            "XSRF-TOKEN": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "referrer": "www.google.com",
            "landing_page": "https://algorithmia.com/",
            "signup_session": "true",
            "ajs_user_id": "%22acunniffe%22",
            "fs_uid": "rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636",
            "new-algo-language": "scala",
            "__hssc": "69686351.5.1572357353053",
            "intercom-session-c9fj6354": "L08zdks3K1FOZEs0NngyR2NDQjBxN3VMb1J3dE1QZ0t4N2piYXY5ZmlNWFNVMkxseFhidkxhZ0g4QStWV2hYay0tUUtjQUtFaUZvLzJIZ0drSFdnRjM0UT09--fc3e700881b2cd1507c47ce6533f5b502d54fb7c",
            "ALGO_SESSION": "024e61a7adf120754eb69171fd0ea0cc2d16fc6c-last-access=2019-10-29T14%3A06%3A29.578Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "queryParameters": {}
        },
        "response": {
          "statusCode": 200,
          "headers": {
            "cache-control": "no-cache, no-store",
            "content-encoding": "gzip",
            "content-type": "application/json; charset=utf-8",
            "date": "Tue, 29 Oct 2019 14:06:29 GMT",
            "set-cookie": "ALGO_SESSION=577d6d8679f16edf359b500f9e872b8e4625a1ff-last-access=2019-10-29T14%3A06%3A29.639Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3; Max-Age=86400; Expires=Wed, 30 Oct 2019 14:06:29 GMT; Path=/; Domain=algorithmia.com; Secure; HTTPOnly",
            "strict-transport-security": "max-age=86400; includeSubDomains",
            "vary": "Accept-Encoding",
            "x-content-type-options": "nosniff",
            "x-frame-options": "DENY",
            "content-length": "169",
            "connection": "keep-alive"
          },
          "body": [
            {
              "username": "acunniffe",
              "algoname": "example_test",
              "algolabel": "example_test",
              "card_line": null,
              "total_calls": 999
            },
            {
              "username": "acunniffe",
              "algoname": "Hello",
              "algolabel": "Hello World",
              "card_line": "A simple \"Hello World\" algorithm, which returns \"Hello \" + the algorithm input.",
              "total_calls": 999
            }
          ]
        }
      },
      {
        "request": {
          "url": "/users/acunniffe/algorithms/starred",
          "method": "GET",
          "headers": {
            "host": "algorithmia.com",
            "connection": "keep-alive",
            "pragma": "no-cache",
            "cache-control": "no-cache",
            "accept": "application/json, text/plain, */*",
            "dnt": "1",
            "x-xsrf-token": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "cors",
            "referer": "https://algorithmia.com/algorithms",
            "accept-encoding": "gzip, deflate, br",
            "accept-language": "en-US,en;q=0.9",
            "cookie": "ajs_group_id=null; ajs_anonymous_id=%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22; _ga=GA1.2.1872580011.1571235636; _fbp=fb.1.1571235636317.604574724; intercom-id-c9fj6354=01941621-342b-4320-ad75-53826b5a002c; hubspotutk=105fad8a9b12bfed67330a0dbfe12c61; _gid=GA1.2.1843278152.1572282100; __zlcmid=uzie5dAUbB300Y; __hstc=69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3; __hssrc=1; fs_intercom=4655074328608768:4513847218700288; XSRF-TOKEN=0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da; referrer=www.google.com; landing_page=https://algorithmia.com/; signup_session=true; ajs_user_id=%22acunniffe%22; fs_uid=rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636; new-algo-language=scala; __hssc=69686351.5.1572357353053; intercom-session-c9fj6354=L08zdks3K1FOZEs0NngyR2NDQjBxN3VMb1J3dE1QZ0t4N2piYXY5ZmlNWFNVMkxseFhidkxhZ0g4QStWV2hYay0tUUtjQUtFaUZvLzJIZ0drSFdnRjM0UT09--fc3e700881b2cd1507c47ce6533f5b502d54fb7c; ALGO_SESSION=024e61a7adf120754eb69171fd0ea0cc2d16fc6c-last-access=2019-10-29T14%3A06%3A29.578Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "cookies": {
            "ajs_group_id": "null",
            "ajs_anonymous_id": "%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22",
            "_ga": "GA1.2.1872580011.1571235636",
            "_fbp": "fb.1.1571235636317.604574724",
            "intercom-id-c9fj6354": "01941621-342b-4320-ad75-53826b5a002c",
            "hubspotutk": "105fad8a9b12bfed67330a0dbfe12c61",
            "_gid": "GA1.2.1843278152.1572282100",
            "__zlcmid": "uzie5dAUbB300Y",
            "__hstc": "69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3",
            "__hssrc": "1",
            "fs_intercom": "4655074328608768:4513847218700288",
            "XSRF-TOKEN": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "referrer": "www.google.com",
            "landing_page": "https://algorithmia.com/",
            "signup_session": "true",
            "ajs_user_id": "%22acunniffe%22",
            "fs_uid": "rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636",
            "new-algo-language": "scala",
            "__hssc": "69686351.5.1572357353053",
            "intercom-session-c9fj6354": "L08zdks3K1FOZEs0NngyR2NDQjBxN3VMb1J3dE1QZ0t4N2piYXY5ZmlNWFNVMkxseFhidkxhZ0g4QStWV2hYay0tUUtjQUtFaUZvLzJIZ0drSFdnRjM0UT09--fc3e700881b2cd1507c47ce6533f5b502d54fb7c",
            "ALGO_SESSION": "024e61a7adf120754eb69171fd0ea0cc2d16fc6c-last-access=2019-10-29T14%3A06%3A29.578Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "queryParameters": {}
        },
        "response": {
          "statusCode": 200,
          "headers": {
            "content-encoding": "gzip",
            "content-type": "application/json; charset=utf-8",
            "date": "Tue, 29 Oct 2019 14:06:29 GMT",
            "set-cookie": "ALGO_SESSION=2cd446a386d9388faea49709126134ba724cb706-last-access=2019-10-29T14%3A06%3A29.784Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3; Max-Age=86400; Expires=Wed, 30 Oct 2019 14:06:29 GMT; Path=/; Domain=algorithmia.com; Secure; HTTPOnly",
            "strict-transport-security": "max-age=86400; includeSubDomains",
            "vary": "Accept-Encoding",
            "x-content-type-options": "nosniff",
            "x-frame-options": "DENY",
            "content-length": "222",
            "connection": "keep-alive"
          },
          "body": [
            {
              "algo_id": 130237,
              "object_id": "algo-533a1908-4277-4d30-bd0b-07bf2cd88517",
              "username": "acunniffe",
              "algoname": "example_test",
              "algolabel": "example_test",
              "language": "scala",
              "tag_line": "",
              "discoverable_world": false,
              "source_world": false,
              "is_suppressed": false,
              "license": "apl",
              "total_calls": 0,
              "runner_id": 5,
              "algorithm_builder_id": 1
            }
          ]
        }
      },
      {
        "request": {
          "url": "/meta/algorithms",
          "method": "GET",
          "headers": {
            "host": "algorithmia.com",
            "connection": "keep-alive",
            "pragma": "no-cache",
            "cache-control": "no-cache",
            "accept": "application/json, text/plain, */*",
            "dnt": "1",
            "x-xsrf-token": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "cors",
            "referer": "https://algorithmia.com/algorithms",
            "accept-encoding": "gzip, deflate, br",
            "accept-language": "en-US,en;q=0.9",
            "cookie": "ajs_group_id=null; ajs_anonymous_id=%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22; _ga=GA1.2.1872580011.1571235636; _fbp=fb.1.1571235636317.604574724; intercom-id-c9fj6354=01941621-342b-4320-ad75-53826b5a002c; hubspotutk=105fad8a9b12bfed67330a0dbfe12c61; _gid=GA1.2.1843278152.1572282100; __zlcmid=uzie5dAUbB300Y; __hstc=69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3; __hssrc=1; fs_intercom=4655074328608768:4513847218700288; XSRF-TOKEN=0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da; referrer=www.google.com; landing_page=https://algorithmia.com/; signup_session=true; ajs_user_id=%22acunniffe%22; fs_uid=rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636; new-algo-language=scala; __hssc=69686351.5.1572357353053; intercom-session-c9fj6354=L08zdks3K1FOZEs0NngyR2NDQjBxN3VMb1J3dE1QZ0t4N2piYXY5ZmlNWFNVMkxseFhidkxhZ0g4QStWV2hYay0tUUtjQUtFaUZvLzJIZ0drSFdnRjM0UT09--fc3e700881b2cd1507c47ce6533f5b502d54fb7c; ALGO_SESSION=024e61a7adf120754eb69171fd0ea0cc2d16fc6c-last-access=2019-10-29T14%3A06%3A29.578Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "cookies": {
            "ajs_group_id": "null",
            "ajs_anonymous_id": "%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22",
            "_ga": "GA1.2.1872580011.1571235636",
            "_fbp": "fb.1.1571235636317.604574724",
            "intercom-id-c9fj6354": "01941621-342b-4320-ad75-53826b5a002c",
            "hubspotutk": "105fad8a9b12bfed67330a0dbfe12c61",
            "_gid": "GA1.2.1843278152.1572282100",
            "__zlcmid": "uzie5dAUbB300Y",
            "__hstc": "69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3",
            "__hssrc": "1",
            "fs_intercom": "4655074328608768:4513847218700288",
            "XSRF-TOKEN": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "referrer": "www.google.com",
            "landing_page": "https://algorithmia.com/",
            "signup_session": "true",
            "ajs_user_id": "%22acunniffe%22",
            "fs_uid": "rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636",
            "new-algo-language": "scala",
            "__hssc": "69686351.5.1572357353053",
            "intercom-session-c9fj6354": "L08zdks3K1FOZEs0NngyR2NDQjBxN3VMb1J3dE1QZ0t4N2piYXY5ZmlNWFNVMkxseFhidkxhZ0g4QStWV2hYay0tUUtjQUtFaUZvLzJIZ0drSFdnRjM0UT09--fc3e700881b2cd1507c47ce6533f5b502d54fb7c",
            "ALGO_SESSION": "024e61a7adf120754eb69171fd0ea0cc2d16fc6c-last-access=2019-10-29T14%3A06%3A29.578Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "queryParameters": {
            "order": "starred"
          }
        },
        "response": {
          "statusCode": 200,
          "headers": {
            "content-encoding": "gzip",
            "content-type": "application/json; charset=utf-8",
            "date": "Tue, 29 Oct 2019 14:06:29 GMT",
            "set-cookie": "ALGO_SESSION=67b23b6a104343f89725af9cb2b698e9f38cbf03-last-access=2019-10-29T14%3A06%3A29.800Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3; Max-Age=86400; Expires=Wed, 30 Oct 2019 14:06:29 GMT; Path=/; Domain=algorithmia.com; Secure; HTTPOnly",
            "strict-transport-security": "max-age=86400; includeSubDomains",
            "vary": "Accept-Encoding",
            "x-content-type-options": "nosniff",
            "x-frame-options": "DENY",
            "content-length": "6474",
            "connection": "keep-alive"
          },
          "body": [
            {
              "username": "deeplearning",
              "algoname": "ColorfulImageColorization",
              "algolabel": "Colorful Image Colorization",
              "language": "Python 2.x",
              "card_line": "Colorizes given black & white images.",
              "doc_url": "https://algorithmia.com/algorithms/deeplearning/ColorfulImageColorization",
              "api_url": "https://api.algorithmia.com/v1/algo/deeplearning/ColorfulImageColorization"
            },
            {
              "username": "nlp",
              "algoname": "Summarizer",
              "algolabel": "Summarizer",
              "language": "Java",
              "card_line": "Summarize english text",
              "submitted_at": "2015-11-20T19:35:16.000Z",
              "doc_url": "https://algorithmia.com/algorithms/nlp/Summarizer",
              "api_url": "https://api.algorithmia.com/v1/algo/nlp/Summarizer"
            },
            {
              "username": "nlp",
              "algoname": "SentimentAnalysis",
              "algolabel": "Sentiment Analysis",
              "language": "Java",
              "card_line": "Determine positive or negative sentiment from text",
              "submitted_at": "2015-11-20T19:19:45.000Z",
              "doc_url": "https://algorithmia.com/algorithms/nlp/SentimentAnalysis",
              "api_url": "https://api.algorithmia.com/v1/algo/nlp/SentimentAnalysis"
            },
            {
              "username": "nlp",
              "algoname": "AutoTag",
              "algolabel": "AutoTag",
              "language": "Java",
              "card_line": "Automatically extract tags from text",
              "submitted_at": "2015-12-11T21:36:22.000Z",
              "doc_url": "https://algorithmia.com/algorithms/nlp/AutoTag",
              "api_url": "https://api.algorithmia.com/v1/algo/nlp/AutoTag"
            },
            {
              "username": "deeplearning",
              "algoname": "DeepFilter",
              "algolabel": "DeepFilter",
              "language": "Python 2.x",
              "card_line": "Apply artistic and stylish filters to your images",
              "doc_url": "https://algorithmia.com/algorithms/deeplearning/DeepFilter",
              "api_url": "https://api.algorithmia.com/v1/algo/deeplearning/DeepFilter"
            },
            {
              "username": "tags",
              "algoname": "AutoTagURL",
              "algolabel": "Auto-Tag URL",
              "language": "Java",
              "card_line": "Automatically generate keyword tags for a URL",
              "submitted_at": "2016-02-17T00:33:43.000Z",
              "doc_url": "https://algorithmia.com/algorithms/tags/AutoTagURL",
              "api_url": "https://api.algorithmia.com/v1/algo/tags/AutoTagURL"
            },
            {
              "username": "util",
              "algoname": "Html2Text",
              "algolabel": "Html 2 Text",
              "language": "Java",
              "card_line": "Extract main text content from a URL",
              "submitted_at": "2016-03-03T01:37:50.000Z",
              "doc_url": "https://algorithmia.com/algorithms/util/Html2Text",
              "api_url": "https://api.algorithmia.com/v1/algo/util/Html2Text"
            },
            {
              "username": "sfw",
              "algoname": "NudityDetection",
              "algolabel": "Nudity Detection",
              "language": "Python 2.x",
              "card_line": "Detect nudity in pictures",
              "submitted_at": "2016-04-15T16:50:59.000Z",
              "doc_url": "https://algorithmia.com/algorithms/sfw/NudityDetection",
              "api_url": "https://api.algorithmia.com/v1/algo/sfw/NudityDetection"
            },
            {
              "username": "nlp",
              "algoname": "SocialSentimentAnalysis",
              "algolabel": "Social Sentiment Analysis",
              "language": "Python 2.x",
              "card_line": "Gives the positive, negative and neutral sentiment of an English sentence.",
              "submitted_at": "2016-01-20T15:01:38.000Z",
              "doc_url": "https://algorithmia.com/algorithms/nlp/SocialSentimentAnalysis",
              "api_url": "https://api.algorithmia.com/v1/algo/nlp/SocialSentimentAnalysis"
            },
            {
              "username": "deeplearning",
              "algoname": "Parsey",
              "algolabel": "Parsey McParseface",
              "language": "Scala",
              "card_line": "Parse sentences with ease.",
              "doc_url": "https://algorithmia.com/algorithms/deeplearning/Parsey",
              "api_url": "https://api.algorithmia.com/v1/algo/deeplearning/Parsey"
            },
            {
              "username": "algorithmiahq",
              "algoname": "DeepFashion",
              "algolabel": "DeepFashion",
              "language": "Python 2.x",
              "card_line": "Recognize clothing items",
              "doc_url": "https://algorithmia.com/algorithms/algorithmiahq/DeepFashion",
              "api_url": "https://api.algorithmia.com/v1/algo/algorithmiahq/DeepFashion"
            },
            {
              "username": "SummarAI",
              "algoname": "Summarizer",
              "algolabel": "Summarizer",
              "language": "Java",
              "card_line": "Advanced Content Summarizer",
              "submitted_at": "2015-10-30T19:05:42.000Z",
              "doc_url": "https://algorithmia.com/algorithms/SummarAI/Summarizer",
              "api_url": "https://api.algorithmia.com/v1/algo/SummarAI/Summarizer"
            },
            {
              "username": "LgoBE",
              "algoname": "CarMakeandModelRecognition",
              "algolabel": "Car Make and Model Recognition",
              "language": "Python 2.x",
              "card_line": "Identify make, model, body style and model year of any car.",
              "doc_url": "https://algorithmia.com/algorithms/LgoBE/CarMakeandModelRecognition",
              "api_url": "https://api.algorithmia.com/v1/algo/LgoBE/CarMakeandModelRecognition"
            },
            {
              "username": "sfw",
              "algoname": "NudityDetectioni2v",
              "algolabel": "NudityDetectioni2v",
              "language": "Python 2.x",
              "card_line": "Detect nudity in pictures.",
              "submitted_at": "2016-04-23T00:12:44.000Z",
              "doc_url": "https://algorithmia.com/algorithms/sfw/NudityDetectioni2v",
              "api_url": "https://api.algorithmia.com/v1/algo/sfw/NudityDetectioni2v"
            },
            {
              "username": "zskurultay",
              "algoname": "ImageSimilarity",
              "algolabel": "Image Similarity",
              "language": "Java",
              "card_line": "compare two images for similarity",
              "submitted_at": "2015-06-24T00:47:44.000Z",
              "doc_url": "https://algorithmia.com/algorithms/zskurultay/ImageSimilarity",
              "api_url": "https://api.algorithmia.com/v1/algo/zskurultay/ImageSimilarity"
            },
            {
              "username": "nlp",
              "algoname": "LDA",
              "algolabel": "LDA",
              "language": "Java",
              "card_line": "LDA is a generative topic model extractor.",
              "submitted_at": "2015-12-09T00:04:10.000Z",
              "doc_url": "https://algorithmia.com/algorithms/nlp/LDA",
              "api_url": "https://api.algorithmia.com/v1/algo/nlp/LDA"
            },
            {
              "username": "web",
              "algoname": "AnalyzeURL",
              "algolabel": "Analyze URL",
              "language": "Java",
              "card_line": "Get content and metadata for a URL",
              "submitted_at": "2015-10-13T17:46:22.000Z",
              "doc_url": "https://algorithmia.com/algorithms/web/AnalyzeURL",
              "api_url": "https://api.algorithmia.com/v1/algo/web/AnalyzeURL"
            },
            {
              "username": "deeplearning",
              "algoname": "IllustrationTagger",
              "algolabel": "Illustration Tagger",
              "language": "Python 2.x",
              "card_line": "Automagically tag your images.",
              "submitted_at": "2016-04-01T18:29:33.000Z",
              "doc_url": "https://algorithmia.com/algorithms/deeplearning/IllustrationTagger",
              "api_url": "https://api.algorithmia.com/v1/algo/deeplearning/IllustrationTagger"
            },
            {
              "username": "StanfordNLP",
              "algoname": "NamedEntityRecognition",
              "algolabel": "Named Entity Recognition",
              "language": "Java",
              "card_line": "Table of Contents Introduction I/O Examples Credits Algorithm Console Introduction This algorithm retrives recognized...",
              "submitted_at": "2015-12-18T19:26:54.000Z",
              "doc_url": "https://algorithmia.com/algorithms/StanfordNLP/NamedEntityRecognition",
              "api_url": "https://api.algorithmia.com/v1/algo/StanfordNLP/NamedEntityRecognition"
            },
            {
              "username": "ocr",
              "algoname": "RecognizeCharacters",
              "algolabel": "OCR",
              "language": "Java",
              "card_line": "Use character recognition to extract text from an image",
              "submitted_at": "2016-01-08T20:10:29.000Z",
              "doc_url": "https://algorithmia.com/algorithms/ocr/RecognizeCharacters",
              "api_url": "https://api.algorithmia.com/v1/algo/ocr/RecognizeCharacters"
            },
            {
              "username": "web",
              "algoname": "WikipediaParser",
              "algolabel": "Wikipedia Parser",
              "language": "Python 2.x",
              "card_line": "Search Wikipedia, get article summaries, links, and images from a page, and more.",
              "submitted_at": "2015-12-22T18:55:36.000Z",
              "doc_url": "https://algorithmia.com/algorithms/web/WikipediaParser",
              "api_url": "https://api.algorithmia.com/v1/algo/web/WikipediaParser"
            },
            {
              "username": "PetiteProgrammer",
              "algoname": "ProgrammingLanguageIdentification",
              "algolabel": "Programming Language Identification",
              "language": "Python 3.x",
              "card_line": "Detect the programming language of source code",
              "doc_url": "https://algorithmia.com/algorithms/PetiteProgrammer/ProgrammingLanguageIdentification",
              "api_url": "https://api.algorithmia.com/v1/algo/PetiteProgrammer/ProgrammingLanguageIdentification"
            },
            {
              "username": "web",
              "algoname": "ShareCounts",
              "algolabel": "Count Social Shares",
              "language": "Java",
              "card_line": "Retrieve the current Facebook, LinkedIn, and Pinterest share counts",
              "submitted_at": "2016-04-04T18:34:37.000Z",
              "doc_url": "https://algorithmia.com/algorithms/web/ShareCounts",
              "api_url": "https://api.algorithmia.com/v1/algo/web/ShareCounts"
            },
            {
              "username": "opencv",
              "algoname": "SmartThumbnail",
              "algolabel": "Smart Thumbnail",
              "language": "Java",
              "card_line": "Create a thumbnail based on the most relevant part of an image",
              "submitted_at": "2016-01-12T18:38:58.000Z",
              "doc_url": "https://algorithmia.com/algorithms/opencv/SmartThumbnail",
              "api_url": "https://api.algorithmia.com/v1/algo/opencv/SmartThumbnail"
            },
            {
              "username": "deeplearning",
              "algoname": "AgeClassification",
              "algolabel": "Age Classification",
              "language": "Python 2.x",
              "card_line": "Classifies the age range of a person in a given image.",
              "doc_url": "https://algorithmia.com/algorithms/deeplearning/AgeClassification",
              "api_url": "https://api.algorithmia.com/v1/algo/deeplearning/AgeClassification"
            },
            {
              "username": "deeplearning",
              "algoname": "GenderClassification",
              "algolabel": "Gender Classification",
              "language": "Python 2.x",
              "card_line": "Classifies the gender of a person in a given image.",
              "doc_url": "https://algorithmia.com/algorithms/deeplearning/GenderClassification",
              "api_url": "https://api.algorithmia.com/v1/algo/deeplearning/GenderClassification"
            },
            {
              "username": "nlp",
              "algoname": "SummarizeURL",
              "algolabel": "Summarize URL",
              "language": "Python 2.x",
              "card_line": "This is a algorithm for summarizing content in webpages",
              "submitted_at": "2016-03-03T02:10:54.000Z",
              "doc_url": "https://algorithmia.com/algorithms/nlp/SummarizeURL",
              "api_url": "https://api.algorithmia.com/v1/algo/nlp/SummarizeURL"
            },
            {
              "username": "nlp",
              "algoname": "AnalyzeTweets",
              "algolabel": "Analyze Tweets",
              "language": "Python 2.x",
              "card_line": "Searches Twitter by keyword and analyzes tweets for sentiment and LDA topics",
              "submitted_at": "2016-02-04T19:51:39.000Z",
              "doc_url": "https://algorithmia.com/algorithms/nlp/AnalyzeTweets",
              "api_url": "https://api.algorithmia.com/v1/algo/nlp/AnalyzeTweets"
            },
            {
              "username": "zza",
              "algoname": "EnhanceResolution",
              "algolabel": "Enhance Resolution",
              "language": "Rust",
              "card_line": "Zoom and Enhance",
              "doc_url": "https://algorithmia.com/algorithms/zza/EnhanceResolution",
              "api_url": "https://api.algorithmia.com/v1/algo/zza/EnhanceResolution"
            },
            {
              "username": "web",
              "algoname": "GetLinks",
              "algolabel": "Get Links",
              "language": "Java",
              "card_line": "Extract links from a URL",
              "submitted_at": "2015-10-21T19:04:30.000Z",
              "doc_url": "https://algorithmia.com/algorithms/web/GetLinks",
              "api_url": "https://api.algorithmia.com/v1/algo/web/GetLinks"
            },
            {
              "username": "outofstep",
              "algoname": "MegaAnalyzeURL",
              "algolabel": "MegaAnalyzeURL",
              "language": "Javascript",
              "card_line": "Extract structured data from a URL",
              "doc_url": "https://algorithmia.com/algorithms/outofstep/MegaAnalyzeURL",
              "api_url": "https://api.algorithmia.com/v1/algo/outofstep/MegaAnalyzeURL"
            },
            {
              "username": "web",
              "algoname": "SiteMap",
              "algolabel": "Site Map",
              "language": "Java",
              "card_line": "Crawls a website and returns a site map",
              "submitted_at": "2015-06-05T00:27:23.000Z",
              "doc_url": "https://algorithmia.com/algorithms/web/SiteMap",
              "api_url": "https://api.algorithmia.com/v1/algo/web/SiteMap"
            },
            {
              "username": "nlp",
              "algoname": "KeywordsForDocumentSet",
              "algolabel": "Keywords For Document Set",
              "language": "Java",
              "card_line": "Compute relevant keywords for a set of documents",
              "submitted_at": "2016-01-11T18:57:51.000Z",
              "doc_url": "https://algorithmia.com/algorithms/nlp/KeywordsForDocumentSet",
              "api_url": "https://api.algorithmia.com/v1/algo/nlp/KeywordsForDocumentSet"
            },
            {
              "username": "opencv",
              "algoname": "FaceDetection",
              "algolabel": "Face Detection",
              "language": "Java",
              "card_line": "Detect faces in images",
              "submitted_at": "2015-10-18T12:16:18.000Z",
              "doc_url": "https://algorithmia.com/algorithms/opencv/FaceDetection",
              "api_url": "https://api.algorithmia.com/v1/algo/opencv/FaceDetection"
            },
            {
              "username": "deeplearning",
              "algoname": "EmotionRecognitionCNNMBP",
              "algolabel": "Emotion Recognition in the Wild via Convolutional Neural Networks and Mapped Binary Patterns",
              "language": "Python 2.x",
              "card_line": "Autodetects emotions in the given image.",
              "doc_url": "https://algorithmia.com/algorithms/deeplearning/EmotionRecognitionCNNMBP",
              "api_url": "https://api.algorithmia.com/v1/algo/deeplearning/EmotionRecognitionCNNMBP"
            },
            {
              "username": "util",
              "algoname": "Url2Text",
              "algolabel": "Url 2 Text",
              "language": "Java",
              "card_line": "Extract main text content from a URL",
              "submitted_at": "2015-11-02T21:50:36.000Z",
              "doc_url": "https://algorithmia.com/algorithms/util/Url2Text",
              "api_url": "https://api.algorithmia.com/v1/algo/util/Url2Text"
            },
            {
              "username": "deeplearning",
              "algoname": "Places365Classifier",
              "algolabel": "Places365 Classifier",
              "language": "Python 2.x",
              "card_line": "A classifier that tags various places.",
              "doc_url": "https://algorithmia.com/algorithms/deeplearning/Places365Classifier",
              "api_url": "https://api.algorithmia.com/v1/algo/deeplearning/Places365Classifier"
            },
            {
              "username": "deeplearning",
              "algoname": "InceptionNet",
              "algolabel": "InceptionNet",
              "language": "Python 2.x",
              "card_line": "Automatically tag images with InceptionNet",
              "doc_url": "https://algorithmia.com/algorithms/deeplearning/InceptionNet",
              "api_url": "https://api.algorithmia.com/v1/algo/deeplearning/InceptionNet"
            },
            {
              "username": "media",
              "algoname": "VideoTransform",
              "algolabel": "Video Transform",
              "language": "Rust",
              "card_line": "Transform a video with image algorithms",
              "doc_url": "https://algorithmia.com/algorithms/media/VideoTransform",
              "api_url": "https://api.algorithmia.com/v1/algo/media/VideoTransform"
            },
            {
              "username": "matching",
              "algoname": "DatingAlgorithm",
              "algolabel": "Dating Algorithm",
              "language": "Python 2.x",
              "card_line": "A dating algorithm",
              "submitted_at": "2016-02-11T23:54:02.000Z",
              "doc_url": "https://algorithmia.com/algorithms/matching/DatingAlgorithm",
              "api_url": "https://api.algorithmia.com/v1/algo/matching/DatingAlgorithm"
            },
            {
              "username": "paranoia",
              "algoname": "FpGrowth",
              "algolabel": "FpGrowth",
              "language": "Java",
              "card_line": "A scalable method for finding frequent patterns within large datasets",
              "submitted_at": "2015-12-07T00:08:45.000Z",
              "doc_url": "https://algorithmia.com/algorithms/paranoia/FpGrowth",
              "api_url": "https://api.algorithmia.com/v1/algo/paranoia/FpGrowth"
            },
            {
              "username": "TimeSeries",
              "algoname": "Forecast",
              "algolabel": "Forecast",
              "language": "Java",
              "card_line": "Gives a forecast the next n steps of a given time series",
              "submitted_at": "2016-04-06T16:43:24.000Z",
              "doc_url": "https://algorithmia.com/algorithms/TimeSeries/Forecast",
              "api_url": "https://api.algorithmia.com/v1/algo/TimeSeries/Forecast"
            },
            {
              "username": "algorithmiahq",
              "algoname": "ColorizationDemo",
              "algolabel": "Colorization Demo",
              "language": "Python 2.x",
              "card_line": "calls colorizer and adds Algorithmia watermark",
              "doc_url": "https://algorithmia.com/algorithms/algorithmiahq/ColorizationDemo",
              "api_url": "https://api.algorithmia.com/v1/algo/algorithmiahq/ColorizationDemo"
            },
            {
              "username": "deeplearning",
              "algoname": "PhotoQualityEnhancement",
              "algolabel": "Photo Quality Enhancement",
              "language": "Python 2.x",
              "card_line": "Enhance your photos as if they're taken with DSLR cameras",
              "doc_url": "https://algorithmia.com/algorithms/deeplearning/PhotoQualityEnhancement",
              "api_url": "https://api.algorithmia.com/v1/algo/deeplearning/PhotoQualityEnhancement"
            },
            {
              "username": "WebPredict",
              "algoname": "GetNGramFrequencies",
              "algolabel": "GetNGramFrequencies",
              "language": "Java",
              "card_line": "Gets lists of N grams from an input text.",
              "submitted_at": "2015-10-19T21:32:32.000Z",
              "doc_url": "https://algorithmia.com/algorithms/WebPredict/GetNGramFrequencies",
              "api_url": "https://api.algorithmia.com/v1/algo/WebPredict/GetNGramFrequencies"
            },
            {
              "username": "PetiteProgrammer",
              "algoname": "TextSimilarity",
              "algolabel": "Text Similarity",
              "language": "Python 3.x",
              "card_line": "Find the most similar text files within a collection of documents",
              "doc_url": "https://algorithmia.com/algorithms/PetiteProgrammer/TextSimilarity",
              "api_url": "https://api.algorithmia.com/v1/algo/PetiteProgrammer/TextSimilarity"
            },
            {
              "username": "Aluxian",
              "algoname": "AffinityAnalysisFPGrowth",
              "algolabel": "Affinity Analysis for Market Basket Recommendation (FP-Growth)",
              "language": "Java",
              "card_line": "Affinity analysis is an analytical technique that aims to discover relationships between activities and preferences that pertain to specific individuals.",
              "submitted_at": "2015-10-20T21:44:38.000Z",
              "doc_url": "https://algorithmia.com/algorithms/Aluxian/AffinityAnalysisFPGrowth",
              "api_url": "https://api.algorithmia.com/v1/algo/Aluxian/AffinityAnalysisFPGrowth"
            },
            {
              "username": "util",
              "algoname": "SmartImageDownloader",
              "algolabel": "Smart Image Downloader",
              "language": "Python 2.x",
              "card_line": "A fast and easy way to parse image links",
              "doc_url": "https://algorithmia.com/algorithms/util/SmartImageDownloader",
              "api_url": "https://api.algorithmia.com/v1/algo/util/SmartImageDownloader"
            },
            {
              "username": "character_recognition",
              "algoname": "SmartTextExtraction",
              "algolabel": "Smart Text Extraction",
              "language": "Scala",
              "card_line": "Extract text the smart way",
              "doc_url": "https://algorithmia.com/algorithms/character_recognition/SmartTextExtraction",
              "api_url": "https://api.algorithmia.com/v1/algo/character_recognition/SmartTextExtraction"
            },
            {
              "username": "web",
              "algoname": "WebPageRecommender",
              "algolabel": "Web Page Recommender",
              "language": "Java",
              "card_line": "Recommend similar pages for any domain",
              "submitted_at": "2016-03-29T21:00:13.000Z",
              "doc_url": "https://algorithmia.com/algorithms/web/WebPageRecommender",
              "api_url": "https://api.algorithmia.com/v1/algo/web/WebPageRecommender"
            },
            {
              "username": "nlp",
              "algoname": "Word2Vec",
              "algolabel": "Word2Vec",
              "language": "Python 2.x",
              "card_line": "Get similar words by vector arithmetic",
              "doc_url": "https://algorithmia.com/algorithms/nlp/Word2Vec",
              "api_url": "https://api.algorithmia.com/v1/algo/nlp/Word2Vec"
            },
            {
              "username": "util",
              "algoname": "ExtractText",
              "algolabel": "Extract Text",
              "language": "Java",
              "card_line": "Extracts text from a given file",
              "submitted_at": "2016-04-05T16:55:05.000Z",
              "doc_url": "https://algorithmia.com/algorithms/util/ExtractText",
              "api_url": "https://api.algorithmia.com/v1/algo/util/ExtractText"
            },
            {
              "username": "nlp",
              "algoname": "SentimentByTerm",
              "algolabel": "Sentiment By Term",
              "language": "Java",
              "card_line": "Find the sentiment associated with particular words in a document",
              "submitted_at": "2015-10-29T01:56:31.000Z",
              "doc_url": "https://algorithmia.com/algorithms/nlp/SentimentByTerm",
              "api_url": "https://api.algorithmia.com/v1/algo/nlp/SentimentByTerm"
            },
            {
              "username": "nlp",
              "algoname": "DocumentClassifier",
              "algolabel": "Document Classifier",
              "language": "Scala",
              "card_line": "Classify or Recommend documents with ease",
              "doc_url": "https://algorithmia.com/algorithms/nlp/DocumentClassifier",
              "api_url": "https://api.algorithmia.com/v1/algo/nlp/DocumentClassifier"
            },
            {
              "username": "bkyan",
              "algoname": "StyleThief",
              "algolabel": "StyleThief (Open Source)",
              "language": "Python 2.x",
              "card_line": "Anish Athalye's Neural Style Transfer Using TensorFlow",
              "doc_url": "https://algorithmia.com/algorithms/bkyan/StyleThief",
              "api_url": "https://api.algorithmia.com/v1/algo/bkyan/StyleThief"
            },
            {
              "username": "matching",
              "algoname": "TaxiMatching",
              "algolabel": "Taxi Matching",
              "language": "Python 2.x",
              "card_line": "A taxi - customer matching algorithm",
              "submitted_at": "2016-02-11T01:33:53.000Z",
              "doc_url": "https://algorithmia.com/algorithms/matching/TaxiMatching",
              "api_url": "https://api.algorithmia.com/v1/algo/matching/TaxiMatching"
            },
            {
              "username": "StanfordNLP",
              "algoname": "SentimentAnalysis",
              "algolabel": "Sentiment Analysis",
              "language": "Java",
              "card_line": "1. Introduction Sentiment analysis (also known as opinion mining) refers to the use of natural language processing, text...",
              "submitted_at": "2015-04-30T19:18:44.000Z",
              "doc_url": "https://algorithmia.com/algorithms/StanfordNLP/SentimentAnalysis",
              "api_url": "https://api.algorithmia.com/v1/algo/StanfordNLP/SentimentAnalysis"
            },
            {
              "username": "ocr",
              "algoname": "SmartOCR",
              "algolabel": "Smart OCR",
              "language": "Java",
              "card_line": "OCR with Image Processing for Higher Accuracies",
              "submitted_at": "2016-02-15T21:32:25.000Z",
              "doc_url": "https://algorithmia.com/algorithms/ocr/SmartOCR",
              "api_url": "https://api.algorithmia.com/v1/algo/ocr/SmartOCR"
            },
            {
              "username": "nlp",
              "algoname": "ProfanityDetection",
              "algolabel": "Profanity Detection",
              "language": "Java",
              "card_line": "Detect profanity in text automatically",
              "submitted_at": "2015-12-01T19:53:38.000Z",
              "doc_url": "https://algorithmia.com/algorithms/nlp/ProfanityDetection",
              "api_url": "https://api.algorithmia.com/v1/algo/nlp/ProfanityDetection"
            },
            {
              "username": "deeplearning",
              "algoname": "SalNet",
              "algolabel": "SalNet: Deep Convolutional Networks for Saliency Prediction",
              "language": "Python 2.x",
              "card_line": "Automatically detects the most relevant parts in an image.",
              "doc_url": "https://algorithmia.com/algorithms/deeplearning/SalNet",
              "api_url": "https://api.algorithmia.com/v1/algo/deeplearning/SalNet"
            },
            {
              "username": "sphinx",
              "algoname": "SpeechRecognition",
              "algolabel": "Speech Recognition",
              "language": "Java",
              "card_line": "This algorithm uses CMU Sphinx open source library to recognize speech in audio files that are uploaded to the Data API or Youtube videos that are licensed under Creative Commons.",
              "submitted_at": "2015-10-20T23:38:59.000Z",
              "doc_url": "https://algorithmia.com/algorithms/sphinx/SpeechRecognition",
              "api_url": "https://api.algorithmia.com/v1/algo/sphinx/SpeechRecognition"
            },
            {
              "username": "tags",
              "algoname": "ScrapeRSS",
              "algolabel": "Scrape RSS",
              "language": "Java",
              "card_line": "Return title, link and comments for each item in an RSS feed",
              "submitted_at": "2015-10-01T18:09:50.000Z",
              "doc_url": "https://algorithmia.com/algorithms/tags/ScrapeRSS",
              "api_url": "https://api.algorithmia.com/v1/algo/tags/ScrapeRSS"
            },
            {
              "username": "diego",
              "algoname": "AnalyzeTwitterUser",
              "algolabel": "Analyze Twitter User",
              "language": "Python 2.x",
              "card_line": "Analyze any Twitter User",
              "submitted_at": "2016-03-19T00:56:16.000Z",
              "doc_url": "https://algorithmia.com/algorithms/diego/AnalyzeTwitterUser",
              "api_url": "https://api.algorithmia.com/v1/algo/diego/AnalyzeTwitterUser"
            },
            {
              "username": "diego",
              "algoname": "RetrieveTweetsWithKeyword",
              "algolabel": "Retrieve Tweets With Keyword",
              "language": "Java",
              "card_line": "Search twitter for keyword and return tweets",
              "submitted_at": "2015-05-06T07:37:13.000Z",
              "doc_url": "https://algorithmia.com/algorithms/diego/RetrieveTweetsWithKeyword",
              "api_url": "https://api.algorithmia.com/v1/algo/diego/RetrieveTweetsWithKeyword"
            },
            {
              "username": "cindyxiaoxiaoli",
              "algoname": "KeywordExtraction",
              "algolabel": "Keyword Extraction",
              "language": "Python 3.x",
              "card_line": "Keyword/KeyPhrase Extraction from Sentence",
              "doc_url": "https://algorithmia.com/algorithms/cindyxiaoxiaoli/KeywordExtraction",
              "api_url": "https://api.algorithmia.com/v1/algo/cindyxiaoxiaoli/KeywordExtraction"
            },
            {
              "username": "infotrie",
              "algoname": "Sentiment_history",
              "algolabel": "Sentiment History (Company)",
              "language": "Python 2.x",
              "card_line": "Equity news sentiment for smarter investment decisions. News Sentiment is derived from millions of web sources.",
              "submitted_at": "2016-04-25T18:58:11.000Z",
              "doc_url": "https://algorithmia.com/algorithms/infotrie/Sentiment_history",
              "api_url": "https://api.algorithmia.com/v1/algo/infotrie/Sentiment_history"
            },
            {
              "username": "web",
              "algoname": "GetRecommendations",
              "algolabel": "Get Recommendations",
              "language": "Java",
              "card_line": "Get page recommendations for a given webpage",
              "submitted_at": "2015-09-17T01:02:13.000Z",
              "doc_url": "https://algorithmia.com/algorithms/web/GetRecommendations",
              "api_url": "https://api.algorithmia.com/v1/algo/web/GetRecommendations"
            },
            {
              "username": "ApacheOpenNLP",
              "algoname": "NamedEntityRecognition",
              "algolabel": "Named Entity Recognition",
              "language": "Java",
              "card_line": "Recognizes and returns entities in a given sentence",
              "submitted_at": "2015-05-01T02:07:31.000Z",
              "doc_url": "https://algorithmia.com/algorithms/ApacheOpenNLP/NamedEntityRecognition",
              "api_url": "https://api.algorithmia.com/v1/algo/ApacheOpenNLP/NamedEntityRecognition"
            },
            {
              "username": "sklearn",
              "algoname": "GeographicSpectralClustering",
              "algolabel": "Geographic Spectral Clustering",
              "language": "Python 2.x",
              "card_line": "Spectral clustering for geographic (lat/long) data.",
              "submitted_at": "2015-05-01T01:02:21.000Z",
              "doc_url": "https://algorithmia.com/algorithms/sklearn/GeographicSpectralClustering",
              "api_url": "https://api.algorithmia.com/v1/algo/sklearn/GeographicSpectralClustering"
            },
            {
              "username": "translation",
              "algoname": "GoogleTranslate",
              "algolabel": "Google Translate",
              "language": "Python 3.x",
              "card_line": "Translation between languages",
              "doc_url": "https://algorithmia.com/algorithms/translation/GoogleTranslate",
              "api_url": "https://api.algorithmia.com/v1/algo/translation/GoogleTranslate"
            },
            {
              "username": "deeplearning",
              "algoname": "ObjectDetectionCOCO",
              "algolabel": "ObjectDetection - COCO",
              "language": "Python 3.x",
              "card_line": "Detecting Objects in complex scenes",
              "doc_url": "https://algorithmia.com/algorithms/deeplearning/ObjectDetectionCOCO",
              "api_url": "https://api.algorithmia.com/v1/algo/deeplearning/ObjectDetectionCOCO"
            },
            {
              "username": "PetiteProgrammer",
              "algoname": "pythoncodeprediction",
              "algolabel": "Python Code Prediction",
              "language": "Python 3.x",
              "card_line": "Next word/sequence prediction for Python code",
              "doc_url": "https://algorithmia.com/algorithms/PetiteProgrammer/pythoncodeprediction",
              "api_url": "https://api.algorithmia.com/v1/algo/PetiteProgrammer/pythoncodeprediction"
            },
            {
              "username": "nus",
              "algoname": "SearchEngineAggregator",
              "algolabel": "SearchEngineAggregator",
              "language": "Java",
              "card_line": "Search across multiple Search engines at once",
              "submitted_at": "2015-10-07T06:10:19.000Z",
              "doc_url": "https://algorithmia.com/algorithms/nus/SearchEngineAggregator",
              "api_url": "https://api.algorithmia.com/v1/algo/nus/SearchEngineAggregator"
            },
            {
              "username": "mheimann",
              "algoname": "RecognizeFaces",
              "algolabel": "Recognize Faces",
              "language": "Python 2.x",
              "card_line": "Uses a trained face recognizer to identify faces.",
              "submitted_at": "2015-10-06T00:50:11.000Z",
              "doc_url": "https://algorithmia.com/algorithms/mheimann/RecognizeFaces",
              "api_url": "https://api.algorithmia.com/v1/algo/mheimann/RecognizeFaces"
            },
            {
              "username": "cv",
              "algoname": "FaceRecognition",
              "algolabel": "Face Recognition",
              "language": "Python 2.x",
              "card_line": "Train and recognize human faces",
              "doc_url": "https://algorithmia.com/algorithms/cv/FaceRecognition",
              "api_url": "https://api.algorithmia.com/v1/algo/cv/FaceRecognition"
            },
            {
              "username": "deeplearning",
              "algoname": "LargescaleImageMemorability",
              "algolabel": "Large-scale Image Memorability",
              "language": "Python 2.x",
              "card_line": "Returns how memorable the given image is.",
              "doc_url": "https://algorithmia.com/algorithms/deeplearning/LargescaleImageMemorability",
              "api_url": "https://api.algorithmia.com/v1/algo/deeplearning/LargescaleImageMemorability"
            },
            {
              "username": "ocr",
              "algoname": "ReceiptRecognition",
              "algolabel": "Receipt Recognition",
              "language": "Java",
              "card_line": "This algorithm reads a computer printed or handwritten receipt (containing only the total or tip portions) and returns the value written.",
              "submitted_at": "2016-01-11T18:08:20.000Z",
              "doc_url": "https://algorithmia.com/algorithms/ocr/ReceiptRecognition",
              "api_url": "https://api.algorithmia.com/v1/algo/ocr/ReceiptRecognition"
            },
            {
              "username": "ANaimi",
              "algoname": "GetTwitterFriends",
              "algolabel": "Get Twitter Friends",
              "language": "Java",
              "card_line": "Takes a screenName as input and returns an array of TwitterProfile as output.",
              "submitted_at": "2015-06-26T20:39:29.000Z",
              "doc_url": "https://algorithmia.com/algorithms/ANaimi/GetTwitterFriends",
              "api_url": "https://api.algorithmia.com/v1/algo/ANaimi/GetTwitterFriends"
            },
            {
              "username": "TimeSeries",
              "algoname": "SimpleMovingAverage",
              "algolabel": "Simple Moving Average",
              "language": "Java",
              "card_line": "Construct a Simple Moving Average.",
              "submitted_at": "2016-04-07T22:56:28.000Z",
              "doc_url": "https://algorithmia.com/algorithms/TimeSeries/SimpleMovingAverage",
              "api_url": "https://api.algorithmia.com/v1/algo/TimeSeries/SimpleMovingAverage"
            },
            {
              "username": "twitter",
              "algoname": "RetrieveTweetsWithKeyword",
              "algolabel": "Retrieve Tweets With Keyword",
              "language": "Python 2.x",
              "card_line": "Retrieve tweets that include keyword anywhere in their text.",
              "submitted_at": "2016-01-27T02:32:41.000Z",
              "doc_url": "https://algorithmia.com/algorithms/twitter/RetrieveTweetsWithKeyword",
              "api_url": "https://api.algorithmia.com/v1/algo/twitter/RetrieveTweetsWithKeyword"
            },
            {
              "username": "mtman",
              "algoname": "SentimentAnalysis",
              "algolabel": "SentimentAnalysis",
              "language": "Java",
              "card_line": "Sentiment analysis based on Apache Open NLP and SentiWordNet.",
              "submitted_at": "2015-10-22T08:35:57.000Z",
              "doc_url": "https://algorithmia.com/algorithms/mtman/SentimentAnalysis",
              "api_url": "https://api.algorithmia.com/v1/algo/mtman/SentimentAnalysis"
            },
            {
              "username": "Geo",
              "algoname": "ZipData",
              "algolabel": "ZipData",
              "language": "Java",
              "card_line": "Returns corresponding info for the given zip code",
              "submitted_at": "2015-07-23T01:06:33.000Z",
              "doc_url": "https://algorithmia.com/algorithms/Geo/ZipData",
              "api_url": "https://api.algorithmia.com/v1/algo/Geo/ZipData"
            },
            {
              "username": "opencv",
              "algoname": "CensorFace",
              "algolabel": "Censor Face",
              "language": "Java",
              "card_line": "Censors faces in given photo.",
              "submitted_at": "2015-06-29T21:47:10.000Z",
              "doc_url": "https://algorithmia.com/algorithms/opencv/CensorFace",
              "api_url": "https://api.algorithmia.com/v1/algo/opencv/CensorFace"
            },
            {
              "username": "mahout",
              "algoname": "Recommendation",
              "algolabel": "Recommendation",
              "language": "Java",
              "card_line": "Overview Eventually we will expand this to allow different parameters and options for neighborhood and similarity functi...",
              "submitted_at": "2015-06-29T21:29:16.000Z",
              "doc_url": "https://algorithmia.com/algorithms/mahout/Recommendation",
              "api_url": "https://api.algorithmia.com/v1/algo/mahout/Recommendation"
            },
            {
              "username": "Geo",
              "algoname": "GeosPy",
              "algolabel": "GeosPy: Geolocation Inference Made Easy",
              "language": "Python 3.x",
              "card_line": "Helps you infer geo-location data.",
              "doc_url": "https://algorithmia.com/algorithms/Geo/GeosPy",
              "api_url": "https://api.algorithmia.com/v1/algo/Geo/GeosPy"
            },
            {
              "username": "nlp",
              "algoname": "LDAMapper",
              "algolabel": "LDA Mapper",
              "language": "Python 2.x",
              "card_line": "Maps LDA topics to documents",
              "doc_url": "https://algorithmia.com/algorithms/nlp/LDAMapper",
              "api_url": "https://api.algorithmia.com/v1/algo/nlp/LDAMapper"
            },
            {
              "username": "deeplearning",
              "algoname": "RealEstateClassifier",
              "algolabel": "Real Estate Classifier",
              "language": "Python 2.x",
              "card_line": "Classifies real estate photos.",
              "doc_url": "https://algorithmia.com/algorithms/deeplearning/RealEstateClassifier",
              "api_url": "https://api.algorithmia.com/v1/algo/deeplearning/RealEstateClassifier"
            },
            {
              "username": "opencv",
              "algoname": "ObjectDetectionWithModels",
              "algolabel": "Object Detection With Models",
              "language": "Java",
              "card_line": "Introduction Core algorithm for taking in an image and a pretrained model and detecting objects for several OpenCV...",
              "submitted_at": "2016-01-12T18:40:33.000Z",
              "doc_url": "https://algorithmia.com/algorithms/opencv/ObjectDetectionWithModels",
              "api_url": "https://api.algorithmia.com/v1/algo/opencv/ObjectDetectionWithModels"
            },
            {
              "username": "nlp",
              "algoname": "LanguageIdentification",
              "algolabel": "Language Identification",
              "language": "Java",
              "card_line": "Guess what language based on input text",
              "submitted_at": "2015-11-20T18:58:52.000Z",
              "doc_url": "https://algorithmia.com/algorithms/nlp/LanguageIdentification",
              "api_url": "https://api.algorithmia.com/v1/algo/nlp/LanguageIdentification"
            },
            {
              "username": "nlp",
              "algoname": "KeywordSetSimilarity",
              "algolabel": "Keyword Set Similarity ",
              "language": "Java",
              "card_line": "Determines similarity between sets of weighted keywords",
              "submitted_at": "2015-09-27T02:01:11.000Z",
              "doc_url": "https://algorithmia.com/algorithms/nlp/KeywordSetSimilarity",
              "api_url": "https://api.algorithmia.com/v1/algo/nlp/KeywordSetSimilarity"
            },
            {
              "username": "alixaxel",
              "algoname": "CoordinatesToTimezone",
              "algolabel": "CoordinatesToTimezone",
              "language": "Java",
              "card_line": "Timezone information for a latitude-longitude location",
              "submitted_at": "2015-07-06T21:00:28.000Z",
              "doc_url": "https://algorithmia.com/algorithms/alixaxel/CoordinatesToTimezone",
              "api_url": "https://api.algorithmia.com/v1/algo/alixaxel/CoordinatesToTimezone"
            },
            {
              "username": "deeplearning",
              "algoname": "CrowdCounter",
              "algolabel": "Crowd Counter",
              "language": "Python 3.x",
              "card_line": "Count the number of people in an image. ",
              "doc_url": "https://algorithmia.com/algorithms/deeplearning/CrowdCounter",
              "api_url": "https://api.algorithmia.com/v1/algo/deeplearning/CrowdCounter"
            },
            {
              "username": "PetiteProgrammer",
              "algoname": "ImageClassifier",
              "algolabel": "Image Classifier",
              "language": "Python 3.x",
              "card_line": "Highly Accurate Image Classifier",
              "doc_url": "https://algorithmia.com/algorithms/PetiteProgrammer/ImageClassifier",
              "api_url": "https://api.algorithmia.com/v1/algo/PetiteProgrammer/ImageClassifier"
            },
            {
              "username": "media",
              "algoname": "SceneDetection",
              "algolabel": "Scene Detection",
              "language": "Python 2.x",
              "card_line": "Detects scene changes or cuts in videos.",
              "doc_url": "https://algorithmia.com/algorithms/media/SceneDetection",
              "api_url": "https://api.algorithmia.com/v1/algo/media/SceneDetection"
            },
            {
              "username": "media",
              "algoname": "VideoMetadataExtraction",
              "algolabel": "Video Metadata Extraction",
              "language": "Rust",
              "card_line": "Extract information from videos using image algorithms",
              "doc_url": "https://algorithmia.com/algorithms/media/VideoMetadataExtraction",
              "api_url": "https://api.algorithmia.com/v1/algo/media/VideoMetadataExtraction"
            },
            {
              "username": "nlp",
              "algoname": "AnalyzeGithubReadme",
              "algolabel": "Analyze Github Readme",
              "language": "Python 2.x",
              "card_line": "An algorithm for analyzing GitHub readmes and making recommendations for improving it.",
              "submitted_at": "2016-04-22T01:07:36.000Z",
              "doc_url": "https://algorithmia.com/algorithms/nlp/AnalyzeGithubReadme",
              "api_url": "https://api.algorithmia.com/v1/algo/nlp/AnalyzeGithubReadme"
            },
            {
              "username": "TimeSeries",
              "algoname": "TimeSeriesSummary",
              "algolabel": "Time Series Summary",
              "language": "Java",
              "card_line": "Calculate various statistics of a time series",
              "submitted_at": "2016-03-11T21:52:30.000Z",
              "doc_url": "https://algorithmia.com/algorithms/TimeSeries/TimeSeriesSummary",
              "api_url": "https://api.algorithmia.com/v1/algo/TimeSeries/TimeSeriesSummary"
            },
            {
              "username": "Geo",
              "algoname": "GeoHash",
              "algolabel": "GeoHash",
              "language": "Python 2.x",
              "card_line": "This algorithm provides a unique identifier for a given coordinate.",
              "submitted_at": "2016-03-10T00:48:13.000Z",
              "doc_url": "https://algorithmia.com/algorithms/Geo/GeoHash",
              "api_url": "https://api.algorithmia.com/v1/algo/Geo/GeoHash"
            },
            {
              "username": "Geo",
              "algoname": "GeoDistance",
              "algolabel": "Geo Distance",
              "language": "Python 2.x",
              "card_line": "Gives the distance between two coordinates.",
              "submitted_at": "2016-02-09T00:27:48.000Z",
              "doc_url": "https://algorithmia.com/algorithms/Geo/GeoDistance",
              "api_url": "https://api.algorithmia.com/v1/algo/Geo/GeoDistance"
            },
            {
              "username": "ANaimi",
              "algoname": "TechEventsFinder",
              "algolabel": "Tech Events Finder",
              "language": "Java",
              "card_line": "Returns a list of future tech events from from Meetup and Eventbrite.",
              "submitted_at": "2015-06-26T23:55:50.000Z",
              "doc_url": "https://algorithmia.com/algorithms/ANaimi/TechEventsFinder",
              "api_url": "https://api.algorithmia.com/v1/algo/ANaimi/TechEventsFinder"
            }
          ]
        }
      },
      {
        "request": {
          "url": "/webapi/categories/machine-learning",
          "method": "GET",
          "headers": {
            "host": "algorithmia.com",
            "connection": "keep-alive",
            "pragma": "no-cache",
            "cache-control": "no-cache",
            "accept": "application/json, text/plain, */*",
            "dnt": "1",
            "x-xsrf-token": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "cors",
            "referer": "https://algorithmia.com/algorithms",
            "accept-encoding": "gzip, deflate, br",
            "accept-language": "en-US,en;q=0.9",
            "cookie": "ajs_group_id=null; ajs_anonymous_id=%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22; _ga=GA1.2.1872580011.1571235636; _fbp=fb.1.1571235636317.604574724; intercom-id-c9fj6354=01941621-342b-4320-ad75-53826b5a002c; hubspotutk=105fad8a9b12bfed67330a0dbfe12c61; _gid=GA1.2.1843278152.1572282100; __zlcmid=uzie5dAUbB300Y; __hstc=69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3; __hssrc=1; fs_intercom=4655074328608768:4513847218700288; XSRF-TOKEN=0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da; referrer=www.google.com; landing_page=https://algorithmia.com/; signup_session=true; ajs_user_id=%22acunniffe%22; fs_uid=rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636; new-algo-language=scala; __hssc=69686351.5.1572357353053; intercom-session-c9fj6354=L08zdks3K1FOZEs0NngyR2NDQjBxN3VMb1J3dE1QZ0t4N2piYXY5ZmlNWFNVMkxseFhidkxhZ0g4QStWV2hYay0tUUtjQUtFaUZvLzJIZ0drSFdnRjM0UT09--fc3e700881b2cd1507c47ce6533f5b502d54fb7c; ALGO_SESSION=67b23b6a104343f89725af9cb2b698e9f38cbf03-last-access=2019-10-29T14%3A06%3A29.800Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "cookies": {
            "ajs_group_id": "null",
            "ajs_anonymous_id": "%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22",
            "_ga": "GA1.2.1872580011.1571235636",
            "_fbp": "fb.1.1571235636317.604574724",
            "intercom-id-c9fj6354": "01941621-342b-4320-ad75-53826b5a002c",
            "hubspotutk": "105fad8a9b12bfed67330a0dbfe12c61",
            "_gid": "GA1.2.1843278152.1572282100",
            "__zlcmid": "uzie5dAUbB300Y",
            "__hstc": "69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3",
            "__hssrc": "1",
            "fs_intercom": "4655074328608768:4513847218700288",
            "XSRF-TOKEN": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "referrer": "www.google.com",
            "landing_page": "https://algorithmia.com/",
            "signup_session": "true",
            "ajs_user_id": "%22acunniffe%22",
            "fs_uid": "rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636",
            "new-algo-language": "scala",
            "__hssc": "69686351.5.1572357353053",
            "intercom-session-c9fj6354": "L08zdks3K1FOZEs0NngyR2NDQjBxN3VMb1J3dE1QZ0t4N2piYXY5ZmlNWFNVMkxseFhidkxhZ0g4QStWV2hYay0tUUtjQUtFaUZvLzJIZ0drSFdnRjM0UT09--fc3e700881b2cd1507c47ce6533f5b502d54fb7c",
            "ALGO_SESSION": "67b23b6a104343f89725af9cb2b698e9f38cbf03-last-access=2019-10-29T14%3A06%3A29.800Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "queryParameters": {}
        },
        "response": {
          "statusCode": 200,
          "headers": {
            "content-encoding": "gzip",
            "content-type": "application/json; charset=utf-8",
            "date": "Tue, 29 Oct 2019 14:06:31 GMT",
            "set-cookie": "ALGO_SESSION=b04870a20d2478ed011f021a7573f745b758099c-last-access=2019-10-29T14%3A06%3A31.458Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3; Max-Age=86400; Expires=Wed, 30 Oct 2019 14:06:31 GMT; Path=/; Domain=algorithmia.com; Secure; HTTPOnly",
            "strict-transport-security": "max-age=86400; includeSubDomains",
            "vary": "Accept-Encoding",
            "x-content-type-options": "nosniff",
            "x-frame-options": "DENY",
            "content-length": "559",
            "connection": "keep-alive"
          },
          "body": {
            "category": {
              "tag": "machine learning",
              "title": "Machine Learning",
              "tagline": "Teach your app to teach itself",
              "summary": "<p>Machine learning is a set of mathematical approaches to teaching computers to learn based on large quantities of data, instead of human step by step instruction. There are many categories of Machine Learning including <a href=\"https://blog.algorithmia.com/introduction-natural-language-processing-nlp/\" target=\"_blank\" rel=\"nofollow\">Natural Language Processing</a>, <a href=\"https://algorithmia.com/tags/computer-vision\" target=\"_blank\" rel=\"nofollow\">Computer Vision</a>, <a href=\"https://algorithmia.com/tags/time-series\" target=\"_blank\" rel=\"nofollow\">Time Series</a>, and more.</p>\n<h2 id=\"demos-\">Demos:</h2>\n<ul>\n<li><p><a href=\"http://demos.algorithmia.com/video-metadata/\" target=\"_blank\" rel=\"nofollow\">Search the content within any video</a></p>\n</li>\n<li><p><a href=\"http://demos.algorithmia.com/colorize-photos/\" target=\"_blank\" rel=\"nofollow\">Colorize a Black and White Photo</a></p>\n</li>\n<li><a href=\"https://algorithmia.com/use-cases\" target=\"_blank\" rel=\"nofollow\">The whole Machine Learning demo gallery</a> :)</li>\n</ul>\n",
              "icon": "/public/categories/synapse/machine-learning.svg",
              "position": 2
            }
          }
        }
      },
      {
        "request": {
          "url": "/meta/algorithms",
          "method": "GET",
          "headers": {
            "host": "algorithmia.com",
            "connection": "keep-alive",
            "pragma": "no-cache",
            "cache-control": "no-cache",
            "accept": "application/json, text/plain, */*",
            "dnt": "1",
            "x-xsrf-token": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "cors",
            "referer": "https://algorithmia.com/algorithms",
            "accept-encoding": "gzip, deflate, br",
            "accept-language": "en-US,en;q=0.9",
            "cookie": "ajs_group_id=null; ajs_anonymous_id=%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22; _ga=GA1.2.1872580011.1571235636; _fbp=fb.1.1571235636317.604574724; intercom-id-c9fj6354=01941621-342b-4320-ad75-53826b5a002c; hubspotutk=105fad8a9b12bfed67330a0dbfe12c61; _gid=GA1.2.1843278152.1572282100; __zlcmid=uzie5dAUbB300Y; __hstc=69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3; __hssrc=1; fs_intercom=4655074328608768:4513847218700288; XSRF-TOKEN=0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da; referrer=www.google.com; landing_page=https://algorithmia.com/; signup_session=true; ajs_user_id=%22acunniffe%22; fs_uid=rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636; new-algo-language=scala; __hssc=69686351.5.1572357353053; intercom-session-c9fj6354=L08zdks3K1FOZEs0NngyR2NDQjBxN3VMb1J3dE1QZ0t4N2piYXY5ZmlNWFNVMkxseFhidkxhZ0g4QStWV2hYay0tUUtjQUtFaUZvLzJIZ0drSFdnRjM0UT09--fc3e700881b2cd1507c47ce6533f5b502d54fb7c; ALGO_SESSION=b04870a20d2478ed011f021a7573f745b758099c-last-access=2019-10-29T14%3A06%3A31.458Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "cookies": {
            "ajs_group_id": "null",
            "ajs_anonymous_id": "%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22",
            "_ga": "GA1.2.1872580011.1571235636",
            "_fbp": "fb.1.1571235636317.604574724",
            "intercom-id-c9fj6354": "01941621-342b-4320-ad75-53826b5a002c",
            "hubspotutk": "105fad8a9b12bfed67330a0dbfe12c61",
            "_gid": "GA1.2.1843278152.1572282100",
            "__zlcmid": "uzie5dAUbB300Y",
            "__hstc": "69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3",
            "__hssrc": "1",
            "fs_intercom": "4655074328608768:4513847218700288",
            "XSRF-TOKEN": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "referrer": "www.google.com",
            "landing_page": "https://algorithmia.com/",
            "signup_session": "true",
            "ajs_user_id": "%22acunniffe%22",
            "fs_uid": "rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636",
            "new-algo-language": "scala",
            "__hssc": "69686351.5.1572357353053",
            "intercom-session-c9fj6354": "L08zdks3K1FOZEs0NngyR2NDQjBxN3VMb1J3dE1QZ0t4N2piYXY5ZmlNWFNVMkxseFhidkxhZ0g4QStWV2hYay0tUUtjQUtFaUZvLzJIZ0drSFdnRjM0UT09--fc3e700881b2cd1507c47ce6533f5b502d54fb7c",
            "ALGO_SESSION": "b04870a20d2478ed011f021a7573f745b758099c-last-access=2019-10-29T14%3A06%3A31.458Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "queryParameters": {
            "order": "most_called",
            "tag": "machine-learning"
          }
        },
        "response": {
          "statusCode": 200,
          "headers": {
            "content-encoding": "gzip",
            "content-type": "application/json; charset=utf-8",
            "date": "Tue, 29 Oct 2019 14:06:31 GMT",
            "set-cookie": "ALGO_SESSION=d19c446d81448d5bde1c76365310751b16149901-last-access=2019-10-29T14%3A06%3A31.489Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3; Max-Age=86400; Expires=Wed, 30 Oct 2019 14:06:31 GMT; Path=/; Domain=algorithmia.com; Secure; HTTPOnly",
            "strict-transport-security": "max-age=86400; includeSubDomains",
            "vary": "Accept-Encoding",
            "x-content-type-options": "nosniff",
            "x-frame-options": "DENY",
            "content-length": "6125",
            "connection": "keep-alive"
          },
          "body": [
            {
              "username": "PetiteProgrammer",
              "algoname": "ProgrammingLanguageIdentification",
              "algolabel": "Programming Language Identification",
              "language": "Python 3.x",
              "card_line": "Detect the programming language of source code",
              "doc_url": "https://algorithmia.com/algorithms/PetiteProgrammer/ProgrammingLanguageIdentification",
              "api_url": "https://api.algorithmia.com/v1/algo/PetiteProgrammer/ProgrammingLanguageIdentification"
            },
            {
              "username": "dlib",
              "algoname": "FaceDetection",
              "algolabel": "Face Detection",
              "language": "Python 2.x",
              "card_line": "This algorithm detects human faces in given images.",
              "doc_url": "https://algorithmia.com/algorithms/dlib/FaceDetection",
              "api_url": "https://api.algorithmia.com/v1/algo/dlib/FaceDetection"
            },
            {
              "username": "nlp",
              "algoname": "Doc2Vec",
              "algolabel": "Doc2Vec",
              "language": "Python 2.x",
              "card_line": "Vectorize documents of arbitrary length",
              "doc_url": "https://algorithmia.com/algorithms/nlp/Doc2Vec",
              "api_url": "https://api.algorithmia.com/v1/algo/nlp/Doc2Vec"
            },
            {
              "username": "classification",
              "algoname": "GenderByName",
              "algolabel": "Gender By Name (First, Last or Full Name) Classifier",
              "language": "Python 3.x",
              "card_line": "Fast gender classifier by name. Classification works with first and last name (order-independent); last name optional.",
              "doc_url": "https://algorithmia.com/algorithms/classification/GenderByName",
              "api_url": "https://api.algorithmia.com/v1/algo/classification/GenderByName"
            },
            {
              "username": "paranoia",
              "algoname": "FpGrowth",
              "algolabel": "FpGrowth",
              "language": "Java",
              "card_line": "A scalable method for finding frequent patterns within large datasets",
              "submitted_at": "2015-12-07T00:08:45.000Z",
              "doc_url": "https://algorithmia.com/algorithms/paranoia/FpGrowth",
              "api_url": "https://api.algorithmia.com/v1/algo/paranoia/FpGrowth"
            },
            {
              "username": "deeplearning",
              "algoname": "ObjectDetectionCOCO",
              "algolabel": "ObjectDetection - COCO",
              "language": "Python 3.x",
              "card_line": "Detecting Objects in complex scenes",
              "doc_url": "https://algorithmia.com/algorithms/deeplearning/ObjectDetectionCOCO",
              "api_url": "https://api.algorithmia.com/v1/algo/deeplearning/ObjectDetectionCOCO"
            },
            {
              "username": "nlp",
              "algoname": "DocumentClassifier",
              "algolabel": "Document Classifier",
              "language": "Scala",
              "card_line": "Classify or Recommend documents with ease",
              "doc_url": "https://algorithmia.com/algorithms/nlp/DocumentClassifier",
              "api_url": "https://api.algorithmia.com/v1/algo/nlp/DocumentClassifier"
            },
            {
              "username": "PetiteProgrammer",
              "algoname": "TextSimilarity",
              "algolabel": "Text Similarity",
              "language": "Python 3.x",
              "card_line": "Find the most similar text files within a collection of documents",
              "doc_url": "https://algorithmia.com/algorithms/PetiteProgrammer/TextSimilarity",
              "api_url": "https://api.algorithmia.com/v1/algo/PetiteProgrammer/TextSimilarity"
            },
            {
              "username": "weka",
              "algoname": "WekaClassification",
              "algolabel": "Weka Classification",
              "language": "Java",
              "card_line": "This is the main algorithm that all of the Weka classification algorithms call.",
              "submitted_at": "2015-10-02T20:39:49.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/WekaClassification",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/WekaClassification"
            },
            {
              "username": "mahout",
              "algoname": "DigitRecognizer",
              "algolabel": "Digit Recognizer",
              "language": "Java",
              "card_line": "Applies a random forest model trained on the MNIST handwritten digit dataset to a 28 by 28 grayscale pixel grid, which is input as a double array of length 784.",
              "submitted_at": "2015-03-11T22:41:52.000Z",
              "doc_url": "https://algorithmia.com/algorithms/mahout/DigitRecognizer",
              "api_url": "https://api.algorithmia.com/v1/algo/mahout/DigitRecognizer"
            },
            {
              "username": "mahout",
              "algoname": "RandomForestApply",
              "algolabel": "Random Forest Apply",
              "language": "Java",
              "card_line": "Apply trained Mahout Random Forest Classifier to data",
              "submitted_at": "2015-03-11T21:13:18.000Z",
              "doc_url": "https://algorithmia.com/algorithms/mahout/RandomForestApply",
              "api_url": "https://api.algorithmia.com/v1/algo/mahout/RandomForestApply"
            },
            {
              "username": "deeplearning",
              "algoname": "Parsey",
              "algolabel": "Parsey McParseface",
              "language": "Scala",
              "card_line": "Parse sentences with ease.",
              "doc_url": "https://algorithmia.com/algorithms/deeplearning/Parsey",
              "api_url": "https://api.algorithmia.com/v1/algo/deeplearning/Parsey"
            },
            {
              "username": "character_recognition",
              "algoname": "tesseract",
              "algolabel": "tesseract",
              "language": "Python 2.x",
              "card_line": "extracts text with deep learning",
              "doc_url": "https://algorithmia.com/algorithms/character_recognition/tesseract",
              "api_url": "https://api.algorithmia.com/v1/algo/character_recognition/tesseract"
            },
            {
              "username": "PetiteProgrammer",
              "algoname": "NamedEntityRecognition",
              "algolabel": "Named Entity Recognition (Detection of Persons, Dates, Locations and much more)",
              "language": "Python 3.x",
              "card_line": "Extracts entities out of text such as persons and organizations, with high precision. ",
              "doc_url": "https://algorithmia.com/algorithms/PetiteProgrammer/NamedEntityRecognition",
              "api_url": "https://api.algorithmia.com/v1/algo/PetiteProgrammer/NamedEntityRecognition"
            },
            {
              "username": "weka",
              "algoname": "DigitRecognition",
              "algolabel": "Digit Recognition",
              "language": "Java",
              "card_line": "The Digit Recognition algorithm that uses a Random Forest model trained on 50000 samples obtained from the MNIST digits dataset.",
              "submitted_at": "2015-05-01T01:23:58.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/DigitRecognition",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/DigitRecognition"
            },
            {
              "username": "bkyan",
              "algoname": "StyleThief",
              "algolabel": "StyleThief (Open Source)",
              "language": "Python 2.x",
              "card_line": "Anish Athalye's Neural Style Transfer Using TensorFlow",
              "doc_url": "https://algorithmia.com/algorithms/bkyan/StyleThief",
              "api_url": "https://api.algorithmia.com/v1/algo/bkyan/StyleThief"
            },
            {
              "username": "PetiteProgrammer",
              "algoname": "NumberExtractor",
              "algolabel": "NumberExtractor",
              "language": "Python 3.x",
              "card_line": "Extracts numbers (positive, negative and floats) from raw text.",
              "doc_url": "https://algorithmia.com/algorithms/PetiteProgrammer/NumberExtractor",
              "api_url": "https://api.algorithmia.com/v1/algo/PetiteProgrammer/NumberExtractor"
            },
            {
              "username": "PetiteProgrammer",
              "algoname": "DateExtractor",
              "algolabel": "DateExtractor",
              "language": "Python 3.x",
              "card_line": "Extracts dates from raw text",
              "doc_url": "https://algorithmia.com/algorithms/PetiteProgrammer/DateExtractor",
              "api_url": "https://api.algorithmia.com/v1/algo/PetiteProgrammer/DateExtractor"
            },
            {
              "username": "media",
              "algoname": "ContentAwareResize",
              "algolabel": "Content Aware Resize",
              "language": "Python 2.x",
              "card_line": "Resize images automatically, without removing important features such as faces",
              "doc_url": "https://algorithmia.com/algorithms/media/ContentAwareResize",
              "api_url": "https://api.algorithmia.com/v1/algo/media/ContentAwareResize"
            },
            {
              "username": "kenny",
              "algoname": "WekaCluster",
              "algolabel": "Weka Cluster",
              "language": "Java",
              "card_line": "k-means clustering using the Weka machine learning library.",
              "submitted_at": "2015-04-22T01:40:46.000Z",
              "doc_url": "https://algorithmia.com/algorithms/kenny/WekaCluster",
              "api_url": "https://api.algorithmia.com/v1/algo/kenny/WekaCluster"
            },
            {
              "username": "mheimann",
              "algoname": "RecognizeFaces",
              "algolabel": "Recognize Faces",
              "language": "Python 2.x",
              "card_line": "Uses a trained face recognizer to identify faces.",
              "submitted_at": "2015-10-06T00:50:11.000Z",
              "doc_url": "https://algorithmia.com/algorithms/mheimann/RecognizeFaces",
              "api_url": "https://api.algorithmia.com/v1/algo/mheimann/RecognizeFaces"
            },
            {
              "username": "guardlogic",
              "algoname": "AdultImageClassifier",
              "algolabel": "AdultImageClassifier",
              "language": "Python 2.x",
              "card_line": "  Assesses if an image contains \"Adult\" content where the term \"Adult\" is defined as \"sexually explicit\".",
              "doc_url": "https://algorithmia.com/algorithms/guardlogic/AdultImageClassifier",
              "api_url": "https://api.algorithmia.com/v1/algo/guardlogic/AdultImageClassifier"
            },
            {
              "username": "cv",
              "algoname": "FaceRecognition",
              "algolabel": "Face Recognition",
              "language": "Python 2.x",
              "card_line": "Train and recognize human faces",
              "doc_url": "https://algorithmia.com/algorithms/cv/FaceRecognition",
              "api_url": "https://api.algorithmia.com/v1/algo/cv/FaceRecognition"
            },
            {
              "username": "character_recognition",
              "algoname": "TextDetectionCTPN",
              "algolabel": "Text Detection (CTPN)",
              "language": "Python 2.x",
              "card_line": "detect text or words in any kind of image including both scanned documents and natural images.",
              "doc_url": "https://algorithmia.com/algorithms/character_recognition/TextDetectionCTPN",
              "api_url": "https://api.algorithmia.com/v1/algo/character_recognition/TextDetectionCTPN"
            },
            {
              "username": "web",
              "algoname": "MaliciousDomainClassifier",
              "algolabel": "Malicious Domain Classifier",
              "language": "Java",
              "card_line": "Determine whether a domain name is safe or malicious",
              "doc_url": "https://algorithmia.com/algorithms/web/MaliciousDomainClassifier",
              "api_url": "https://api.algorithmia.com/v1/algo/web/MaliciousDomainClassifier"
            },
            {
              "username": "character_recognition",
              "algoname": "NaturalTextNet",
              "algolabel": "Natural Text Net",
              "language": "Python 3.x",
              "card_line": "Extracts text from natural scene images",
              "doc_url": "https://algorithmia.com/algorithms/character_recognition/NaturalTextNet",
              "api_url": "https://api.algorithmia.com/v1/algo/character_recognition/NaturalTextNet"
            },
            {
              "username": "PetiteProgrammer",
              "algoname": "pythoncodeprediction",
              "algolabel": "Python Code Prediction",
              "language": "Python 3.x",
              "card_line": "Next word/sequence prediction for Python code",
              "doc_url": "https://algorithmia.com/algorithms/PetiteProgrammer/pythoncodeprediction",
              "api_url": "https://api.algorithmia.com/v1/algo/PetiteProgrammer/pythoncodeprediction"
            },
            {
              "username": "sfw",
              "algoname": "VideoNudityDetection",
              "algolabel": "Video Nudity Detection",
              "language": "Python 2.x",
              "card_line": "Detect Nudity in Video",
              "doc_url": "https://algorithmia.com/algorithms/sfw/VideoNudityDetection",
              "api_url": "https://api.algorithmia.com/v1/algo/sfw/VideoNudityDetection"
            },
            {
              "username": "character_recognition",
              "algoname": "SmartTextExtraction",
              "algolabel": "Smart Text Extraction",
              "language": "Scala",
              "card_line": "Extract text the smart way",
              "doc_url": "https://algorithmia.com/algorithms/character_recognition/SmartTextExtraction",
              "api_url": "https://api.algorithmia.com/v1/algo/character_recognition/SmartTextExtraction"
            },
            {
              "username": "wuhuikai",
              "algoname": "A2RL_online",
              "algolabel": "A2RL: Auto Image Cropping",
              "language": "Python 3.x",
              "card_line": "Auto-crop given image to improve the aesthetic.",
              "doc_url": "https://algorithmia.com/algorithms/wuhuikai/A2RL_online",
              "api_url": "https://api.algorithmia.com/v1/algo/wuhuikai/A2RL_online"
            },
            {
              "username": "conctest",
              "algoname": "DigitRecognition",
              "algolabel": "Digit Recognition",
              "language": "Python 2.x",
              "card_line": "Recognizes handwritten digits using a pre trained  Convolutional Neural Network .",
              "submitted_at": "2015-06-22T15:39:45.000Z",
              "doc_url": "https://algorithmia.com/algorithms/conctest/DigitRecognition",
              "api_url": "https://api.algorithmia.com/v1/algo/conctest/DigitRecognition"
            },
            {
              "username": "PetiteProgrammer",
              "algoname": "ImageClassifier",
              "algolabel": "Image Classifier",
              "language": "Python 3.x",
              "card_line": "Highly Accurate Image Classifier",
              "doc_url": "https://algorithmia.com/algorithms/PetiteProgrammer/ImageClassifier",
              "api_url": "https://api.algorithmia.com/v1/algo/PetiteProgrammer/ImageClassifier"
            },
            {
              "username": "Aluxian",
              "algoname": "AffinityAnalysisFPGrowth",
              "algolabel": "Affinity Analysis for Market Basket Recommendation (FP-Growth)",
              "language": "Java",
              "card_line": "Affinity analysis is an analytical technique that aims to discover relationships between activities and preferences that pertain to specific individuals.",
              "submitted_at": "2015-10-20T21:44:38.000Z",
              "doc_url": "https://algorithmia.com/algorithms/Aluxian/AffinityAnalysisFPGrowth",
              "api_url": "https://api.algorithmia.com/v1/algo/Aluxian/AffinityAnalysisFPGrowth"
            },
            {
              "username": "Wolverine",
              "algoname": "FastAnomalydetection",
              "algolabel": "Fast Anomaly Detection",
              "language": "Python 3.x",
              "card_line": "A fast Anomaly detection algorithm best used for IoT, Fraud detection and IT Ops",
              "doc_url": "https://algorithmia.com/algorithms/Wolverine/FastAnomalydetection",
              "api_url": "https://api.algorithmia.com/v1/algo/Wolverine/FastAnomalydetection"
            },
            {
              "username": "weka",
              "algoname": "RandomForest",
              "algolabel": "RandomForest",
              "language": "Java",
              "card_line": "This is the RandomForest classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/trees/RandomForest.html",
              "submitted_at": "2015-05-01T01:13:46.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/RandomForest",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/RandomForest"
            },
            {
              "username": "tags",
              "algoname": "RecommendGithub",
              "algolabel": "Recommend Github",
              "language": "Java",
              "card_line": "Recommend a github repos based on a given one",
              "submitted_at": "2016-02-02T23:35:11.000Z",
              "doc_url": "https://algorithmia.com/algorithms/tags/RecommendGithub",
              "api_url": "https://api.algorithmia.com/v1/algo/tags/RecommendGithub"
            },
            {
              "username": "PetiteProgrammer",
              "algoname": "NaturalLanguageUnderstanding",
              "algolabel": "Natural Language Understanding",
              "language": "Python 3.x",
              "card_line": "Understand intents, time, etc. from natural language ",
              "doc_url": "https://algorithmia.com/algorithms/PetiteProgrammer/NaturalLanguageUnderstanding",
              "api_url": "https://api.algorithmia.com/v1/algo/PetiteProgrammer/NaturalLanguageUnderstanding"
            },
            {
              "username": "cmartines",
              "algoname": "Chartie",
              "algolabel": "Chartie",
              "language": "Java",
              "card_line": "See beyond the numbers The new free web API that finds the  trend event  from your  numerical arrays For more detail : w...",
              "submitted_at": "2015-03-15T15:24:44.000Z",
              "doc_url": "https://algorithmia.com/algorithms/cmartines/Chartie",
              "api_url": "https://api.algorithmia.com/v1/algo/cmartines/Chartie"
            },
            {
              "username": "ryval",
              "algoname": "LogisticRegression",
              "algolabel": "LogisticRegression",
              "language": "Python 2.x",
              "card_line": "Train a Logistic Regression model and use it to predict unknown classifiers.",
              "submitted_at": "2015-08-20T23:24:10.000Z",
              "doc_url": "https://algorithmia.com/algorithms/ryval/LogisticRegression",
              "api_url": "https://api.algorithmia.com/v1/algo/ryval/LogisticRegression"
            },
            {
              "username": "sklearn",
              "algoname": "GeographicSpectralClustering",
              "algolabel": "Geographic Spectral Clustering",
              "language": "Python 2.x",
              "card_line": "Spectral clustering for geographic (lat/long) data.",
              "submitted_at": "2015-05-01T01:02:21.000Z",
              "doc_url": "https://algorithmia.com/algorithms/sklearn/GeographicSpectralClustering",
              "api_url": "https://api.algorithmia.com/v1/algo/sklearn/GeographicSpectralClustering"
            },
            {
              "username": "mahout",
              "algoname": "Recommendation",
              "algolabel": "Recommendation",
              "language": "Java",
              "card_line": "Overview Eventually we will expand this to allow different parameters and options for neighborhood and similarity functi...",
              "submitted_at": "2015-06-29T21:29:16.000Z",
              "doc_url": "https://algorithmia.com/algorithms/mahout/Recommendation",
              "api_url": "https://api.algorithmia.com/v1/algo/mahout/Recommendation"
            },
            {
              "username": "berlius",
              "algoname": "colorize",
              "algolabel": "colorize",
              "language": "Python 2.x",
              "card_line": "Colorize black and white images with Berkeley model",
              "doc_url": "https://algorithmia.com/algorithms/berlius/colorize",
              "api_url": "https://api.algorithmia.com/v1/algo/berlius/colorize"
            },
            {
              "username": "dbgannon",
              "algoname": "SciDocClassifier",
              "algolabel": "SciDocClassifier",
              "language": "Python 3.x",
              "card_line": "Overview SciDocClassifier uses a ML Model created by Gensim Doc2vec to classify scientific abstracts into five...",
              "doc_url": "https://algorithmia.com/algorithms/dbgannon/SciDocClassifier",
              "api_url": "https://api.algorithmia.com/v1/algo/dbgannon/SciDocClassifier"
            },
            {
              "username": "mheimann",
              "algoname": "TrainFaceRecognizer",
              "algolabel": "Train Face Recognizer",
              "language": "Python 2.x",
              "card_line": "Trains a face recognizer from a labeled set of faces.",
              "submitted_at": "2015-08-08T00:03:29.000Z",
              "doc_url": "https://algorithmia.com/algorithms/mheimann/TrainFaceRecognizer",
              "api_url": "https://api.algorithmia.com/v1/algo/mheimann/TrainFaceRecognizer"
            },
            {
              "username": "mgomezm",
              "algoname": "AccelerometerClassifier",
              "algolabel": "AccelerometerClassifier",
              "language": "Java",
              "card_line": "Given x,y,z accelerometer readings, will determine whther the user is Stationary, Walking, or Running.",
              "submitted_at": "2015-10-19T21:17:41.000Z",
              "doc_url": "https://algorithmia.com/algorithms/mgomezm/AccelerometerClassifier",
              "api_url": "https://api.algorithmia.com/v1/algo/mgomezm/AccelerometerClassifier"
            },
            {
              "username": "wuhuikai",
              "algoname": "A2RL",
              "algolabel": "A2RL: Auto Image Cropping",
              "language": "Python 3.x",
              "card_line": "Auto-crop given image to improve the aesthetic.",
              "doc_url": "https://algorithmia.com/algorithms/wuhuikai/A2RL",
              "api_url": "https://api.algorithmia.com/v1/algo/wuhuikai/A2RL"
            },
            {
              "username": "lucianosantabrigida",
              "algoname": "ptwiki2vec",
              "algolabel": "ptwiki2vec",
              "language": "Python 3.x",
              "card_line": "[WIP] portuguese wikipedia vectors",
              "doc_url": "https://algorithmia.com/algorithms/lucianosantabrigida/ptwiki2vec",
              "api_url": "https://api.algorithmia.com/v1/algo/lucianosantabrigida/ptwiki2vec"
            },
            {
              "username": "pappacena",
              "algoname": "kmeans",
              "algolabel": "k-means",
              "language": "Python 3.x",
              "card_line": "Simple k-means algorithm implementation",
              "doc_url": "https://algorithmia.com/algorithms/pappacena/kmeans",
              "api_url": "https://api.algorithmia.com/v1/algo/pappacena/kmeans"
            },
            {
              "username": "imageclassification",
              "algoname": "ResNetFeatureExtraction",
              "algolabel": "ResNet Feature Extraction",
              "language": "Python 3.x",
              "card_line": " Extract ResNet feature vectors from images. ",
              "doc_url": "https://algorithmia.com/algorithms/imageclassification/ResNetFeatureExtraction",
              "api_url": "https://api.algorithmia.com/v1/algo/imageclassification/ResNetFeatureExtraction"
            },
            {
              "username": "weka",
              "algoname": "NaiveBayes",
              "algolabel": "NaiveBayes",
              "language": "Java",
              "card_line": "This is the NaiveBayes classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/bayes/NaiveBayes.html",
              "submitted_at": "2015-05-01T01:32:40.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/NaiveBayes",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/NaiveBayes"
            },
            {
              "username": "jagiella",
              "algoname": "BirthDeathProcess",
              "algolabel": "BirthDeathProcess",
              "language": "Java",
              "submitted_at": "2015-10-19T21:52:34.000Z",
              "doc_url": "https://algorithmia.com/algorithms/jagiella/BirthDeathProcess",
              "api_url": "https://api.algorithmia.com/v1/algo/jagiella/BirthDeathProcess"
            },
            {
              "username": "thatguy2048",
              "algoname": "SimpleKNN",
              "algolabel": "SimpleKNN",
              "language": "Java",
              "card_line": "This is a simple KNN classifier which accepts a given number of training data points, classes for those points and sample points to evaluate.",
              "submitted_at": "2015-10-19T21:35:10.000Z",
              "doc_url": "https://algorithmia.com/algorithms/thatguy2048/SimpleKNN",
              "api_url": "https://api.algorithmia.com/v1/algo/thatguy2048/SimpleKNN"
            },
            {
              "username": "PetiteProgrammer",
              "algoname": "AutoComplete",
              "algolabel": "AutoComplete (Auto Complete, Next Word Prediction)",
              "language": "Python 3.x",
              "card_line": "Completes sentences based on user input ",
              "doc_url": "https://algorithmia.com/algorithms/PetiteProgrammer/AutoComplete",
              "api_url": "https://api.algorithmia.com/v1/algo/PetiteProgrammer/AutoComplete"
            },
            {
              "username": "imageclassification",
              "algoname": "ImageClassificationTrainer",
              "algolabel": "Image Classification Trainer",
              "language": "Python 3.x",
              "card_line": " Train fine-tuned image classifiers with transfer learning. ",
              "doc_url": "https://algorithmia.com/algorithms/imageclassification/ImageClassificationTrainer",
              "api_url": "https://api.algorithmia.com/v1/algo/imageclassification/ImageClassificationTrainer"
            },
            {
              "username": "buliginleo",
              "algoname": "NudityCheck",
              "algolabel": "NudityCheck",
              "language": "Python 3.x",
              "card_line": "Free neural network for check nudity by link",
              "doc_url": "https://algorithmia.com/algorithms/buliginleo/NudityCheck",
              "api_url": "https://api.algorithmia.com/v1/algo/buliginleo/NudityCheck"
            },
            {
              "username": "ml",
              "algoname": "LearnHMM",
              "algolabel": "LearnHMM",
              "language": "Java",
              "card_line": "Learns a Hidden Markov Model (HMM) based on a series of example state transitions.",
              "submitted_at": "2015-10-19T21:17:18.000Z",
              "doc_url": "https://algorithmia.com/algorithms/ml/LearnHMM",
              "api_url": "https://api.algorithmia.com/v1/algo/ml/LearnHMM"
            },
            {
              "username": "sklearn",
              "algoname": "GeographicOutlierDetection",
              "algolabel": "Geographic Outlier Detection",
              "language": "Python 2.x",
              "card_line": "This algorithm finds the most unexpected events in a set of geographic events relative to some reference set of events.",
              "submitted_at": "2015-05-04T20:16:28.000Z",
              "doc_url": "https://algorithmia.com/algorithms/sklearn/GeographicOutlierDetection",
              "api_url": "https://api.algorithmia.com/v1/algo/sklearn/GeographicOutlierDetection"
            },
            {
              "username": "poze",
              "algoname": "poseEstimation_v2",
              "algolabel": "Pose Estimation",
              "language": "Python 3.x",
              "card_line": " Detect body pose for multiple people on image.",
              "doc_url": "https://algorithmia.com/algorithms/poze/poseEstimation_v2",
              "api_url": "https://api.algorithmia.com/v1/algo/poze/poseEstimation_v2"
            },
            {
              "username": "weka",
              "algoname": "CsvToArff",
              "algolabel": "CsvToArff",
              "language": "Java",
              "card_line": "Converts .csv",
              "submitted_at": "2015-10-04T06:26:04.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/CsvToArff",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/CsvToArff"
            },
            {
              "username": "jtbandes",
              "algoname": "LinearRegression",
              "algolabel": "LinearRegression",
              "language": "Java",
              "card_line": "Performs a least-squares regression with one independent variable.",
              "submitted_at": "2015-10-19T21:19:41.000Z",
              "doc_url": "https://algorithmia.com/algorithms/jtbandes/LinearRegression",
              "api_url": "https://api.algorithmia.com/v1/algo/jtbandes/LinearRegression"
            },
            {
              "username": "ml",
              "algoname": "ClickStreamTransitions",
              "algolabel": "Click Stream Transitions",
              "language": "Java",
              "card_line": "Returns the top 5 most \"interesting\" transitions learned by the Hidden Markov Model.",
              "submitted_at": "2015-10-19T21:17:26.000Z",
              "doc_url": "https://algorithmia.com/algorithms/ml/ClickStreamTransitions",
              "api_url": "https://api.algorithmia.com/v1/algo/ml/ClickStreamTransitions"
            },
            {
              "username": "weka",
              "algoname": "KStar",
              "algolabel": "KStar",
              "language": "Java",
              "card_line": "This is the KStar classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/lazy/KStar.html",
              "submitted_at": "2015-05-01T01:30:46.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/KStar",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/KStar"
            },
            {
              "username": "weka",
              "algoname": "BayesianLogisticRegression",
              "algolabel": "BayesianLogisticRegression",
              "language": "Java",
              "card_line": "This is the BayesianLogisticRegression classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/bayes/BayesianLogisticRegression.html",
              "submitted_at": "2015-05-01T01:33:01.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/BayesianLogisticRegression",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/BayesianLogisticRegression"
            },
            {
              "username": "weka",
              "algoname": "NaiveBayesSimple",
              "algolabel": "NaiveBayesSimple",
              "language": "Java",
              "card_line": "This is the NaiveBayesSimple classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/bayes/NaiveBayesSimple.html",
              "submitted_at": "2015-05-01T01:32:25.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/NaiveBayesSimple",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/NaiveBayesSimple"
            },
            {
              "username": "weka",
              "algoname": "ZeroR",
              "algolabel": "ZeroR",
              "language": "Java",
              "card_line": "This is the ZeroR classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/rules/ZeroR.html",
              "submitted_at": "2015-05-01T01:16:48.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/ZeroR",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/ZeroR"
            },
            {
              "username": "mahout",
              "algoname": "RandomForestTrain",
              "algolabel": "Random Forest Train",
              "language": "Java",
              "card_line": "Trains a Mahout random forest classifier.",
              "submitted_at": "2015-03-11T21:09:01.000Z",
              "doc_url": "https://algorithmia.com/algorithms/mahout/RandomForestTrain",
              "api_url": "https://api.algorithmia.com/v1/algo/mahout/RandomForestTrain"
            },
            {
              "username": "weka",
              "algoname": "LogitBoost",
              "algolabel": "Logit Boost",
              "language": "Java",
              "card_line": "This is the LogitBoost classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/meta/LogitBoost.html",
              "submitted_at": "2015-10-02T19:03:17.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/LogitBoost",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/LogitBoost"
            },
            {
              "username": "opencv",
              "algoname": "SVM",
              "algolabel": "SVM",
              "language": "Java",
              "card_line": "A basic interface to OpenCV's SVM, as explained in http://docs.opencv.org/java/org/opencv/ml/CvSVM.html .",
              "submitted_at": "2015-05-01T01:58:46.000Z",
              "doc_url": "https://algorithmia.com/algorithms/opencv/SVM",
              "api_url": "https://api.algorithmia.com/v1/algo/opencv/SVM"
            },
            {
              "username": "mlolson",
              "algoname": "LinearRegression",
              "algolabel": "LinearRegression",
              "language": "Java",
              "submitted_at": "2015-10-19T21:17:10.000Z",
              "doc_url": "https://algorithmia.com/algorithms/mlolson/LinearRegression",
              "api_url": "https://api.algorithmia.com/v1/algo/mlolson/LinearRegression"
            },
            {
              "username": "weka",
              "algoname": "SimpleKMeansClusterer",
              "algolabel": "SimpleKMeansClusterer",
              "language": "Java",
              "card_line": "Uses SimpleKMeans clusterer, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/clusterers/SimpleKMeans.html",
              "submitted_at": "2015-06-29T21:55:45.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/SimpleKMeansClusterer",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/SimpleKMeansClusterer"
            },
            {
              "username": "paranoia",
              "algoname": "OrdinaryLeastSquares",
              "algolabel": "OrdinaryLeastSquares",
              "language": "Java",
              "submitted_at": "2015-10-19T21:15:20.000Z",
              "doc_url": "https://algorithmia.com/algorithms/paranoia/OrdinaryLeastSquares",
              "api_url": "https://api.algorithmia.com/v1/algo/paranoia/OrdinaryLeastSquares"
            },
            {
              "username": "weka",
              "algoname": "StringToWordVector",
              "algolabel": "StringToWordVector",
              "language": "Java",
              "card_line": "This is the StringToWordVector filter, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/filters/unsupervised/attribute/StringToWordVector.html",
              "submitted_at": "2015-05-01T01:05:42.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/StringToWordVector",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/StringToWordVector"
            },
            {
              "username": "weka",
              "algoname": "JRip",
              "algolabel": "JRip",
              "language": "Java",
              "card_line": "This is the JRip classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/rules/JRip.html",
              "submitted_at": "2015-05-01T01:17:19.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/JRip",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/JRip"
            },
            {
              "username": "o12827402",
              "algoname": "fjcut_v1",
              "algolabel": "fjcut_v1",
              "language": "Python 2.x",
              "card_line": "Overview Provide a short overview of your algorithm.",
              "doc_url": "https://algorithmia.com/algorithms/o12827402/fjcut_v1",
              "api_url": "https://api.algorithmia.com/v1/algo/o12827402/fjcut_v1"
            },
            {
              "username": "weka",
              "algoname": "J48",
              "algolabel": "J48",
              "language": "Java",
              "card_line": "This is the J48 classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/trees/J48.html",
              "submitted_at": "2015-05-01T01:16:31.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/J48",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/J48"
            },
            {
              "username": "weka",
              "algoname": "DecisionTable",
              "algolabel": "DecisionTable",
              "language": "Java",
              "card_line": "This is the DecisionTable classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/rules/DecisionTable.html",
              "submitted_at": "2015-05-01T01:17:23.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/DecisionTable",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/DecisionTable"
            },
            {
              "username": "weka",
              "algoname": "SMOTE",
              "algolabel": "SMOTE",
              "language": "Java",
              "card_line": "This is the SMOTE filter, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/filters/supervised/instance/SMOTE.html",
              "submitted_at": "2015-05-01T01:04:53.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/SMOTE",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/SMOTE"
            },
            {
              "username": "weka",
              "algoname": "NBTree",
              "algolabel": "NBTree",
              "language": "Java",
              "card_line": "This is the NBTree classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/trees/NBTree.html",
              "submitted_at": "2015-05-01T01:13:47.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/NBTree",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/NBTree"
            },
            {
              "username": "opencv",
              "algoname": "RTrees",
              "algolabel": "RTrees",
              "language": "Java",
              "card_line": "A basic interface to OpenCV's RTrees, as explained in http://docs.opencv.org/java/org/opencv/ml/CvRTrees.html.",
              "submitted_at": "2015-05-01T01:58:49.000Z",
              "doc_url": "https://algorithmia.com/algorithms/opencv/RTrees",
              "api_url": "https://api.algorithmia.com/v1/algo/opencv/RTrees"
            },
            {
              "username": "weka",
              "algoname": "PART",
              "algolabel": "PART",
              "language": "Java",
              "card_line": "This is the PART classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/rules/PART.html",
              "submitted_at": "2015-05-01T01:16:57.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/PART",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/PART"
            },
            {
              "username": "weka",
              "algoname": "LibLINEAR",
              "algolabel": "LibLINEAR",
              "language": "Java",
              "card_line": "This is the LibLINEAR classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/functions/LibLINEAR.html",
              "submitted_at": "2015-05-01T01:32:01.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/LibLINEAR",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/LibLINEAR"
            },
            {
              "username": "weka",
              "algoname": "LinearRegression",
              "algolabel": "LinearRegression",
              "language": "Java",
              "card_line": "This is the LinearRegression classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/functions/LinearRegression.html",
              "submitted_at": "2015-05-01T01:31:56.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/LinearRegression",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/LinearRegression"
            },
            {
              "username": "weka",
              "algoname": "Id3",
              "algolabel": "Id3",
              "language": "Java",
              "card_line": "This is the Id3 classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/trees/Id3.html",
              "submitted_at": "2015-05-01T01:16:30.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/Id3",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/Id3"
            },
            {
              "username": "weka",
              "algoname": "MathExpression",
              "algolabel": "MathExpression",
              "language": "Java",
              "card_line": "This is the MathExpression filter, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/filters/unsupervised/attribute/MathExpression.html",
              "submitted_at": "2015-05-01T01:11:02.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/MathExpression",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/MathExpression"
            },
            {
              "username": "weka",
              "algoname": "TimeSeriesDelta",
              "algolabel": "TimeSeriesDelta",
              "language": "Java",
              "card_line": "This is the TimeSeriesDelta filter, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/filters/unsupervised/attribute/TimeSeriesDelta.html",
              "submitted_at": "2015-05-01T01:05:36.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/TimeSeriesDelta",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/TimeSeriesDelta"
            },
            {
              "username": "opencv",
              "algoname": "NormalBayesClassifier",
              "algolabel": "Normal Bayes Classifier",
              "language": "Java",
              "card_line": "A basic interface to OpenCV's DTree, as explained in http://docs.opencv.org/java/org/opencv/ml/CvNormalBayesClassifier.html .",
              "submitted_at": "2015-05-01T01:58:44.000Z",
              "doc_url": "https://algorithmia.com/algorithms/opencv/NormalBayesClassifier",
              "api_url": "https://api.algorithmia.com/v1/algo/opencv/NormalBayesClassifier"
            },
            {
              "username": "weka",
              "algoname": "ClassificationViaClustering",
              "algolabel": "ClassificationViaClustering",
              "language": "Java",
              "card_line": "This is the ClassificationViaClustering classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/meta/ClassificationViaClustering.html",
              "submitted_at": "2015-05-01T01:27:47.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/ClassificationViaClustering",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/ClassificationViaClustering"
            },
            {
              "username": "weka",
              "algoname": "M5P",
              "algolabel": "M5P",
              "language": "Java",
              "card_line": "This is the M5P classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/trees/M5P.html",
              "submitted_at": "2015-05-01T01:13:49.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/M5P",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/M5P"
            },
            {
              "username": "weka",
              "algoname": "REPTree",
              "algolabel": "REPTree",
              "language": "Java",
              "card_line": "This is the REPTree classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/trees/REPTree.html",
              "submitted_at": "2015-05-01T01:13:45.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/REPTree",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/REPTree"
            },
            {
              "username": "weka",
              "algoname": "AODE",
              "algolabel": "AODE",
              "language": "Java",
              "card_line": "This is the AODE classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/bayes/AODE.html",
              "submitted_at": "2015-05-01T01:33:12.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/AODE",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/AODE"
            },
            {
              "username": "weka",
              "algoname": "GaussianProcesses",
              "algolabel": "GaussianProcesses",
              "language": "Java",
              "card_line": "This is the GaussianProcesses classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/functions/GaussianProcesses.html",
              "submitted_at": "2015-05-01T01:32:15.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/GaussianProcesses",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/GaussianProcesses"
            },
            {
              "username": "weka",
              "algoname": "XMeansClusterer",
              "algolabel": "XMeansClusterer",
              "language": "Java",
              "card_line": "Uses XMeans clusterer, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/clusterers/XMeans.html",
              "submitted_at": "2015-06-29T21:54:59.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/XMeansClusterer",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/XMeansClusterer"
            },
            {
              "username": "weka",
              "algoname": "LibSVM",
              "algolabel": "LibSVM",
              "language": "Java",
              "card_line": "This is the LibSVM classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/functions/LibSVM.html",
              "submitted_at": "2015-05-01T01:31:58.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/LibSVM",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/LibSVM"
            },
            {
              "username": "weka",
              "algoname": "WekaHierarchicalClusterer",
              "algolabel": "WekaHierarchicalClusterer",
              "language": "Java",
              "card_line": "Uses Hierarchical clusterer, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/clusterers/HierarchicalClusterer.html",
              "submitted_at": "2015-06-29T21:41:31.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/WekaHierarchicalClusterer",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/WekaHierarchicalClusterer"
            },
            {
              "username": "weka",
              "algoname": "PaceRegression",
              "algolabel": "PaceRegression",
              "language": "Java",
              "card_line": "This is the PaceRegression classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/functions/PaceRegression.html",
              "submitted_at": "2015-05-01T01:31:37.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/PaceRegression",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/PaceRegression"
            },
            {
              "username": "weka",
              "algoname": "NNge",
              "algolabel": "NNge",
              "language": "Java",
              "card_line": "This is the NNge classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/rules/NNge.html",
              "submitted_at": "2015-05-01T01:16:59.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/NNge",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/NNge"
            },
            {
              "username": "weka",
              "algoname": "NaiveBayesUpdateable",
              "algolabel": "NaiveBayesUpdateable",
              "language": "Java",
              "card_line": "This is the NaiveBayesUpdateable classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/bayes/NaiveBayesUpdateable.html",
              "submitted_at": "2015-05-01T01:32:23.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/NaiveBayesUpdateable",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/NaiveBayesUpdateable"
            },
            {
              "username": "weka",
              "algoname": "SimpleLogistic",
              "algolabel": "SimpleLogistic",
              "language": "Java",
              "card_line": "This is the SimpleLogistic classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/functions/SimpleLogistic.html",
              "submitted_at": "2015-05-01T01:31:27.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/SimpleLogistic",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/SimpleLogistic"
            },
            {
              "username": "opencv",
              "algoname": "KNearest",
              "algolabel": "KNearest",
              "language": "Java",
              "card_line": "An interface to OpenCV's K nearest neighbor, as explained in http://docs.opencv.org/java/org/opencv/ml/CvKNearest.html .",
              "submitted_at": "2015-05-01T01:58:42.000Z",
              "doc_url": "https://algorithmia.com/algorithms/opencv/KNearest",
              "api_url": "https://api.algorithmia.com/v1/algo/opencv/KNearest"
            },
            {
              "username": "weka",
              "algoname": "Logistic",
              "algolabel": "Logistic",
              "language": "Java",
              "card_line": "This is the Logistic classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/functions/Logistic.html",
              "submitted_at": "2015-05-01T01:31:51.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/Logistic",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/Logistic"
            }
          ]
        }
      },
      {
        "request": {
          "url": "/meta/algorithms",
          "method": "GET",
          "headers": {
            "host": "algorithmia.com",
            "connection": "keep-alive",
            "pragma": "no-cache",
            "cache-control": "no-cache",
            "accept": "application/json, text/plain, */*",
            "dnt": "1",
            "x-xsrf-token": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "cors",
            "referer": "https://algorithmia.com/algorithms",
            "accept-encoding": "gzip, deflate, br",
            "accept-language": "en-US,en;q=0.9",
            "cookie": "ajs_group_id=null; ajs_anonymous_id=%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22; _ga=GA1.2.1872580011.1571235636; _fbp=fb.1.1571235636317.604574724; intercom-id-c9fj6354=01941621-342b-4320-ad75-53826b5a002c; hubspotutk=105fad8a9b12bfed67330a0dbfe12c61; _gid=GA1.2.1843278152.1572282100; __zlcmid=uzie5dAUbB300Y; __hstc=69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3; __hssrc=1; fs_intercom=4655074328608768:4513847218700288; XSRF-TOKEN=0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da; referrer=www.google.com; landing_page=https://algorithmia.com/; signup_session=true; ajs_user_id=%22acunniffe%22; fs_uid=rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636; new-algo-language=scala; __hssc=69686351.5.1572357353053; intercom-session-c9fj6354=L08zdks3K1FOZEs0NngyR2NDQjBxN3VMb1J3dE1QZ0t4N2piYXY5ZmlNWFNVMkxseFhidkxhZ0g4QStWV2hYay0tUUtjQUtFaUZvLzJIZ0drSFdnRjM0UT09--fc3e700881b2cd1507c47ce6533f5b502d54fb7c; ALGO_SESSION=b04870a20d2478ed011f021a7573f745b758099c-last-access=2019-10-29T14%3A06%3A31.458Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "cookies": {
            "ajs_group_id": "null",
            "ajs_anonymous_id": "%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22",
            "_ga": "GA1.2.1872580011.1571235636",
            "_fbp": "fb.1.1571235636317.604574724",
            "intercom-id-c9fj6354": "01941621-342b-4320-ad75-53826b5a002c",
            "hubspotutk": "105fad8a9b12bfed67330a0dbfe12c61",
            "_gid": "GA1.2.1843278152.1572282100",
            "__zlcmid": "uzie5dAUbB300Y",
            "__hstc": "69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3",
            "__hssrc": "1",
            "fs_intercom": "4655074328608768:4513847218700288",
            "XSRF-TOKEN": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "referrer": "www.google.com",
            "landing_page": "https://algorithmia.com/",
            "signup_session": "true",
            "ajs_user_id": "%22acunniffe%22",
            "fs_uid": "rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636",
            "new-algo-language": "scala",
            "__hssc": "69686351.5.1572357353053",
            "intercom-session-c9fj6354": "L08zdks3K1FOZEs0NngyR2NDQjBxN3VMb1J3dE1QZ0t4N2piYXY5ZmlNWFNVMkxseFhidkxhZ0g4QStWV2hYay0tUUtjQUtFaUZvLzJIZ0drSFdnRjM0UT09--fc3e700881b2cd1507c47ce6533f5b502d54fb7c",
            "ALGO_SESSION": "b04870a20d2478ed011f021a7573f745b758099c-last-access=2019-10-29T14%3A06%3A31.458Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "queryParameters": {
            "order": "latest",
            "tag": "machine-learning"
          }
        },
        "response": {
          "statusCode": 200,
          "headers": {
            "content-encoding": "gzip",
            "content-type": "application/json; charset=utf-8",
            "date": "Tue, 29 Oct 2019 14:06:31 GMT",
            "set-cookie": "ALGO_SESSION=5cbd730fe47238aa1cc44f64bc708e8094302e12-last-access=2019-10-29T14%3A06%3A31.643Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3; Max-Age=86400; Expires=Wed, 30 Oct 2019 14:06:31 GMT; Path=/; Domain=algorithmia.com; Secure; HTTPOnly",
            "strict-transport-security": "max-age=86400; includeSubDomains",
            "vary": "Accept-Encoding",
            "x-content-type-options": "nosniff",
            "x-frame-options": "DENY",
            "content-length": "5791",
            "connection": "keep-alive"
          },
          "body": [
            {
              "username": "o12827402",
              "algoname": "fjcut_v1",
              "algolabel": "fjcut_v1",
              "language": "Python 2.x",
              "card_line": "Overview Provide a short overview of your algorithm.",
              "doc_url": "https://algorithmia.com/algorithms/o12827402/fjcut_v1",
              "api_url": "https://api.algorithmia.com/v1/algo/o12827402/fjcut_v1"
            },
            {
              "username": "PetiteProgrammer",
              "algoname": "AutoComplete",
              "algolabel": "AutoComplete (Auto Complete, Next Word Prediction)",
              "language": "Python 3.x",
              "card_line": "Completes sentences based on user input ",
              "doc_url": "https://algorithmia.com/algorithms/PetiteProgrammer/AutoComplete",
              "api_url": "https://api.algorithmia.com/v1/algo/PetiteProgrammer/AutoComplete"
            },
            {
              "username": "classification",
              "algoname": "GenderByName",
              "algolabel": "Gender By Name (First, Last or Full Name) Classifier",
              "language": "Python 3.x",
              "card_line": "Fast gender classifier by name. Classification works with first and last name (order-independent); last name optional.",
              "doc_url": "https://algorithmia.com/algorithms/classification/GenderByName",
              "api_url": "https://api.algorithmia.com/v1/algo/classification/GenderByName"
            },
            {
              "username": "imageclassification",
              "algoname": "ResNetFeatureExtraction",
              "algolabel": "ResNet Feature Extraction",
              "language": "Python 3.x",
              "card_line": " Extract ResNet feature vectors from images. ",
              "doc_url": "https://algorithmia.com/algorithms/imageclassification/ResNetFeatureExtraction",
              "api_url": "https://api.algorithmia.com/v1/algo/imageclassification/ResNetFeatureExtraction"
            },
            {
              "username": "imageclassification",
              "algoname": "ResNetModelRunner",
              "algolabel": "ResNet Model Runner",
              "language": "Python 3.x",
              "card_line": " Deploy pre-trained ResNets for inference. ",
              "doc_url": "https://algorithmia.com/algorithms/imageclassification/ResNetModelRunner",
              "api_url": "https://api.algorithmia.com/v1/algo/imageclassification/ResNetModelRunner"
            },
            {
              "username": "imageclassification",
              "algoname": "ImageClassificationTrainer",
              "algolabel": "Image Classification Trainer",
              "language": "Python 3.x",
              "card_line": " Train fine-tuned image classifiers with transfer learning. ",
              "doc_url": "https://algorithmia.com/algorithms/imageclassification/ImageClassificationTrainer",
              "api_url": "https://api.algorithmia.com/v1/algo/imageclassification/ImageClassificationTrainer"
            },
            {
              "username": "poze",
              "algoname": "poseEstimation_v2",
              "algolabel": "Pose Estimation",
              "language": "Python 3.x",
              "card_line": " Detect body pose for multiple people on image.",
              "doc_url": "https://algorithmia.com/algorithms/poze/poseEstimation_v2",
              "api_url": "https://api.algorithmia.com/v1/algo/poze/poseEstimation_v2"
            },
            {
              "username": "PetiteProgrammer",
              "algoname": "NaturalLanguageUnderstanding",
              "algolabel": "Natural Language Understanding",
              "language": "Python 3.x",
              "card_line": "Understand intents, time, etc. from natural language ",
              "doc_url": "https://algorithmia.com/algorithms/PetiteProgrammer/NaturalLanguageUnderstanding",
              "api_url": "https://api.algorithmia.com/v1/algo/PetiteProgrammer/NaturalLanguageUnderstanding"
            },
            {
              "username": "PetiteProgrammer",
              "algoname": "NamedEntityRecognition",
              "algolabel": "Named Entity Recognition (Detection of Persons, Dates, Locations and much more)",
              "language": "Python 3.x",
              "card_line": "Extracts entities out of text such as persons and organizations, with high precision. ",
              "doc_url": "https://algorithmia.com/algorithms/PetiteProgrammer/NamedEntityRecognition",
              "api_url": "https://api.algorithmia.com/v1/algo/PetiteProgrammer/NamedEntityRecognition"
            },
            {
              "username": "guardlogic",
              "algoname": "AdultImageClassifier",
              "algolabel": "AdultImageClassifier",
              "language": "Python 2.x",
              "card_line": "  Assesses if an image contains \"Adult\" content where the term \"Adult\" is defined as \"sexually explicit\".",
              "doc_url": "https://algorithmia.com/algorithms/guardlogic/AdultImageClassifier",
              "api_url": "https://api.algorithmia.com/v1/algo/guardlogic/AdultImageClassifier"
            },
            {
              "username": "dbgannon",
              "algoname": "SciDocClassifier",
              "algolabel": "SciDocClassifier",
              "language": "Python 3.x",
              "card_line": "Overview SciDocClassifier uses a ML Model created by Gensim Doc2vec to classify scientific abstracts into five...",
              "doc_url": "https://algorithmia.com/algorithms/dbgannon/SciDocClassifier",
              "api_url": "https://api.algorithmia.com/v1/algo/dbgannon/SciDocClassifier"
            },
            {
              "username": "wuhuikai",
              "algoname": "A2RL_online",
              "algolabel": "A2RL: Auto Image Cropping",
              "language": "Python 3.x",
              "card_line": "Auto-crop given image to improve the aesthetic.",
              "doc_url": "https://algorithmia.com/algorithms/wuhuikai/A2RL_online",
              "api_url": "https://api.algorithmia.com/v1/algo/wuhuikai/A2RL_online"
            },
            {
              "username": "pappacena",
              "algoname": "kmeans",
              "algolabel": "k-means",
              "language": "Python 3.x",
              "card_line": "Simple k-means algorithm implementation",
              "doc_url": "https://algorithmia.com/algorithms/pappacena/kmeans",
              "api_url": "https://api.algorithmia.com/v1/algo/pappacena/kmeans"
            },
            {
              "username": "wuhuikai",
              "algoname": "A2RL",
              "algolabel": "A2RL: Auto Image Cropping",
              "language": "Python 3.x",
              "card_line": "Auto-crop given image to improve the aesthetic.",
              "doc_url": "https://algorithmia.com/algorithms/wuhuikai/A2RL",
              "api_url": "https://api.algorithmia.com/v1/algo/wuhuikai/A2RL"
            },
            {
              "username": "virtualman",
              "algoname": "Hello",
              "algolabel": "Hello World",
              "language": "Java",
              "card_line": "A simple \"Hello World\" algorithm, which returns \"Hello \" + the algorithm input.",
              "doc_url": "https://algorithmia.com/algorithms/virtualman/Hello",
              "api_url": "https://api.algorithmia.com/v1/algo/virtualman/Hello"
            },
            {
              "username": "deeplearning",
              "algoname": "ObjectDetectionCOCO",
              "algolabel": "ObjectDetection - COCO",
              "language": "Python 3.x",
              "card_line": "Detecting Objects in complex scenes",
              "doc_url": "https://algorithmia.com/algorithms/deeplearning/ObjectDetectionCOCO",
              "api_url": "https://api.algorithmia.com/v1/algo/deeplearning/ObjectDetectionCOCO"
            },
            {
              "username": "character_recognition",
              "algoname": "SmartTextExtraction",
              "algolabel": "Smart Text Extraction",
              "language": "Scala",
              "card_line": "Extract text the smart way",
              "doc_url": "https://algorithmia.com/algorithms/character_recognition/SmartTextExtraction",
              "api_url": "https://api.algorithmia.com/v1/algo/character_recognition/SmartTextExtraction"
            },
            {
              "username": "character_recognition",
              "algoname": "TextDetectionCTPN",
              "algolabel": "Text Detection (CTPN)",
              "language": "Python 2.x",
              "card_line": "detect text or words in any kind of image including both scanned documents and natural images.",
              "doc_url": "https://algorithmia.com/algorithms/character_recognition/TextDetectionCTPN",
              "api_url": "https://api.algorithmia.com/v1/algo/character_recognition/TextDetectionCTPN"
            },
            {
              "username": "character_recognition",
              "algoname": "NaturalTextNet",
              "algolabel": "Natural Text Net",
              "language": "Python 3.x",
              "card_line": "Extracts text from natural scene images",
              "doc_url": "https://algorithmia.com/algorithms/character_recognition/NaturalTextNet",
              "api_url": "https://api.algorithmia.com/v1/algo/character_recognition/NaturalTextNet"
            },
            {
              "username": "berlius",
              "algoname": "colorize",
              "algolabel": "colorize",
              "language": "Python 2.x",
              "card_line": "Colorize black and white images with Berkeley model",
              "doc_url": "https://algorithmia.com/algorithms/berlius/colorize",
              "api_url": "https://api.algorithmia.com/v1/algo/berlius/colorize"
            },
            {
              "username": "character_recognition",
              "algoname": "tesseract",
              "algolabel": "tesseract",
              "language": "Python 2.x",
              "card_line": "extracts text with deep learning",
              "doc_url": "https://algorithmia.com/algorithms/character_recognition/tesseract",
              "api_url": "https://api.algorithmia.com/v1/algo/character_recognition/tesseract"
            },
            {
              "username": "PetiteProgrammer",
              "algoname": "ImageClassifier",
              "algolabel": "Image Classifier",
              "language": "Python 3.x",
              "card_line": "Highly Accurate Image Classifier",
              "doc_url": "https://algorithmia.com/algorithms/PetiteProgrammer/ImageClassifier",
              "api_url": "https://api.algorithmia.com/v1/algo/PetiteProgrammer/ImageClassifier"
            },
            {
              "username": "PetiteProgrammer",
              "algoname": "DateExtractor",
              "algolabel": "DateExtractor",
              "language": "Python 3.x",
              "card_line": "Extracts dates from raw text",
              "doc_url": "https://algorithmia.com/algorithms/PetiteProgrammer/DateExtractor",
              "api_url": "https://api.algorithmia.com/v1/algo/PetiteProgrammer/DateExtractor"
            },
            {
              "username": "PetiteProgrammer",
              "algoname": "NumberExtractor",
              "algolabel": "NumberExtractor",
              "language": "Python 3.x",
              "card_line": "Extracts numbers (positive, negative and floats) from raw text.",
              "doc_url": "https://algorithmia.com/algorithms/PetiteProgrammer/NumberExtractor",
              "api_url": "https://api.algorithmia.com/v1/algo/PetiteProgrammer/NumberExtractor"
            },
            {
              "username": "Wolverine",
              "algoname": "FastAnomalydetection",
              "algolabel": "Fast Anomaly Detection",
              "language": "Python 3.x",
              "card_line": "A fast Anomaly detection algorithm best used for IoT, Fraud detection and IT Ops",
              "doc_url": "https://algorithmia.com/algorithms/Wolverine/FastAnomalydetection",
              "api_url": "https://api.algorithmia.com/v1/algo/Wolverine/FastAnomalydetection"
            },
            {
              "username": "cv",
              "algoname": "FaceRecognition",
              "algolabel": "Face Recognition",
              "language": "Python 2.x",
              "card_line": "Train and recognize human faces",
              "doc_url": "https://algorithmia.com/algorithms/cv/FaceRecognition",
              "api_url": "https://api.algorithmia.com/v1/algo/cv/FaceRecognition"
            },
            {
              "username": "buliginleo",
              "algoname": "NudityCheck",
              "algolabel": "NudityCheck",
              "language": "Python 3.x",
              "card_line": "Free neural network for check nudity by link",
              "doc_url": "https://algorithmia.com/algorithms/buliginleo/NudityCheck",
              "api_url": "https://api.algorithmia.com/v1/algo/buliginleo/NudityCheck"
            },
            {
              "username": "dlib",
              "algoname": "FaceDetection",
              "algolabel": "Face Detection",
              "language": "Python 2.x",
              "card_line": "This algorithm detects human faces in given images.",
              "doc_url": "https://algorithmia.com/algorithms/dlib/FaceDetection",
              "api_url": "https://api.algorithmia.com/v1/algo/dlib/FaceDetection"
            },
            {
              "username": "media",
              "algoname": "ContentAwareResize",
              "algolabel": "Content Aware Resize",
              "language": "Python 2.x",
              "card_line": "Resize images automatically, without removing important features such as faces",
              "doc_url": "https://algorithmia.com/algorithms/media/ContentAwareResize",
              "api_url": "https://api.algorithmia.com/v1/algo/media/ContentAwareResize"
            },
            {
              "username": "bkyan",
              "algoname": "StyleThief",
              "algolabel": "StyleThief (Open Source)",
              "language": "Python 2.x",
              "card_line": "Anish Athalye's Neural Style Transfer Using TensorFlow",
              "doc_url": "https://algorithmia.com/algorithms/bkyan/StyleThief",
              "api_url": "https://api.algorithmia.com/v1/algo/bkyan/StyleThief"
            },
            {
              "username": "web",
              "algoname": "MaliciousDomainClassifier",
              "algolabel": "Malicious Domain Classifier",
              "language": "Java",
              "card_line": "Determine whether a domain name is safe or malicious",
              "doc_url": "https://algorithmia.com/algorithms/web/MaliciousDomainClassifier",
              "api_url": "https://api.algorithmia.com/v1/algo/web/MaliciousDomainClassifier"
            },
            {
              "username": "sfw",
              "algoname": "VideoNudityDetection",
              "algolabel": "Video Nudity Detection",
              "language": "Python 2.x",
              "card_line": "Detect Nudity in Video",
              "doc_url": "https://algorithmia.com/algorithms/sfw/VideoNudityDetection",
              "api_url": "https://api.algorithmia.com/v1/algo/sfw/VideoNudityDetection"
            },
            {
              "username": "nlp",
              "algoname": "DocumentClassifier",
              "algolabel": "Document Classifier",
              "language": "Scala",
              "card_line": "Classify or Recommend documents with ease",
              "doc_url": "https://algorithmia.com/algorithms/nlp/DocumentClassifier",
              "api_url": "https://api.algorithmia.com/v1/algo/nlp/DocumentClassifier"
            },
            {
              "username": "lucianosantabrigida",
              "algoname": "ptwiki2vec",
              "algolabel": "ptwiki2vec",
              "language": "Python 3.x",
              "card_line": "[WIP] portuguese wikipedia vectors",
              "doc_url": "https://algorithmia.com/algorithms/lucianosantabrigida/ptwiki2vec",
              "api_url": "https://api.algorithmia.com/v1/algo/lucianosantabrigida/ptwiki2vec"
            },
            {
              "username": "nlp",
              "algoname": "Doc2Vec",
              "algolabel": "Doc2Vec",
              "language": "Python 2.x",
              "card_line": "Vectorize documents of arbitrary length",
              "doc_url": "https://algorithmia.com/algorithms/nlp/Doc2Vec",
              "api_url": "https://api.algorithmia.com/v1/algo/nlp/Doc2Vec"
            },
            {
              "username": "PetiteProgrammer",
              "algoname": "TextSimilarity",
              "algolabel": "Text Similarity",
              "language": "Python 3.x",
              "card_line": "Find the most similar text files within a collection of documents",
              "doc_url": "https://algorithmia.com/algorithms/PetiteProgrammer/TextSimilarity",
              "api_url": "https://api.algorithmia.com/v1/algo/PetiteProgrammer/TextSimilarity"
            },
            {
              "username": "PetiteProgrammer",
              "algoname": "pythoncodeprediction",
              "algolabel": "Python Code Prediction",
              "language": "Python 3.x",
              "card_line": "Next word/sequence prediction for Python code",
              "doc_url": "https://algorithmia.com/algorithms/PetiteProgrammer/pythoncodeprediction",
              "api_url": "https://api.algorithmia.com/v1/algo/PetiteProgrammer/pythoncodeprediction"
            },
            {
              "username": "PetiteProgrammer",
              "algoname": "ProgrammingLanguageIdentification",
              "algolabel": "Programming Language Identification",
              "language": "Python 3.x",
              "card_line": "Detect the programming language of source code",
              "doc_url": "https://algorithmia.com/algorithms/PetiteProgrammer/ProgrammingLanguageIdentification",
              "api_url": "https://api.algorithmia.com/v1/algo/PetiteProgrammer/ProgrammingLanguageIdentification"
            },
            {
              "username": "deeplearning",
              "algoname": "Parsey",
              "algolabel": "Parsey McParseface",
              "language": "Scala",
              "card_line": "Parse sentences with ease.",
              "doc_url": "https://algorithmia.com/algorithms/deeplearning/Parsey",
              "api_url": "https://api.algorithmia.com/v1/algo/deeplearning/Parsey"
            },
            {
              "username": "ryval",
              "algoname": "LogisticRegression",
              "algolabel": "LogisticRegression",
              "language": "Python 2.x",
              "card_line": "Train a Logistic Regression model and use it to predict unknown classifiers.",
              "submitted_at": "2015-08-20T23:24:10.000Z",
              "doc_url": "https://algorithmia.com/algorithms/ryval/LogisticRegression",
              "api_url": "https://api.algorithmia.com/v1/algo/ryval/LogisticRegression"
            },
            {
              "username": "mheimann",
              "algoname": "RecognizeFaces",
              "algolabel": "Recognize Faces",
              "language": "Python 2.x",
              "card_line": "Uses a trained face recognizer to identify faces.",
              "submitted_at": "2015-10-06T00:50:11.000Z",
              "doc_url": "https://algorithmia.com/algorithms/mheimann/RecognizeFaces",
              "api_url": "https://api.algorithmia.com/v1/algo/mheimann/RecognizeFaces"
            },
            {
              "username": "mheimann",
              "algoname": "TrainFaceRecognizer",
              "algolabel": "Train Face Recognizer",
              "language": "Python 2.x",
              "card_line": "Trains a face recognizer from a labeled set of faces.",
              "submitted_at": "2015-08-08T00:03:29.000Z",
              "doc_url": "https://algorithmia.com/algorithms/mheimann/TrainFaceRecognizer",
              "api_url": "https://api.algorithmia.com/v1/algo/mheimann/TrainFaceRecognizer"
            },
            {
              "username": "sklearn",
              "algoname": "GeographicOutlierDetection",
              "algolabel": "Geographic Outlier Detection",
              "language": "Python 2.x",
              "card_line": "This algorithm finds the most unexpected events in a set of geographic events relative to some reference set of events.",
              "submitted_at": "2015-05-04T20:16:28.000Z",
              "doc_url": "https://algorithmia.com/algorithms/sklearn/GeographicOutlierDetection",
              "api_url": "https://api.algorithmia.com/v1/algo/sklearn/GeographicOutlierDetection"
            },
            {
              "username": "sklearn",
              "algoname": "GeographicSpectralClustering",
              "algolabel": "Geographic Spectral Clustering",
              "language": "Python 2.x",
              "card_line": "Spectral clustering for geographic (lat/long) data.",
              "submitted_at": "2015-05-01T01:02:21.000Z",
              "doc_url": "https://algorithmia.com/algorithms/sklearn/GeographicSpectralClustering",
              "api_url": "https://api.algorithmia.com/v1/algo/sklearn/GeographicSpectralClustering"
            },
            {
              "username": "conctest",
              "algoname": "DigitRecognition",
              "algolabel": "Digit Recognition",
              "language": "Python 2.x",
              "card_line": "Recognizes handwritten digits using a pre trained  Convolutional Neural Network .",
              "submitted_at": "2015-06-22T15:39:45.000Z",
              "doc_url": "https://algorithmia.com/algorithms/conctest/DigitRecognition",
              "api_url": "https://api.algorithmia.com/v1/algo/conctest/DigitRecognition"
            },
            {
              "username": "cmartines",
              "algoname": "Chartie",
              "algolabel": "Chartie",
              "language": "Java",
              "card_line": "See beyond the numbers The new free web API that finds the  trend event  from your  numerical arrays For more detail : w...",
              "submitted_at": "2015-03-15T15:24:44.000Z",
              "doc_url": "https://algorithmia.com/algorithms/cmartines/Chartie",
              "api_url": "https://api.algorithmia.com/v1/algo/cmartines/Chartie"
            },
            {
              "username": "paranoia",
              "algoname": "FpGrowth",
              "algolabel": "FpGrowth",
              "language": "Java",
              "card_line": "A scalable method for finding frequent patterns within large datasets",
              "submitted_at": "2015-12-07T00:08:45.000Z",
              "doc_url": "https://algorithmia.com/algorithms/paranoia/FpGrowth",
              "api_url": "https://api.algorithmia.com/v1/algo/paranoia/FpGrowth"
            },
            {
              "username": "Aluxian",
              "algoname": "AffinityAnalysisFPGrowth",
              "algolabel": "Affinity Analysis for Market Basket Recommendation (FP-Growth)",
              "language": "Java",
              "card_line": "Affinity analysis is an analytical technique that aims to discover relationships between activities and preferences that pertain to specific individuals.",
              "submitted_at": "2015-10-20T21:44:38.000Z",
              "doc_url": "https://algorithmia.com/algorithms/Aluxian/AffinityAnalysisFPGrowth",
              "api_url": "https://api.algorithmia.com/v1/algo/Aluxian/AffinityAnalysisFPGrowth"
            },
            {
              "username": "thatguy2048",
              "algoname": "SimpleKNN",
              "algolabel": "SimpleKNN",
              "language": "Java",
              "card_line": "This is a simple KNN classifier which accepts a given number of training data points, classes for those points and sample points to evaluate.",
              "submitted_at": "2015-10-19T21:35:10.000Z",
              "doc_url": "https://algorithmia.com/algorithms/thatguy2048/SimpleKNN",
              "api_url": "https://api.algorithmia.com/v1/algo/thatguy2048/SimpleKNN"
            },
            {
              "username": "weka",
              "algoname": "DigitRecognition",
              "algolabel": "Digit Recognition",
              "language": "Java",
              "card_line": "The Digit Recognition algorithm that uses a Random Forest model trained on 50000 samples obtained from the MNIST digits dataset.",
              "submitted_at": "2015-05-01T01:23:58.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/DigitRecognition",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/DigitRecognition"
            },
            {
              "username": "jagiella",
              "algoname": "BirthDeathProcess",
              "algolabel": "BirthDeathProcess",
              "language": "Java",
              "submitted_at": "2015-10-19T21:52:34.000Z",
              "doc_url": "https://algorithmia.com/algorithms/jagiella/BirthDeathProcess",
              "api_url": "https://api.algorithmia.com/v1/algo/jagiella/BirthDeathProcess"
            },
            {
              "username": "opencv",
              "algoname": "SVM",
              "algolabel": "SVM",
              "language": "Java",
              "card_line": "A basic interface to OpenCV's SVM, as explained in http://docs.opencv.org/java/org/opencv/ml/CvSVM.html .",
              "submitted_at": "2015-05-01T01:58:46.000Z",
              "doc_url": "https://algorithmia.com/algorithms/opencv/SVM",
              "api_url": "https://api.algorithmia.com/v1/algo/opencv/SVM"
            },
            {
              "username": "opencv",
              "algoname": "RTrees",
              "algolabel": "RTrees",
              "language": "Java",
              "card_line": "A basic interface to OpenCV's RTrees, as explained in http://docs.opencv.org/java/org/opencv/ml/CvRTrees.html.",
              "submitted_at": "2015-05-01T01:58:49.000Z",
              "doc_url": "https://algorithmia.com/algorithms/opencv/RTrees",
              "api_url": "https://api.algorithmia.com/v1/algo/opencv/RTrees"
            },
            {
              "username": "opencv",
              "algoname": "NormalBayesClassifier",
              "algolabel": "Normal Bayes Classifier",
              "language": "Java",
              "card_line": "A basic interface to OpenCV's DTree, as explained in http://docs.opencv.org/java/org/opencv/ml/CvNormalBayesClassifier.html .",
              "submitted_at": "2015-05-01T01:58:44.000Z",
              "doc_url": "https://algorithmia.com/algorithms/opencv/NormalBayesClassifier",
              "api_url": "https://api.algorithmia.com/v1/algo/opencv/NormalBayesClassifier"
            },
            {
              "username": "opencv",
              "algoname": "KNearest",
              "algolabel": "KNearest",
              "language": "Java",
              "card_line": "An interface to OpenCV's K nearest neighbor, as explained in http://docs.opencv.org/java/org/opencv/ml/CvKNearest.html .",
              "submitted_at": "2015-05-01T01:58:42.000Z",
              "doc_url": "https://algorithmia.com/algorithms/opencv/KNearest",
              "api_url": "https://api.algorithmia.com/v1/algo/opencv/KNearest"
            },
            {
              "username": "opencv",
              "algoname": "GBTrees",
              "algolabel": "GBTrees",
              "language": "Java",
              "card_line": "A basic interface to OpenCV's DTree, as explained in http://docs.opencv.org/java/org/opencv/ml/CvGBTrees.html .",
              "submitted_at": "2015-05-01T01:58:21.000Z",
              "doc_url": "https://algorithmia.com/algorithms/opencv/GBTrees",
              "api_url": "https://api.algorithmia.com/v1/algo/opencv/GBTrees"
            },
            {
              "username": "opencv",
              "algoname": "ERTrees",
              "algolabel": "ERTrees",
              "language": "Java",
              "card_line": "A basic interface to OpenCV's ERTrees, as explained in http://docs.opencv.org/java/org/opencv/ml/CvERTrees.html.",
              "submitted_at": "2015-05-01T01:58:47.000Z",
              "doc_url": "https://algorithmia.com/algorithms/opencv/ERTrees",
              "api_url": "https://api.algorithmia.com/v1/algo/opencv/ERTrees"
            },
            {
              "username": "opencv",
              "algoname": "DTree",
              "algolabel": "DTree",
              "language": "Java",
              "card_line": "A basic interface to OpenCV's DTree, as explained in http://docs.opencv.org/java/org/opencv/ml/CvDTree.html.",
              "submitted_at": "2015-05-01T01:58:46.000Z",
              "doc_url": "https://algorithmia.com/algorithms/opencv/DTree",
              "api_url": "https://api.algorithmia.com/v1/algo/opencv/DTree"
            },
            {
              "username": "opencv",
              "algoname": "Boost",
              "algolabel": "Boost",
              "language": "Java",
              "card_line": "A basic interface to OpenCV's Boost, as explained in http://docs.opencv.org/java/org/opencv/ml/CvBoost.html .",
              "submitted_at": "2015-05-01T01:58:23.000Z",
              "doc_url": "https://algorithmia.com/algorithms/opencv/Boost",
              "api_url": "https://api.algorithmia.com/v1/algo/opencv/Boost"
            },
            {
              "username": "opencv",
              "algoname": "MLP",
              "algolabel": "MLP",
              "language": "Java",
              "card_line": "An interface to OpenCV's ANN_MLP, as explained in http://docs.opencv.org/java/org/opencv/ml/CvANN_MLP.html .",
              "submitted_at": "2015-05-01T01:58:23.000Z",
              "doc_url": "https://algorithmia.com/algorithms/opencv/MLP",
              "api_url": "https://api.algorithmia.com/v1/algo/opencv/MLP"
            },
            {
              "username": "mlolson",
              "algoname": "LinearRegression",
              "algolabel": "LinearRegression",
              "language": "Java",
              "submitted_at": "2015-10-19T21:17:10.000Z",
              "doc_url": "https://algorithmia.com/algorithms/mlolson/LinearRegression",
              "api_url": "https://api.algorithmia.com/v1/algo/mlolson/LinearRegression"
            },
            {
              "username": "ml",
              "algoname": "ClickStreamTransitions",
              "algolabel": "Click Stream Transitions",
              "language": "Java",
              "card_line": "Returns the top 5 most \"interesting\" transitions learned by the Hidden Markov Model.",
              "submitted_at": "2015-10-19T21:17:26.000Z",
              "doc_url": "https://algorithmia.com/algorithms/ml/ClickStreamTransitions",
              "api_url": "https://api.algorithmia.com/v1/algo/ml/ClickStreamTransitions"
            },
            {
              "username": "mahout",
              "algoname": "Recommendation",
              "algolabel": "Recommendation",
              "language": "Java",
              "card_line": "Overview Eventually we will expand this to allow different parameters and options for neighborhood and similarity functi...",
              "submitted_at": "2015-06-29T21:29:16.000Z",
              "doc_url": "https://algorithmia.com/algorithms/mahout/Recommendation",
              "api_url": "https://api.algorithmia.com/v1/algo/mahout/Recommendation"
            },
            {
              "username": "mahout",
              "algoname": "RandomForestTrain",
              "algolabel": "Random Forest Train",
              "language": "Java",
              "card_line": "Trains a Mahout random forest classifier.",
              "submitted_at": "2015-03-11T21:09:01.000Z",
              "doc_url": "https://algorithmia.com/algorithms/mahout/RandomForestTrain",
              "api_url": "https://api.algorithmia.com/v1/algo/mahout/RandomForestTrain"
            },
            {
              "username": "mahout",
              "algoname": "RandomForestApply",
              "algolabel": "Random Forest Apply",
              "language": "Java",
              "card_line": "Apply trained Mahout Random Forest Classifier to data",
              "submitted_at": "2015-03-11T21:13:18.000Z",
              "doc_url": "https://algorithmia.com/algorithms/mahout/RandomForestApply",
              "api_url": "https://api.algorithmia.com/v1/algo/mahout/RandomForestApply"
            },
            {
              "username": "mahout",
              "algoname": "DigitRecognizer",
              "algolabel": "Digit Recognizer",
              "language": "Java",
              "card_line": "Applies a random forest model trained on the MNIST handwritten digit dataset to a 28 by 28 grayscale pixel grid, which is input as a double array of length 784.",
              "submitted_at": "2015-03-11T22:41:52.000Z",
              "doc_url": "https://algorithmia.com/algorithms/mahout/DigitRecognizer",
              "api_url": "https://api.algorithmia.com/v1/algo/mahout/DigitRecognizer"
            },
            {
              "username": "weka",
              "algoname": "CsvToArff",
              "algolabel": "CsvToArff",
              "language": "Java",
              "card_line": "Converts .csv",
              "submitted_at": "2015-10-04T06:26:04.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/CsvToArff",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/CsvToArff"
            },
            {
              "username": "weka",
              "algoname": "CobwebClusterer",
              "algolabel": "CobwebClusterer",
              "language": "Java",
              "card_line": "Uses Cobweb clusterer, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/clusterers/Cobweb.html",
              "submitted_at": "2015-06-29T21:38:19.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/CobwebClusterer",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/CobwebClusterer"
            },
            {
              "username": "weka",
              "algoname": "CLOPEClusterer",
              "algolabel": "CLOPEClusterer",
              "language": "Java",
              "card_line": "Uses CLOPE clusterer, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/clusterers/CLOPE.html",
              "submitted_at": "2015-06-29T21:36:19.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/CLOPEClusterer",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/CLOPEClusterer"
            },
            {
              "username": "weka",
              "algoname": "EMClusterer",
              "algolabel": "EMClusterer",
              "language": "Java",
              "card_line": "Uses EM clusterer, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/clusterers/EM.html",
              "submitted_at": "2015-06-29T21:38:54.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/EMClusterer",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/EMClusterer"
            },
            {
              "username": "weka",
              "algoname": "FarthestFirstClusterer",
              "algolabel": "FarthestFirstClusterer",
              "language": "Java",
              "card_line": "Uses Farthest First clusterer, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/clusterers/FarthestFirst.html",
              "submitted_at": "2015-06-29T21:39:53.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/FarthestFirstClusterer",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/FarthestFirstClusterer"
            },
            {
              "username": "weka",
              "algoname": "WekaFilteredClusterer",
              "algolabel": "WekaFilteredClusterer",
              "language": "Java",
              "card_line": "Uses Filtered clusterer, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/clusterers/FilteredClusterer.html",
              "submitted_at": "2015-06-29T21:40:46.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/WekaFilteredClusterer",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/WekaFilteredClusterer"
            },
            {
              "username": "weka",
              "algoname": "WekaHierarchicalClusterer",
              "algolabel": "WekaHierarchicalClusterer",
              "language": "Java",
              "card_line": "Uses Hierarchical clusterer, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/clusterers/HierarchicalClusterer.html",
              "submitted_at": "2015-06-29T21:41:31.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/WekaHierarchicalClusterer",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/WekaHierarchicalClusterer"
            },
            {
              "username": "weka",
              "algoname": "WekaMakeDensityBasedClusterer",
              "algolabel": "WekaMakeDensityBasedClusterer",
              "language": "Java",
              "card_line": "Uses MakeDensityBasedClusterer, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/clusterers/MakeDensityBasedClusterer.html",
              "submitted_at": "2015-06-29T21:52:03.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/WekaMakeDensityBasedClusterer",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/WekaMakeDensityBasedClusterer"
            },
            {
              "username": "weka",
              "algoname": "sIBClusterer",
              "algolabel": "sIBClusterer",
              "language": "Java",
              "card_line": "Uses sIB clusterer, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/clusterers/sIB.html",
              "submitted_at": "2015-06-29T21:53:29.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/sIBClusterer",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/sIBClusterer"
            },
            {
              "username": "weka",
              "algoname": "XMeansClusterer",
              "algolabel": "XMeansClusterer",
              "language": "Java",
              "card_line": "Uses XMeans clusterer, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/clusterers/XMeans.html",
              "submitted_at": "2015-06-29T21:54:59.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/XMeansClusterer",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/XMeansClusterer"
            },
            {
              "username": "weka",
              "algoname": "SimpleKMeansClusterer",
              "algolabel": "SimpleKMeansClusterer",
              "language": "Java",
              "card_line": "Uses SimpleKMeans clusterer, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/clusterers/SimpleKMeans.html",
              "submitted_at": "2015-06-29T21:55:45.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/SimpleKMeansClusterer",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/SimpleKMeansClusterer"
            },
            {
              "username": "weka",
              "algoname": "SubsetByExpression",
              "algolabel": "SubsetByExpression",
              "language": "Java",
              "card_line": "This is the SubsetByExpression filter, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/filters/unsupervised/instance/SubsetByExpression.html",
              "submitted_at": "2015-05-01T00:56:54.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/SubsetByExpression",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/SubsetByExpression"
            },
            {
              "username": "weka",
              "algoname": "SparseToNonSparse",
              "algolabel": "SparseToNonSparse",
              "language": "Java",
              "card_line": "This is the SparseToNonSparse filter, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/filters/unsupervised/instance/SparseToNonSparse.html",
              "submitted_at": "2015-05-01T00:56:47.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/SparseToNonSparse",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/SparseToNonSparse"
            },
            {
              "username": "weka",
              "algoname": "ReservoirSample",
              "algolabel": "ReservoirSample",
              "language": "Java",
              "card_line": "This is the ReservoirSample filter, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/filters/unsupervised/instance/ReservoirSample.html",
              "submitted_at": "2015-05-01T00:56:40.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/ReservoirSample",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/ReservoirSample"
            },
            {
              "username": "weka",
              "algoname": "RemoveWithValues",
              "algolabel": "RemoveWithValues",
              "language": "Java",
              "card_line": "This is the RemoveWithValues filter, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/filters/unsupervised/instance/RemoveWithValues.html",
              "submitted_at": "2015-05-01T00:56:39.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/RemoveWithValues",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/RemoveWithValues"
            },
            {
              "username": "weka",
              "algoname": "RemoveRange",
              "algolabel": "RemoveRange",
              "language": "Java",
              "card_line": "This is the RemoveRange filter, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/filters/unsupervised/instance/RemoveRange.html",
              "submitted_at": "2015-05-01T00:56:38.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/RemoveRange",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/RemoveRange"
            },
            {
              "username": "weka",
              "algoname": "RemovePercentage",
              "algolabel": "RemovePercentage",
              "language": "Java",
              "card_line": "This is the RemovePercentage filter, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/filters/unsupervised/instance/RemovePercentage.html",
              "submitted_at": "2015-05-01T00:56:35.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/RemovePercentage",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/RemovePercentage"
            },
            {
              "username": "weka",
              "algoname": "RemoveMisclassified",
              "algolabel": "RemoveMisclassified",
              "language": "Java",
              "card_line": "This is the RemoveMisclassified filter, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/filters/unsupervised/instance/RemoveMisclassified.html",
              "submitted_at": "2015-05-01T00:56:34.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/RemoveMisclassified",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/RemoveMisclassified"
            },
            {
              "username": "weka",
              "algoname": "RemoveFrequentValues",
              "algolabel": "RemoveFrequentValues",
              "language": "Java",
              "card_line": "This is the RemoveFrequentValues filter, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/filters/unsupervised/instance/RemoveFrequentValues.html",
              "submitted_at": "2015-05-01T00:56:32.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/RemoveFrequentValues",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/RemoveFrequentValues"
            },
            {
              "username": "weka",
              "algoname": "RemoveFolds",
              "algolabel": "RemoveFolds",
              "language": "Java",
              "card_line": "This is the RemoveFolds filter, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/filters/unsupervised/instance/RemoveFolds.html",
              "submitted_at": "2015-05-01T00:56:29.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/RemoveFolds",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/RemoveFolds"
            },
            {
              "username": "weka",
              "algoname": "Randomize",
              "algolabel": "Randomize",
              "language": "Java",
              "card_line": "This is the Randomize filter, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/filters/unsupervised/instance/Randomize.html",
              "submitted_at": "2015-05-01T01:04:47.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/Randomize",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/Randomize"
            },
            {
              "username": "weka",
              "algoname": "NonSparseToSparse",
              "algolabel": "NonSparseToSparse",
              "language": "Java",
              "card_line": "This is the NonSparseToSparse filter, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/filters/unsupervised/instance/NonSparseToSparse.html",
              "submitted_at": "2015-05-01T01:04:49.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/NonSparseToSparse",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/NonSparseToSparse"
            },
            {
              "username": "weka",
              "algoname": "StratifiedRemoveFolds",
              "algolabel": "StratifiedRemoveFolds",
              "language": "Java",
              "card_line": "This is the StratifiedRemoveFolds filter, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/filters/supervised/instance/StratifiedRemoveFolds.html",
              "submitted_at": "2015-05-01T01:04:51.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/StratifiedRemoveFolds",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/StratifiedRemoveFolds"
            },
            {
              "username": "weka",
              "algoname": "SpreadSubsample",
              "algolabel": "SpreadSubsample",
              "language": "Java",
              "card_line": "This is the SpreadSubsample filter, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/filters/supervised/instance/SpreadSubsample.html",
              "submitted_at": "2015-05-01T01:04:52.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/SpreadSubsample",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/SpreadSubsample"
            },
            {
              "username": "weka",
              "algoname": "SMOTE",
              "algolabel": "SMOTE",
              "language": "Java",
              "card_line": "This is the SMOTE filter, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/filters/supervised/instance/SMOTE.html",
              "submitted_at": "2015-05-01T01:04:53.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/SMOTE",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/SMOTE"
            },
            {
              "username": "weka",
              "algoname": "Resample",
              "algolabel": "Resample",
              "language": "Java",
              "card_line": "This is the Resample filter, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/filters/supervised/instance/Resample.html",
              "submitted_at": "2015-05-01T01:04:54.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/Resample",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/Resample"
            },
            {
              "username": "weka",
              "algoname": "PLSFilter",
              "algolabel": "PLSFilter",
              "language": "Java",
              "card_line": "This is the PLSFilter filter, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/filters/supervised/attribute/PLSFilter.html",
              "submitted_at": "2015-05-01T01:04:55.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/PLSFilter",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/PLSFilter"
            },
            {
              "username": "weka",
              "algoname": "Discretize",
              "algolabel": "Discretize",
              "language": "Java",
              "card_line": "This is the Discretize filter, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/filters/supervised/attribute/Discretize.html",
              "submitted_at": "2015-05-01T01:05:11.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/Discretize",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/Discretize"
            },
            {
              "username": "weka",
              "algoname": "ClassOrder",
              "algolabel": "ClassOrder",
              "language": "Java",
              "card_line": "This is the ClassOrder filter, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/filters/supervised/attribute/ClassOrder.html",
              "submitted_at": "2015-05-01T01:05:16.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/ClassOrder",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/ClassOrder"
            },
            {
              "username": "weka",
              "algoname": "AttributeSelection",
              "algolabel": "AttributeSelection",
              "language": "Java",
              "card_line": "This is the AttributeSelection filter, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/filters/supervised/attribute/AttributeSelection.html",
              "submitted_at": "2015-05-01T01:05:17.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/AttributeSelection",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/AttributeSelection"
            },
            {
              "username": "weka",
              "algoname": "AddClassification",
              "algolabel": "AddClassification",
              "language": "Java",
              "card_line": "This is the AddClassification filter, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/filters/supervised/attribute/AddClassification.html",
              "submitted_at": "2015-05-01T01:05:17.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/AddClassification",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/AddClassification"
            },
            {
              "username": "weka",
              "algoname": "Wavelet",
              "algolabel": "Wavelet",
              "language": "Java",
              "card_line": "This is the Wavelet filter, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/filters/unsupervised/attribute/Wavelet.html",
              "submitted_at": "2015-05-01T01:05:18.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/Wavelet",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/Wavelet"
            },
            {
              "username": "weka",
              "algoname": "TimeSeriesTranslate",
              "algolabel": "TimeSeriesTranslate",
              "language": "Java",
              "card_line": "This is the TimeSeriesTranslate filter, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/filters/unsupervised/attribute/TimeSeriesTranslate.html",
              "submitted_at": "2015-05-01T01:05:20.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/TimeSeriesTranslate",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/TimeSeriesTranslate"
            },
            {
              "username": "weka",
              "algoname": "TimeSeriesDelta",
              "algolabel": "TimeSeriesDelta",
              "language": "Java",
              "card_line": "This is the TimeSeriesDelta filter, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/filters/unsupervised/attribute/TimeSeriesDelta.html",
              "submitted_at": "2015-05-01T01:05:36.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/TimeSeriesDelta",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/TimeSeriesDelta"
            }
          ]
        }
      },
      {
        "request": {
          "url": "/meta/algorithms",
          "method": "GET",
          "headers": {
            "host": "algorithmia.com",
            "connection": "keep-alive",
            "pragma": "no-cache",
            "cache-control": "no-cache",
            "accept": "application/json, text/plain, */*",
            "dnt": "1",
            "x-xsrf-token": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "cors",
            "referer": "https://algorithmia.com/algorithms",
            "accept-encoding": "gzip, deflate, br",
            "accept-language": "en-US,en;q=0.9",
            "cookie": "ajs_group_id=null; ajs_anonymous_id=%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22; _ga=GA1.2.1872580011.1571235636; _fbp=fb.1.1571235636317.604574724; intercom-id-c9fj6354=01941621-342b-4320-ad75-53826b5a002c; hubspotutk=105fad8a9b12bfed67330a0dbfe12c61; _gid=GA1.2.1843278152.1572282100; __zlcmid=uzie5dAUbB300Y; __hstc=69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3; __hssrc=1; fs_intercom=4655074328608768:4513847218700288; XSRF-TOKEN=0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da; referrer=www.google.com; landing_page=https://algorithmia.com/; signup_session=true; ajs_user_id=%22acunniffe%22; fs_uid=rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636; new-algo-language=scala; __hssc=69686351.5.1572357353053; intercom-session-c9fj6354=L08zdks3K1FOZEs0NngyR2NDQjBxN3VMb1J3dE1QZ0t4N2piYXY5ZmlNWFNVMkxseFhidkxhZ0g4QStWV2hYay0tUUtjQUtFaUZvLzJIZ0drSFdnRjM0UT09--fc3e700881b2cd1507c47ce6533f5b502d54fb7c; ALGO_SESSION=b04870a20d2478ed011f021a7573f745b758099c-last-access=2019-10-29T14%3A06%3A31.458Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "cookies": {
            "ajs_group_id": "null",
            "ajs_anonymous_id": "%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22",
            "_ga": "GA1.2.1872580011.1571235636",
            "_fbp": "fb.1.1571235636317.604574724",
            "intercom-id-c9fj6354": "01941621-342b-4320-ad75-53826b5a002c",
            "hubspotutk": "105fad8a9b12bfed67330a0dbfe12c61",
            "_gid": "GA1.2.1843278152.1572282100",
            "__zlcmid": "uzie5dAUbB300Y",
            "__hstc": "69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3",
            "__hssrc": "1",
            "fs_intercom": "4655074328608768:4513847218700288",
            "XSRF-TOKEN": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "referrer": "www.google.com",
            "landing_page": "https://algorithmia.com/",
            "signup_session": "true",
            "ajs_user_id": "%22acunniffe%22",
            "fs_uid": "rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636",
            "new-algo-language": "scala",
            "__hssc": "69686351.5.1572357353053",
            "intercom-session-c9fj6354": "L08zdks3K1FOZEs0NngyR2NDQjBxN3VMb1J3dE1QZ0t4N2piYXY5ZmlNWFNVMkxseFhidkxhZ0g4QStWV2hYay0tUUtjQUtFaUZvLzJIZ0drSFdnRjM0UT09--fc3e700881b2cd1507c47ce6533f5b502d54fb7c",
            "ALGO_SESSION": "b04870a20d2478ed011f021a7573f745b758099c-last-access=2019-10-29T14%3A06%3A31.458Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "queryParameters": {
            "order": "starred",
            "tag": "machine-learning"
          }
        },
        "response": {
          "statusCode": 200,
          "headers": {
            "content-encoding": "gzip",
            "content-type": "application/json; charset=utf-8",
            "date": "Tue, 29 Oct 2019 14:06:31 GMT",
            "set-cookie": "ALGO_SESSION=603a7f3d73d33ac5edd94b9693831216aeacda28-last-access=2019-10-29T14%3A06%3A31.644Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3; Max-Age=86400; Expires=Wed, 30 Oct 2019 14:06:31 GMT; Path=/; Domain=algorithmia.com; Secure; HTTPOnly",
            "strict-transport-security": "max-age=86400; includeSubDomains",
            "vary": "Accept-Encoding",
            "x-content-type-options": "nosniff",
            "x-frame-options": "DENY",
            "content-length": "6107",
            "connection": "keep-alive"
          },
          "body": [
            {
              "username": "deeplearning",
              "algoname": "Parsey",
              "algolabel": "Parsey McParseface",
              "language": "Scala",
              "card_line": "Parse sentences with ease.",
              "doc_url": "https://algorithmia.com/algorithms/deeplearning/Parsey",
              "api_url": "https://api.algorithmia.com/v1/algo/deeplearning/Parsey"
            },
            {
              "username": "PetiteProgrammer",
              "algoname": "ProgrammingLanguageIdentification",
              "algolabel": "Programming Language Identification",
              "language": "Python 3.x",
              "card_line": "Detect the programming language of source code",
              "doc_url": "https://algorithmia.com/algorithms/PetiteProgrammer/ProgrammingLanguageIdentification",
              "api_url": "https://api.algorithmia.com/v1/algo/PetiteProgrammer/ProgrammingLanguageIdentification"
            },
            {
              "username": "paranoia",
              "algoname": "FpGrowth",
              "algolabel": "FpGrowth",
              "language": "Java",
              "card_line": "A scalable method for finding frequent patterns within large datasets",
              "submitted_at": "2015-12-07T00:08:45.000Z",
              "doc_url": "https://algorithmia.com/algorithms/paranoia/FpGrowth",
              "api_url": "https://api.algorithmia.com/v1/algo/paranoia/FpGrowth"
            },
            {
              "username": "PetiteProgrammer",
              "algoname": "TextSimilarity",
              "algolabel": "Text Similarity",
              "language": "Python 3.x",
              "card_line": "Find the most similar text files within a collection of documents",
              "doc_url": "https://algorithmia.com/algorithms/PetiteProgrammer/TextSimilarity",
              "api_url": "https://api.algorithmia.com/v1/algo/PetiteProgrammer/TextSimilarity"
            },
            {
              "username": "Aluxian",
              "algoname": "AffinityAnalysisFPGrowth",
              "algolabel": "Affinity Analysis for Market Basket Recommendation (FP-Growth)",
              "language": "Java",
              "card_line": "Affinity analysis is an analytical technique that aims to discover relationships between activities and preferences that pertain to specific individuals.",
              "submitted_at": "2015-10-20T21:44:38.000Z",
              "doc_url": "https://algorithmia.com/algorithms/Aluxian/AffinityAnalysisFPGrowth",
              "api_url": "https://api.algorithmia.com/v1/algo/Aluxian/AffinityAnalysisFPGrowth"
            },
            {
              "username": "character_recognition",
              "algoname": "SmartTextExtraction",
              "algolabel": "Smart Text Extraction",
              "language": "Scala",
              "card_line": "Extract text the smart way",
              "doc_url": "https://algorithmia.com/algorithms/character_recognition/SmartTextExtraction",
              "api_url": "https://api.algorithmia.com/v1/algo/character_recognition/SmartTextExtraction"
            },
            {
              "username": "nlp",
              "algoname": "DocumentClassifier",
              "algolabel": "Document Classifier",
              "language": "Scala",
              "card_line": "Classify or Recommend documents with ease",
              "doc_url": "https://algorithmia.com/algorithms/nlp/DocumentClassifier",
              "api_url": "https://api.algorithmia.com/v1/algo/nlp/DocumentClassifier"
            },
            {
              "username": "bkyan",
              "algoname": "StyleThief",
              "algolabel": "StyleThief (Open Source)",
              "language": "Python 2.x",
              "card_line": "Anish Athalye's Neural Style Transfer Using TensorFlow",
              "doc_url": "https://algorithmia.com/algorithms/bkyan/StyleThief",
              "api_url": "https://api.algorithmia.com/v1/algo/bkyan/StyleThief"
            },
            {
              "username": "sklearn",
              "algoname": "GeographicSpectralClustering",
              "algolabel": "Geographic Spectral Clustering",
              "language": "Python 2.x",
              "card_line": "Spectral clustering for geographic (lat/long) data.",
              "submitted_at": "2015-05-01T01:02:21.000Z",
              "doc_url": "https://algorithmia.com/algorithms/sklearn/GeographicSpectralClustering",
              "api_url": "https://api.algorithmia.com/v1/algo/sklearn/GeographicSpectralClustering"
            },
            {
              "username": "deeplearning",
              "algoname": "ObjectDetectionCOCO",
              "algolabel": "ObjectDetection - COCO",
              "language": "Python 3.x",
              "card_line": "Detecting Objects in complex scenes",
              "doc_url": "https://algorithmia.com/algorithms/deeplearning/ObjectDetectionCOCO",
              "api_url": "https://api.algorithmia.com/v1/algo/deeplearning/ObjectDetectionCOCO"
            },
            {
              "username": "PetiteProgrammer",
              "algoname": "pythoncodeprediction",
              "algolabel": "Python Code Prediction",
              "language": "Python 3.x",
              "card_line": "Next word/sequence prediction for Python code",
              "doc_url": "https://algorithmia.com/algorithms/PetiteProgrammer/pythoncodeprediction",
              "api_url": "https://api.algorithmia.com/v1/algo/PetiteProgrammer/pythoncodeprediction"
            },
            {
              "username": "mheimann",
              "algoname": "RecognizeFaces",
              "algolabel": "Recognize Faces",
              "language": "Python 2.x",
              "card_line": "Uses a trained face recognizer to identify faces.",
              "submitted_at": "2015-10-06T00:50:11.000Z",
              "doc_url": "https://algorithmia.com/algorithms/mheimann/RecognizeFaces",
              "api_url": "https://api.algorithmia.com/v1/algo/mheimann/RecognizeFaces"
            },
            {
              "username": "cv",
              "algoname": "FaceRecognition",
              "algolabel": "Face Recognition",
              "language": "Python 2.x",
              "card_line": "Train and recognize human faces",
              "doc_url": "https://algorithmia.com/algorithms/cv/FaceRecognition",
              "api_url": "https://api.algorithmia.com/v1/algo/cv/FaceRecognition"
            },
            {
              "username": "mahout",
              "algoname": "Recommendation",
              "algolabel": "Recommendation",
              "language": "Java",
              "card_line": "Overview Eventually we will expand this to allow different parameters and options for neighborhood and similarity functi...",
              "submitted_at": "2015-06-29T21:29:16.000Z",
              "doc_url": "https://algorithmia.com/algorithms/mahout/Recommendation",
              "api_url": "https://api.algorithmia.com/v1/algo/mahout/Recommendation"
            },
            {
              "username": "PetiteProgrammer",
              "algoname": "ImageClassifier",
              "algolabel": "Image Classifier",
              "language": "Python 3.x",
              "card_line": "Highly Accurate Image Classifier",
              "doc_url": "https://algorithmia.com/algorithms/PetiteProgrammer/ImageClassifier",
              "api_url": "https://api.algorithmia.com/v1/algo/PetiteProgrammer/ImageClassifier"
            },
            {
              "username": "wuhuikai",
              "algoname": "A2RL_online",
              "algolabel": "A2RL: Auto Image Cropping",
              "language": "Python 3.x",
              "card_line": "Auto-crop given image to improve the aesthetic.",
              "doc_url": "https://algorithmia.com/algorithms/wuhuikai/A2RL_online",
              "api_url": "https://api.algorithmia.com/v1/algo/wuhuikai/A2RL_online"
            },
            {
              "username": "nlp",
              "algoname": "Doc2Vec",
              "algolabel": "Doc2Vec",
              "language": "Python 2.x",
              "card_line": "Vectorize documents of arbitrary length",
              "doc_url": "https://algorithmia.com/algorithms/nlp/Doc2Vec",
              "api_url": "https://api.algorithmia.com/v1/algo/nlp/Doc2Vec"
            },
            {
              "username": "dlib",
              "algoname": "FaceDetection",
              "algolabel": "Face Detection",
              "language": "Python 2.x",
              "card_line": "This algorithm detects human faces in given images.",
              "doc_url": "https://algorithmia.com/algorithms/dlib/FaceDetection",
              "api_url": "https://api.algorithmia.com/v1/algo/dlib/FaceDetection"
            },
            {
              "username": "cmartines",
              "algoname": "Chartie",
              "algolabel": "Chartie",
              "language": "Java",
              "card_line": "See beyond the numbers The new free web API that finds the  trend event  from your  numerical arrays For more detail : w...",
              "submitted_at": "2015-03-15T15:24:44.000Z",
              "doc_url": "https://algorithmia.com/algorithms/cmartines/Chartie",
              "api_url": "https://api.algorithmia.com/v1/algo/cmartines/Chartie"
            },
            {
              "username": "poze",
              "algoname": "poseEstimation_v2",
              "algolabel": "Pose Estimation",
              "language": "Python 3.x",
              "card_line": " Detect body pose for multiple people on image.",
              "doc_url": "https://algorithmia.com/algorithms/poze/poseEstimation_v2",
              "api_url": "https://api.algorithmia.com/v1/algo/poze/poseEstimation_v2"
            },
            {
              "username": "tags",
              "algoname": "RecommendGithub",
              "algolabel": "Recommend Github",
              "language": "Java",
              "card_line": "Recommend a github repos based on a given one",
              "submitted_at": "2016-02-02T23:35:11.000Z",
              "doc_url": "https://algorithmia.com/algorithms/tags/RecommendGithub",
              "api_url": "https://api.algorithmia.com/v1/algo/tags/RecommendGithub"
            },
            {
              "username": "weka",
              "algoname": "RandomForest",
              "algolabel": "RandomForest",
              "language": "Java",
              "card_line": "This is the RandomForest classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/trees/RandomForest.html",
              "submitted_at": "2015-05-01T01:13:46.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/RandomForest",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/RandomForest"
            },
            {
              "username": "PetiteProgrammer",
              "algoname": "DateExtractor",
              "algolabel": "DateExtractor",
              "language": "Python 3.x",
              "card_line": "Extracts dates from raw text",
              "doc_url": "https://algorithmia.com/algorithms/PetiteProgrammer/DateExtractor",
              "api_url": "https://api.algorithmia.com/v1/algo/PetiteProgrammer/DateExtractor"
            },
            {
              "username": "PetiteProgrammer",
              "algoname": "NamedEntityRecognition",
              "algolabel": "Named Entity Recognition (Detection of Persons, Dates, Locations and much more)",
              "language": "Python 3.x",
              "card_line": "Extracts entities out of text such as persons and organizations, with high precision. ",
              "doc_url": "https://algorithmia.com/algorithms/PetiteProgrammer/NamedEntityRecognition",
              "api_url": "https://api.algorithmia.com/v1/algo/PetiteProgrammer/NamedEntityRecognition"
            },
            {
              "username": "character_recognition",
              "algoname": "TextDetectionCTPN",
              "algolabel": "Text Detection (CTPN)",
              "language": "Python 2.x",
              "card_line": "detect text or words in any kind of image including both scanned documents and natural images.",
              "doc_url": "https://algorithmia.com/algorithms/character_recognition/TextDetectionCTPN",
              "api_url": "https://api.algorithmia.com/v1/algo/character_recognition/TextDetectionCTPN"
            },
            {
              "username": "berlius",
              "algoname": "colorize",
              "algolabel": "colorize",
              "language": "Python 2.x",
              "card_line": "Colorize black and white images with Berkeley model",
              "doc_url": "https://algorithmia.com/algorithms/berlius/colorize",
              "api_url": "https://api.algorithmia.com/v1/algo/berlius/colorize"
            },
            {
              "username": "media",
              "algoname": "ContentAwareResize",
              "algolabel": "Content Aware Resize",
              "language": "Python 2.x",
              "card_line": "Resize images automatically, without removing important features such as faces",
              "doc_url": "https://algorithmia.com/algorithms/media/ContentAwareResize",
              "api_url": "https://api.algorithmia.com/v1/algo/media/ContentAwareResize"
            },
            {
              "username": "character_recognition",
              "algoname": "tesseract",
              "algolabel": "tesseract",
              "language": "Python 2.x",
              "card_line": "extracts text with deep learning",
              "doc_url": "https://algorithmia.com/algorithms/character_recognition/tesseract",
              "api_url": "https://api.algorithmia.com/v1/algo/character_recognition/tesseract"
            },
            {
              "username": "weka",
              "algoname": "WekaClassification",
              "algolabel": "Weka Classification",
              "language": "Java",
              "card_line": "This is the main algorithm that all of the Weka classification algorithms call.",
              "submitted_at": "2015-10-02T20:39:49.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/WekaClassification",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/WekaClassification"
            },
            {
              "username": "ryval",
              "algoname": "LogisticRegression",
              "algolabel": "LogisticRegression",
              "language": "Python 2.x",
              "card_line": "Train a Logistic Regression model and use it to predict unknown classifiers.",
              "submitted_at": "2015-08-20T23:24:10.000Z",
              "doc_url": "https://algorithmia.com/algorithms/ryval/LogisticRegression",
              "api_url": "https://api.algorithmia.com/v1/algo/ryval/LogisticRegression"
            },
            {
              "username": "Wolverine",
              "algoname": "FastAnomalydetection",
              "algolabel": "Fast Anomaly Detection",
              "language": "Python 3.x",
              "card_line": "A fast Anomaly detection algorithm best used for IoT, Fraud detection and IT Ops",
              "doc_url": "https://algorithmia.com/algorithms/Wolverine/FastAnomalydetection",
              "api_url": "https://api.algorithmia.com/v1/algo/Wolverine/FastAnomalydetection"
            },
            {
              "username": "character_recognition",
              "algoname": "NaturalTextNet",
              "algolabel": "Natural Text Net",
              "language": "Python 3.x",
              "card_line": "Extracts text from natural scene images",
              "doc_url": "https://algorithmia.com/algorithms/character_recognition/NaturalTextNet",
              "api_url": "https://api.algorithmia.com/v1/algo/character_recognition/NaturalTextNet"
            },
            {
              "username": "mgomezm",
              "algoname": "AccelerometerClassifier",
              "algolabel": "AccelerometerClassifier",
              "language": "Java",
              "card_line": "Given x,y,z accelerometer readings, will determine whther the user is Stationary, Walking, or Running.",
              "submitted_at": "2015-10-19T21:17:41.000Z",
              "doc_url": "https://algorithmia.com/algorithms/mgomezm/AccelerometerClassifier",
              "api_url": "https://api.algorithmia.com/v1/algo/mgomezm/AccelerometerClassifier"
            },
            {
              "username": "wuhuikai",
              "algoname": "A2RL",
              "algolabel": "A2RL: Auto Image Cropping",
              "language": "Python 3.x",
              "card_line": "Auto-crop given image to improve the aesthetic.",
              "doc_url": "https://algorithmia.com/algorithms/wuhuikai/A2RL",
              "api_url": "https://api.algorithmia.com/v1/algo/wuhuikai/A2RL"
            },
            {
              "username": "PetiteProgrammer",
              "algoname": "NaturalLanguageUnderstanding",
              "algolabel": "Natural Language Understanding",
              "language": "Python 3.x",
              "card_line": "Understand intents, time, etc. from natural language ",
              "doc_url": "https://algorithmia.com/algorithms/PetiteProgrammer/NaturalLanguageUnderstanding",
              "api_url": "https://api.algorithmia.com/v1/algo/PetiteProgrammer/NaturalLanguageUnderstanding"
            },
            {
              "username": "ml",
              "algoname": "LearnHMM",
              "algolabel": "LearnHMM",
              "language": "Java",
              "card_line": "Learns a Hidden Markov Model (HMM) based on a series of example state transitions.",
              "submitted_at": "2015-10-19T21:17:18.000Z",
              "doc_url": "https://algorithmia.com/algorithms/ml/LearnHMM",
              "api_url": "https://api.algorithmia.com/v1/algo/ml/LearnHMM"
            },
            {
              "username": "sklearn",
              "algoname": "GeographicOutlierDetection",
              "algolabel": "Geographic Outlier Detection",
              "language": "Python 2.x",
              "card_line": "This algorithm finds the most unexpected events in a set of geographic events relative to some reference set of events.",
              "submitted_at": "2015-05-04T20:16:28.000Z",
              "doc_url": "https://algorithmia.com/algorithms/sklearn/GeographicOutlierDetection",
              "api_url": "https://api.algorithmia.com/v1/algo/sklearn/GeographicOutlierDetection"
            },
            {
              "username": "guardlogic",
              "algoname": "AdultImageClassifier",
              "algolabel": "AdultImageClassifier",
              "language": "Python 2.x",
              "card_line": "  Assesses if an image contains \"Adult\" content where the term \"Adult\" is defined as \"sexually explicit\".",
              "doc_url": "https://algorithmia.com/algorithms/guardlogic/AdultImageClassifier",
              "api_url": "https://api.algorithmia.com/v1/algo/guardlogic/AdultImageClassifier"
            },
            {
              "username": "classification",
              "algoname": "GenderByName",
              "algolabel": "Gender By Name (First, Last or Full Name) Classifier",
              "language": "Python 3.x",
              "card_line": "Fast gender classifier by name. Classification works with first and last name (order-independent); last name optional.",
              "doc_url": "https://algorithmia.com/algorithms/classification/GenderByName",
              "api_url": "https://api.algorithmia.com/v1/algo/classification/GenderByName"
            },
            {
              "username": "imageclassification",
              "algoname": "ResNetFeatureExtraction",
              "algolabel": "ResNet Feature Extraction",
              "language": "Python 3.x",
              "card_line": " Extract ResNet feature vectors from images. ",
              "doc_url": "https://algorithmia.com/algorithms/imageclassification/ResNetFeatureExtraction",
              "api_url": "https://api.algorithmia.com/v1/algo/imageclassification/ResNetFeatureExtraction"
            },
            {
              "username": "sfw",
              "algoname": "VideoNudityDetection",
              "algolabel": "Video Nudity Detection",
              "language": "Python 2.x",
              "card_line": "Detect Nudity in Video",
              "doc_url": "https://algorithmia.com/algorithms/sfw/VideoNudityDetection",
              "api_url": "https://api.algorithmia.com/v1/algo/sfw/VideoNudityDetection"
            },
            {
              "username": "ml",
              "algoname": "ClickStreamTransitions",
              "algolabel": "Click Stream Transitions",
              "language": "Java",
              "card_line": "Returns the top 5 most \"interesting\" transitions learned by the Hidden Markov Model.",
              "submitted_at": "2015-10-19T21:17:26.000Z",
              "doc_url": "https://algorithmia.com/algorithms/ml/ClickStreamTransitions",
              "api_url": "https://api.algorithmia.com/v1/algo/ml/ClickStreamTransitions"
            },
            {
              "username": "mheimann",
              "algoname": "TrainFaceRecognizer",
              "algolabel": "Train Face Recognizer",
              "language": "Python 2.x",
              "card_line": "Trains a face recognizer from a labeled set of faces.",
              "submitted_at": "2015-08-08T00:03:29.000Z",
              "doc_url": "https://algorithmia.com/algorithms/mheimann/TrainFaceRecognizer",
              "api_url": "https://api.algorithmia.com/v1/algo/mheimann/TrainFaceRecognizer"
            },
            {
              "username": "weka",
              "algoname": "WekaHierarchicalClusterer",
              "algolabel": "WekaHierarchicalClusterer",
              "language": "Java",
              "card_line": "Uses Hierarchical clusterer, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/clusterers/HierarchicalClusterer.html",
              "submitted_at": "2015-06-29T21:41:31.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/WekaHierarchicalClusterer",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/WekaHierarchicalClusterer"
            },
            {
              "username": "conctest",
              "algoname": "DigitRecognition",
              "algolabel": "Digit Recognition",
              "language": "Python 2.x",
              "card_line": "Recognizes handwritten digits using a pre trained  Convolutional Neural Network .",
              "submitted_at": "2015-06-22T15:39:45.000Z",
              "doc_url": "https://algorithmia.com/algorithms/conctest/DigitRecognition",
              "api_url": "https://api.algorithmia.com/v1/algo/conctest/DigitRecognition"
            },
            {
              "username": "kenny",
              "algoname": "WekaCluster",
              "algolabel": "Weka Cluster",
              "language": "Java",
              "card_line": "k-means clustering using the Weka machine learning library.",
              "submitted_at": "2015-04-22T01:40:46.000Z",
              "doc_url": "https://algorithmia.com/algorithms/kenny/WekaCluster",
              "api_url": "https://api.algorithmia.com/v1/algo/kenny/WekaCluster"
            },
            {
              "username": "imageclassification",
              "algoname": "ImageClassificationTrainer",
              "algolabel": "Image Classification Trainer",
              "language": "Python 3.x",
              "card_line": " Train fine-tuned image classifiers with transfer learning. ",
              "doc_url": "https://algorithmia.com/algorithms/imageclassification/ImageClassificationTrainer",
              "api_url": "https://api.algorithmia.com/v1/algo/imageclassification/ImageClassificationTrainer"
            },
            {
              "username": "buliginleo",
              "algoname": "NudityCheck",
              "algolabel": "NudityCheck",
              "language": "Python 3.x",
              "card_line": "Free neural network for check nudity by link",
              "doc_url": "https://algorithmia.com/algorithms/buliginleo/NudityCheck",
              "api_url": "https://api.algorithmia.com/v1/algo/buliginleo/NudityCheck"
            },
            {
              "username": "imageclassification",
              "algoname": "ResNetModelRunner",
              "algolabel": "ResNet Model Runner",
              "language": "Python 3.x",
              "card_line": " Deploy pre-trained ResNets for inference. ",
              "doc_url": "https://algorithmia.com/algorithms/imageclassification/ResNetModelRunner",
              "api_url": "https://api.algorithmia.com/v1/algo/imageclassification/ResNetModelRunner"
            },
            {
              "username": "thatguy2048",
              "algoname": "SimpleKNN",
              "algolabel": "SimpleKNN",
              "language": "Java",
              "card_line": "This is a simple KNN classifier which accepts a given number of training data points, classes for those points and sample points to evaluate.",
              "submitted_at": "2015-10-19T21:35:10.000Z",
              "doc_url": "https://algorithmia.com/algorithms/thatguy2048/SimpleKNN",
              "api_url": "https://api.algorithmia.com/v1/algo/thatguy2048/SimpleKNN"
            },
            {
              "username": "jtbandes",
              "algoname": "LinearRegression",
              "algolabel": "LinearRegression",
              "language": "Java",
              "card_line": "Performs a least-squares regression with one independent variable.",
              "submitted_at": "2015-10-19T21:19:41.000Z",
              "doc_url": "https://algorithmia.com/algorithms/jtbandes/LinearRegression",
              "api_url": "https://api.algorithmia.com/v1/algo/jtbandes/LinearRegression"
            },
            {
              "username": "mlolson",
              "algoname": "LinearRegression",
              "algolabel": "LinearRegression",
              "language": "Java",
              "submitted_at": "2015-10-19T21:17:10.000Z",
              "doc_url": "https://algorithmia.com/algorithms/mlolson/LinearRegression",
              "api_url": "https://api.algorithmia.com/v1/algo/mlolson/LinearRegression"
            },
            {
              "username": "weka",
              "algoname": "CsvToArff",
              "algolabel": "CsvToArff",
              "language": "Java",
              "card_line": "Converts .csv",
              "submitted_at": "2015-10-04T06:26:04.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/CsvToArff",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/CsvToArff"
            },
            {
              "username": "opencv",
              "algoname": "RTrees",
              "algolabel": "RTrees",
              "language": "Java",
              "card_line": "A basic interface to OpenCV's RTrees, as explained in http://docs.opencv.org/java/org/opencv/ml/CvRTrees.html.",
              "submitted_at": "2015-05-01T01:58:49.000Z",
              "doc_url": "https://algorithmia.com/algorithms/opencv/RTrees",
              "api_url": "https://api.algorithmia.com/v1/algo/opencv/RTrees"
            },
            {
              "username": "weka",
              "algoname": "BayesianLogisticRegression",
              "algolabel": "BayesianLogisticRegression",
              "language": "Java",
              "card_line": "This is the BayesianLogisticRegression classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/bayes/BayesianLogisticRegression.html",
              "submitted_at": "2015-05-01T01:33:01.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/BayesianLogisticRegression",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/BayesianLogisticRegression"
            },
            {
              "username": "weka",
              "algoname": "BayesNet",
              "algolabel": "BayesNet",
              "language": "Java",
              "card_line": "This is the BayesNet classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/bayes/BayesNet.html",
              "submitted_at": "2015-05-01T01:32:53.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/BayesNet",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/BayesNet"
            },
            {
              "username": "weka",
              "algoname": "NaiveBayes",
              "algolabel": "NaiveBayes",
              "language": "Java",
              "card_line": "This is the NaiveBayes classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/bayes/NaiveBayes.html",
              "submitted_at": "2015-05-01T01:32:40.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/NaiveBayes",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/NaiveBayes"
            },
            {
              "username": "weka",
              "algoname": "NaiveBayesSimple",
              "algolabel": "NaiveBayesSimple",
              "language": "Java",
              "card_line": "This is the NaiveBayesSimple classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/bayes/NaiveBayesSimple.html",
              "submitted_at": "2015-05-01T01:32:25.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/NaiveBayesSimple",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/NaiveBayesSimple"
            },
            {
              "username": "weka",
              "algoname": "MultilayerPerceptron",
              "algolabel": "MultilayerPerceptron",
              "language": "Java",
              "card_line": "This is the MultilayerPerceptron classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/functions/MultilayerPerceptron.html",
              "submitted_at": "2015-05-01T01:31:48.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/MultilayerPerceptron",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/MultilayerPerceptron"
            },
            {
              "username": "weka",
              "algoname": "SimpleLogistic",
              "algolabel": "SimpleLogistic",
              "language": "Java",
              "card_line": "This is the SimpleLogistic classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/functions/SimpleLogistic.html",
              "submitted_at": "2015-05-01T01:31:27.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/SimpleLogistic",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/SimpleLogistic"
            },
            {
              "username": "weka",
              "algoname": "DigitRecognition",
              "algolabel": "Digit Recognition",
              "language": "Java",
              "card_line": "The Digit Recognition algorithm that uses a Random Forest model trained on 50000 samples obtained from the MNIST digits dataset.",
              "submitted_at": "2015-05-01T01:23:58.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/DigitRecognition",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/DigitRecognition"
            },
            {
              "username": "weka",
              "algoname": "JRip",
              "algolabel": "JRip",
              "language": "Java",
              "card_line": "This is the JRip classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/rules/JRip.html",
              "submitted_at": "2015-05-01T01:17:19.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/JRip",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/JRip"
            },
            {
              "username": "weka",
              "algoname": "PART",
              "algolabel": "PART",
              "language": "Java",
              "card_line": "This is the PART classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/rules/PART.html",
              "submitted_at": "2015-05-01T01:16:57.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/PART",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/PART"
            },
            {
              "username": "weka",
              "algoname": "J48graft",
              "algolabel": "J48graft",
              "language": "Java",
              "card_line": "This is the J48graft classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/trees/J48graft.html",
              "submitted_at": "2015-05-01T01:14:08.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/J48graft",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/J48graft"
            },
            {
              "username": "weka",
              "algoname": "MathExpression",
              "algolabel": "MathExpression",
              "language": "Java",
              "card_line": "This is the MathExpression filter, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/filters/unsupervised/attribute/MathExpression.html",
              "submitted_at": "2015-05-01T01:11:02.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/MathExpression",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/MathExpression"
            },
            {
              "username": "weka",
              "algoname": "TimeSeriesDelta",
              "algolabel": "TimeSeriesDelta",
              "language": "Java",
              "card_line": "This is the TimeSeriesDelta filter, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/filters/unsupervised/attribute/TimeSeriesDelta.html",
              "submitted_at": "2015-05-01T01:05:36.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/TimeSeriesDelta",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/TimeSeriesDelta"
            },
            {
              "username": "weka",
              "algoname": "SMOTE",
              "algolabel": "SMOTE",
              "language": "Java",
              "card_line": "This is the SMOTE filter, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/filters/supervised/instance/SMOTE.html",
              "submitted_at": "2015-05-01T01:04:53.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/SMOTE",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/SMOTE"
            },
            {
              "username": "mahout",
              "algoname": "DigitRecognizer",
              "algolabel": "Digit Recognizer",
              "language": "Java",
              "card_line": "Applies a random forest model trained on the MNIST handwritten digit dataset to a 28 by 28 grayscale pixel grid, which is input as a double array of length 784.",
              "submitted_at": "2015-03-11T22:41:52.000Z",
              "doc_url": "https://algorithmia.com/algorithms/mahout/DigitRecognizer",
              "api_url": "https://api.algorithmia.com/v1/algo/mahout/DigitRecognizer"
            },
            {
              "username": "PetiteProgrammer",
              "algoname": "AutoComplete",
              "algolabel": "AutoComplete (Auto Complete, Next Word Prediction)",
              "language": "Python 3.x",
              "card_line": "Completes sentences based on user input ",
              "doc_url": "https://algorithmia.com/algorithms/PetiteProgrammer/AutoComplete",
              "api_url": "https://api.algorithmia.com/v1/algo/PetiteProgrammer/AutoComplete"
            },
            {
              "username": "o12827402",
              "algoname": "fjcut_v1",
              "algolabel": "fjcut_v1",
              "language": "Python 2.x",
              "card_line": "Overview Provide a short overview of your algorithm.",
              "doc_url": "https://algorithmia.com/algorithms/o12827402/fjcut_v1",
              "api_url": "https://api.algorithmia.com/v1/algo/o12827402/fjcut_v1"
            },
            {
              "username": "pappacena",
              "algoname": "kmeans",
              "algolabel": "k-means",
              "language": "Python 3.x",
              "card_line": "Simple k-means algorithm implementation",
              "doc_url": "https://algorithmia.com/algorithms/pappacena/kmeans",
              "api_url": "https://api.algorithmia.com/v1/algo/pappacena/kmeans"
            },
            {
              "username": "web",
              "algoname": "MaliciousDomainClassifier",
              "algolabel": "Malicious Domain Classifier",
              "language": "Java",
              "card_line": "Determine whether a domain name is safe or malicious",
              "doc_url": "https://algorithmia.com/algorithms/web/MaliciousDomainClassifier",
              "api_url": "https://api.algorithmia.com/v1/algo/web/MaliciousDomainClassifier"
            },
            {
              "username": "PetiteProgrammer",
              "algoname": "NumberExtractor",
              "algolabel": "NumberExtractor",
              "language": "Python 3.x",
              "card_line": "Extracts numbers (positive, negative and floats) from raw text.",
              "doc_url": "https://algorithmia.com/algorithms/PetiteProgrammer/NumberExtractor",
              "api_url": "https://api.algorithmia.com/v1/algo/PetiteProgrammer/NumberExtractor"
            },
            {
              "username": "lucianosantabrigida",
              "algoname": "ptwiki2vec",
              "algolabel": "ptwiki2vec",
              "language": "Python 3.x",
              "card_line": "[WIP] portuguese wikipedia vectors",
              "doc_url": "https://algorithmia.com/algorithms/lucianosantabrigida/ptwiki2vec",
              "api_url": "https://api.algorithmia.com/v1/algo/lucianosantabrigida/ptwiki2vec"
            },
            {
              "username": "dbgannon",
              "algoname": "SciDocClassifier",
              "algolabel": "SciDocClassifier",
              "language": "Python 3.x",
              "card_line": "Overview SciDocClassifier uses a ML Model created by Gensim Doc2vec to classify scientific abstracts into five...",
              "doc_url": "https://algorithmia.com/algorithms/dbgannon/SciDocClassifier",
              "api_url": "https://api.algorithmia.com/v1/algo/dbgannon/SciDocClassifier"
            },
            {
              "username": "jagiella",
              "algoname": "BirthDeathProcess",
              "algolabel": "BirthDeathProcess",
              "language": "Java",
              "submitted_at": "2015-10-19T21:52:34.000Z",
              "doc_url": "https://algorithmia.com/algorithms/jagiella/BirthDeathProcess",
              "api_url": "https://api.algorithmia.com/v1/algo/jagiella/BirthDeathProcess"
            },
            {
              "username": "paranoia",
              "algoname": "OrdinaryLeastSquares",
              "algolabel": "OrdinaryLeastSquares",
              "language": "Java",
              "submitted_at": "2015-10-19T21:15:20.000Z",
              "doc_url": "https://algorithmia.com/algorithms/paranoia/OrdinaryLeastSquares",
              "api_url": "https://api.algorithmia.com/v1/algo/paranoia/OrdinaryLeastSquares"
            },
            {
              "username": "weka",
              "algoname": "LogitBoost",
              "algolabel": "Logit Boost",
              "language": "Java",
              "card_line": "This is the LogitBoost classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/meta/LogitBoost.html",
              "submitted_at": "2015-10-02T19:03:17.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/LogitBoost",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/LogitBoost"
            },
            {
              "username": "weka",
              "algoname": "SimpleKMeansClusterer",
              "algolabel": "SimpleKMeansClusterer",
              "language": "Java",
              "card_line": "Uses SimpleKMeans clusterer, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/clusterers/SimpleKMeans.html",
              "submitted_at": "2015-06-29T21:55:45.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/SimpleKMeansClusterer",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/SimpleKMeansClusterer"
            },
            {
              "username": "weka",
              "algoname": "XMeansClusterer",
              "algolabel": "XMeansClusterer",
              "language": "Java",
              "card_line": "Uses XMeans clusterer, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/clusterers/XMeans.html",
              "submitted_at": "2015-06-29T21:54:59.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/XMeansClusterer",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/XMeansClusterer"
            },
            {
              "username": "weka",
              "algoname": "sIBClusterer",
              "algolabel": "sIBClusterer",
              "language": "Java",
              "card_line": "Uses sIB clusterer, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/clusterers/sIB.html",
              "submitted_at": "2015-06-29T21:53:29.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/sIBClusterer",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/sIBClusterer"
            },
            {
              "username": "weka",
              "algoname": "WekaMakeDensityBasedClusterer",
              "algolabel": "WekaMakeDensityBasedClusterer",
              "language": "Java",
              "card_line": "Uses MakeDensityBasedClusterer, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/clusterers/MakeDensityBasedClusterer.html",
              "submitted_at": "2015-06-29T21:52:03.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/WekaMakeDensityBasedClusterer",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/WekaMakeDensityBasedClusterer"
            },
            {
              "username": "weka",
              "algoname": "WekaFilteredClusterer",
              "algolabel": "WekaFilteredClusterer",
              "language": "Java",
              "card_line": "Uses Filtered clusterer, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/clusterers/FilteredClusterer.html",
              "submitted_at": "2015-06-29T21:40:46.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/WekaFilteredClusterer",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/WekaFilteredClusterer"
            },
            {
              "username": "weka",
              "algoname": "FarthestFirstClusterer",
              "algolabel": "FarthestFirstClusterer",
              "language": "Java",
              "card_line": "Uses Farthest First clusterer, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/clusterers/FarthestFirst.html",
              "submitted_at": "2015-06-29T21:39:53.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/FarthestFirstClusterer",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/FarthestFirstClusterer"
            },
            {
              "username": "weka",
              "algoname": "EMClusterer",
              "algolabel": "EMClusterer",
              "language": "Java",
              "card_line": "Uses EM clusterer, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/clusterers/EM.html",
              "submitted_at": "2015-06-29T21:38:54.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/EMClusterer",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/EMClusterer"
            },
            {
              "username": "weka",
              "algoname": "CobwebClusterer",
              "algolabel": "CobwebClusterer",
              "language": "Java",
              "card_line": "Uses Cobweb clusterer, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/clusterers/Cobweb.html",
              "submitted_at": "2015-06-29T21:38:19.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/CobwebClusterer",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/CobwebClusterer"
            },
            {
              "username": "weka",
              "algoname": "CLOPEClusterer",
              "algolabel": "CLOPEClusterer",
              "language": "Java",
              "card_line": "Uses CLOPE clusterer, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/clusterers/CLOPE.html",
              "submitted_at": "2015-06-29T21:36:19.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/CLOPEClusterer",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/CLOPEClusterer"
            },
            {
              "username": "opencv",
              "algoname": "ERTrees",
              "algolabel": "ERTrees",
              "language": "Java",
              "card_line": "A basic interface to OpenCV's ERTrees, as explained in http://docs.opencv.org/java/org/opencv/ml/CvERTrees.html.",
              "submitted_at": "2015-05-01T01:58:47.000Z",
              "doc_url": "https://algorithmia.com/algorithms/opencv/ERTrees",
              "api_url": "https://api.algorithmia.com/v1/algo/opencv/ERTrees"
            },
            {
              "username": "opencv",
              "algoname": "DTree",
              "algolabel": "DTree",
              "language": "Java",
              "card_line": "A basic interface to OpenCV's DTree, as explained in http://docs.opencv.org/java/org/opencv/ml/CvDTree.html.",
              "submitted_at": "2015-05-01T01:58:46.000Z",
              "doc_url": "https://algorithmia.com/algorithms/opencv/DTree",
              "api_url": "https://api.algorithmia.com/v1/algo/opencv/DTree"
            },
            {
              "username": "opencv",
              "algoname": "SVM",
              "algolabel": "SVM",
              "language": "Java",
              "card_line": "A basic interface to OpenCV's SVM, as explained in http://docs.opencv.org/java/org/opencv/ml/CvSVM.html .",
              "submitted_at": "2015-05-01T01:58:46.000Z",
              "doc_url": "https://algorithmia.com/algorithms/opencv/SVM",
              "api_url": "https://api.algorithmia.com/v1/algo/opencv/SVM"
            },
            {
              "username": "opencv",
              "algoname": "NormalBayesClassifier",
              "algolabel": "Normal Bayes Classifier",
              "language": "Java",
              "card_line": "A basic interface to OpenCV's DTree, as explained in http://docs.opencv.org/java/org/opencv/ml/CvNormalBayesClassifier.html .",
              "submitted_at": "2015-05-01T01:58:44.000Z",
              "doc_url": "https://algorithmia.com/algorithms/opencv/NormalBayesClassifier",
              "api_url": "https://api.algorithmia.com/v1/algo/opencv/NormalBayesClassifier"
            },
            {
              "username": "opencv",
              "algoname": "KNearest",
              "algolabel": "KNearest",
              "language": "Java",
              "card_line": "An interface to OpenCV's K nearest neighbor, as explained in http://docs.opencv.org/java/org/opencv/ml/CvKNearest.html .",
              "submitted_at": "2015-05-01T01:58:42.000Z",
              "doc_url": "https://algorithmia.com/algorithms/opencv/KNearest",
              "api_url": "https://api.algorithmia.com/v1/algo/opencv/KNearest"
            },
            {
              "username": "opencv",
              "algoname": "Boost",
              "algolabel": "Boost",
              "language": "Java",
              "card_line": "A basic interface to OpenCV's Boost, as explained in http://docs.opencv.org/java/org/opencv/ml/CvBoost.html .",
              "submitted_at": "2015-05-01T01:58:23.000Z",
              "doc_url": "https://algorithmia.com/algorithms/opencv/Boost",
              "api_url": "https://api.algorithmia.com/v1/algo/opencv/Boost"
            },
            {
              "username": "opencv",
              "algoname": "MLP",
              "algolabel": "MLP",
              "language": "Java",
              "card_line": "An interface to OpenCV's ANN_MLP, as explained in http://docs.opencv.org/java/org/opencv/ml/CvANN_MLP.html .",
              "submitted_at": "2015-05-01T01:58:23.000Z",
              "doc_url": "https://algorithmia.com/algorithms/opencv/MLP",
              "api_url": "https://api.algorithmia.com/v1/algo/opencv/MLP"
            },
            {
              "username": "opencv",
              "algoname": "GBTrees",
              "algolabel": "GBTrees",
              "language": "Java",
              "card_line": "A basic interface to OpenCV's DTree, as explained in http://docs.opencv.org/java/org/opencv/ml/CvGBTrees.html .",
              "submitted_at": "2015-05-01T01:58:21.000Z",
              "doc_url": "https://algorithmia.com/algorithms/opencv/GBTrees",
              "api_url": "https://api.algorithmia.com/v1/algo/opencv/GBTrees"
            },
            {
              "username": "weka",
              "algoname": "AODE",
              "algolabel": "AODE",
              "language": "Java",
              "card_line": "This is the AODE classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/bayes/AODE.html",
              "submitted_at": "2015-05-01T01:33:12.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/AODE",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/AODE"
            },
            {
              "username": "weka",
              "algoname": "AODEsr",
              "algolabel": "AODEsr",
              "language": "Java",
              "card_line": "This is the AODEsr classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/bayes/AODEsr.html",
              "submitted_at": "2015-05-01T01:33:05.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/AODEsr",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/AODEsr"
            },
            {
              "username": "weka",
              "algoname": "ComplementNaiveBayes",
              "algolabel": "ComplementNaiveBayes",
              "language": "Java",
              "card_line": "This is the ComplementNaiveBayes classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/bayes/ComplementNaiveBayes.html",
              "submitted_at": "2015-05-01T01:32:51.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/ComplementNaiveBayes",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/ComplementNaiveBayes"
            },
            {
              "username": "weka",
              "algoname": "DMNBtext",
              "algolabel": "DMNBtext",
              "language": "Java",
              "card_line": "This is the DMNBtext classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/bayes/DMNBtext.html",
              "submitted_at": "2015-05-01T01:32:49.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/DMNBtext",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/DMNBtext"
            },
            {
              "username": "weka",
              "algoname": "HNB",
              "algolabel": "HNB",
              "language": "Java",
              "card_line": "This is the HNB classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/bayes/HNB.html",
              "submitted_at": "2015-05-01T01:32:47.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/HNB",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/HNB"
            }
          ]
        }
      },
      {
        "request": {
          "url": "/webapi/algorithms/PetiteProgrammer/ProgrammingLanguageIdentification",
          "method": "GET",
          "headers": {
            "host": "algorithmia.com",
            "connection": "keep-alive",
            "pragma": "no-cache",
            "cache-control": "no-cache",
            "accept": "application/json, text/plain, */*",
            "dnt": "1",
            "x-xsrf-token": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "cors",
            "referer": "https://algorithmia.com/tags/machine-learning",
            "accept-encoding": "gzip, deflate, br",
            "accept-language": "en-US,en;q=0.9",
            "cookie": "ajs_group_id=null; ajs_anonymous_id=%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22; _ga=GA1.2.1872580011.1571235636; _fbp=fb.1.1571235636317.604574724; intercom-id-c9fj6354=01941621-342b-4320-ad75-53826b5a002c; hubspotutk=105fad8a9b12bfed67330a0dbfe12c61; _gid=GA1.2.1843278152.1572282100; __zlcmid=uzie5dAUbB300Y; __hstc=69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3; __hssrc=1; fs_intercom=4655074328608768:4513847218700288; XSRF-TOKEN=0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da; referrer=www.google.com; landing_page=https://algorithmia.com/; signup_session=true; ajs_user_id=%22acunniffe%22; fs_uid=rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636; new-algo-language=scala; __hssc=69686351.5.1572357353053; intercom-session-c9fj6354=L08zdks3K1FOZEs0NngyR2NDQjBxN3VMb1J3dE1QZ0t4N2piYXY5ZmlNWFNVMkxseFhidkxhZ0g4QStWV2hYay0tUUtjQUtFaUZvLzJIZ0drSFdnRjM0UT09--fc3e700881b2cd1507c47ce6533f5b502d54fb7c; ALGO_SESSION=603a7f3d73d33ac5edd94b9693831216aeacda28-last-access=2019-10-29T14%3A06%3A31.644Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "cookies": {
            "ajs_group_id": "null",
            "ajs_anonymous_id": "%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22",
            "_ga": "GA1.2.1872580011.1571235636",
            "_fbp": "fb.1.1571235636317.604574724",
            "intercom-id-c9fj6354": "01941621-342b-4320-ad75-53826b5a002c",
            "hubspotutk": "105fad8a9b12bfed67330a0dbfe12c61",
            "_gid": "GA1.2.1843278152.1572282100",
            "__zlcmid": "uzie5dAUbB300Y",
            "__hstc": "69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3",
            "__hssrc": "1",
            "fs_intercom": "4655074328608768:4513847218700288",
            "XSRF-TOKEN": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "referrer": "www.google.com",
            "landing_page": "https://algorithmia.com/",
            "signup_session": "true",
            "ajs_user_id": "%22acunniffe%22",
            "fs_uid": "rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636",
            "new-algo-language": "scala",
            "__hssc": "69686351.5.1572357353053",
            "intercom-session-c9fj6354": "L08zdks3K1FOZEs0NngyR2NDQjBxN3VMb1J3dE1QZ0t4N2piYXY5ZmlNWFNVMkxseFhidkxhZ0g4QStWV2hYay0tUUtjQUtFaUZvLzJIZ0drSFdnRjM0UT09--fc3e700881b2cd1507c47ce6533f5b502d54fb7c",
            "ALGO_SESSION": "603a7f3d73d33ac5edd94b9693831216aeacda28-last-access=2019-10-29T14%3A06%3A31.644Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "queryParameters": {}
        },
        "response": {
          "statusCode": 200,
          "headers": {
            "content-encoding": "gzip",
            "content-type": "application/json; charset=utf-8",
            "date": "Tue, 29 Oct 2019 14:06:33 GMT",
            "set-cookie": "ALGO_SESSION=a3f6b462d90b3bf25cbca6e5cd34212f79c55457-last-access=2019-10-29T14%3A06%3A33.955Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3; Max-Age=86400; Expires=Wed, 30 Oct 2019 14:06:33 GMT; Path=/; Domain=algorithmia.com; Secure; HTTPOnly",
            "strict-transport-security": "max-age=86400; includeSubDomains",
            "vary": "Accept-Encoding",
            "x-content-type-options": "nosniff",
            "x-frame-options": "DENY",
            "content-length": "1515",
            "connection": "keep-alive"
          },
          "body": {
            "algorithm": {
              "algo_id": 37412,
              "object_id": "algo-e32d5ea4-1149-4a8e-85ed-86900bc37482",
              "username": "PetiteProgrammer",
              "algoname": "ProgrammingLanguageIdentification",
              "algolabel": "Programming Language Identification",
              "language": "python3-1",
              "tag_line": "Detect the programming language of source code",
              "card_line": "Detect the programming language of source code",
              "summary": "<p>This algorithm detects the programming language of source code with high accuracy (about 99.4% top-1 accuracy for a Github dataset).</p>\n<p>It currently supports these languages:</p>\n<p><span>C, </span><span>C#, C++, CSS, Haskell, HTML, Java, JavaScript, Lua, Objective-C, Perl, PHP, Python, R, Scala, SQL, Swift, VB.</span></p>\n<p>Also see <a href=\"https://medium.com/machine-learning-at-petiteprogrammer/detecting-the-programming-language-of-source-code-snippets-using-machine-learning-and-neural-e275ca4ce93e\">my article</a> on the machine learning techniques used.</p>\n<h3>Input</h3>\n<p>The text of a document with source code.</p>\n<h3><strong>Output</strong></h3>\n<p>List of pairs: [language name, probability]</p>\n<p>For example:</p>\n<pre>[  [\"javascript\", 0.9935536807317678],  [\"vb\", 0.001937278879510437],  [\"c\", 0.0017313291225903907] ...]</pre>\n",
              "discoverable_world": true,
              "source_world": false,
              "license": "apl",
              "tags": [
                "classifier",
                "language identification",
                "machine learning",
                "nlp",
                "text analysis",
                "utilities"
              ],
              "stats": {
                "duration_avg": 1.0086366440468846,
                "total_calls": 227001,
                "follower_count": 25,
                "vote_count": 42
              },
              "latest_version": {
                "version": "0.1.3",
                "version_hash": "fc1ca3bb92ccd0ced2d8ddd45e1a39a664124d71",
                "callable_world": true,
                "has_internet": true,
                "can_recurse": false,
                "cost": 20,
                "runner_image_name": "algorithmia/langserver-single",
                "runner_image_tag": "latest",
                "worker_type": "CPU",
                "requires_gpu": false
              },
              "sample": {
                "sample_input": "\"/* Simple JavaScript example */\\n\\n// add two numbers\\nfunction add(n, m) {\\n  return n + m;\\n}\"",
                "sample_output": "[[\"javascript\",0.9898891716577287],[\"markdown\",0.003837364611352916],[\"java\",0.0018736157456299308],[\"php\",0.0017531876463711639],[\"c\",0.0009585207454160043],[\"lua\",0.0007419186073970404],[\"html\",0.0003518026874305513],[\"objective-c\",0.0002779842516112652],[\"sql\",0.00017283418084344316],[\"css\",0.000038611774005519745],[\"c++\",0.0000343903914437696],[\"swift\",0.00003122888156291078],[\"bash\",0.000013677125153852474],[\"ruby\",0.00001224731478181401],[\"perl\",0.000005581660035943508],[\"c#\",0.0000038442524620865925],[\"scala\",0.000003723956933340254],[\"python\",1.572113560595084E-7],[\"r\",6.431838326426007E-8],[\"haskell\",4.036764786336715E-8],[\"vb\",3.261245241114874E-8]]"
              },
              "current_user": {
                "is_member": false,
                "is_owner": false,
                "is_follower": false,
                "is_voter": false
              },
              "latestCommit": "2fc6f9af74ec1f7ca7a98dd79506d0ce6a6d29b6"
            }
          }
        }
      },
      {
        "request": {
          "url": "/meta/algorithms",
          "method": "GET",
          "headers": {
            "host": "algorithmia.com",
            "connection": "keep-alive",
            "pragma": "no-cache",
            "cache-control": "no-cache",
            "accept": "application/json, text/plain, */*",
            "dnt": "1",
            "x-xsrf-token": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "cors",
            "referer": "https://algorithmia.com/tags/machine-learning",
            "accept-encoding": "gzip, deflate, br",
            "accept-language": "en-US,en;q=0.9",
            "cookie": "ajs_group_id=null; ajs_anonymous_id=%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22; _ga=GA1.2.1872580011.1571235636; _fbp=fb.1.1571235636317.604574724; intercom-id-c9fj6354=01941621-342b-4320-ad75-53826b5a002c; hubspotutk=105fad8a9b12bfed67330a0dbfe12c61; _gid=GA1.2.1843278152.1572282100; __zlcmid=uzie5dAUbB300Y; __hstc=69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3; __hssrc=1; fs_intercom=4655074328608768:4513847218700288; XSRF-TOKEN=0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da; referrer=www.google.com; landing_page=https://algorithmia.com/; signup_session=true; ajs_user_id=%22acunniffe%22; fs_uid=rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636; new-algo-language=scala; __hssc=69686351.5.1572357353053; intercom-session-c9fj6354=L08zdks3K1FOZEs0NngyR2NDQjBxN3VMb1J3dE1QZ0t4N2piYXY5ZmlNWFNVMkxseFhidkxhZ0g4QStWV2hYay0tUUtjQUtFaUZvLzJIZ0drSFdnRjM0UT09--fc3e700881b2cd1507c47ce6533f5b502d54fb7c; ALGO_SESSION=a3f6b462d90b3bf25cbca6e5cd34212f79c55457-last-access=2019-10-29T14%3A06%3A33.955Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "cookies": {
            "ajs_group_id": "null",
            "ajs_anonymous_id": "%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22",
            "_ga": "GA1.2.1872580011.1571235636",
            "_fbp": "fb.1.1571235636317.604574724",
            "intercom-id-c9fj6354": "01941621-342b-4320-ad75-53826b5a002c",
            "hubspotutk": "105fad8a9b12bfed67330a0dbfe12c61",
            "_gid": "GA1.2.1843278152.1572282100",
            "__zlcmid": "uzie5dAUbB300Y",
            "__hstc": "69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3",
            "__hssrc": "1",
            "fs_intercom": "4655074328608768:4513847218700288",
            "XSRF-TOKEN": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "referrer": "www.google.com",
            "landing_page": "https://algorithmia.com/",
            "signup_session": "true",
            "ajs_user_id": "%22acunniffe%22",
            "fs_uid": "rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636",
            "new-algo-language": "scala",
            "__hssc": "69686351.5.1572357353053",
            "intercom-session-c9fj6354": "L08zdks3K1FOZEs0NngyR2NDQjBxN3VMb1J3dE1QZ0t4N2piYXY5ZmlNWFNVMkxseFhidkxhZ0g4QStWV2hYay0tUUtjQUtFaUZvLzJIZ0drSFdnRjM0UT09--fc3e700881b2cd1507c47ce6533f5b502d54fb7c",
            "ALGO_SESSION": "a3f6b462d90b3bf25cbca6e5cd34212f79c55457-last-access=2019-10-29T14%3A06%3A33.955Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "queryParameters": {
            "order": "most_called",
            "tag": "machine-learning"
          }
        },
        "response": {
          "statusCode": 200,
          "headers": {
            "content-encoding": "gzip",
            "content-type": "application/json; charset=utf-8",
            "date": "Tue, 29 Oct 2019 14:06:35 GMT",
            "set-cookie": "ALGO_SESSION=42bc47fad409d3917bac2f3f641b5b7d816b0be2-last-access=2019-10-29T14%3A06%3A35.309Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3; Max-Age=86400; Expires=Wed, 30 Oct 2019 14:06:35 GMT; Path=/; Domain=algorithmia.com; Secure; HTTPOnly",
            "strict-transport-security": "max-age=86400; includeSubDomains",
            "vary": "Accept-Encoding",
            "x-content-type-options": "nosniff",
            "x-frame-options": "DENY",
            "content-length": "6125",
            "connection": "keep-alive"
          },
          "body": [
            {
              "username": "PetiteProgrammer",
              "algoname": "ProgrammingLanguageIdentification",
              "algolabel": "Programming Language Identification",
              "language": "Python 3.x",
              "card_line": "Detect the programming language of source code",
              "doc_url": "https://algorithmia.com/algorithms/PetiteProgrammer/ProgrammingLanguageIdentification",
              "api_url": "https://api.algorithmia.com/v1/algo/PetiteProgrammer/ProgrammingLanguageIdentification"
            },
            {
              "username": "dlib",
              "algoname": "FaceDetection",
              "algolabel": "Face Detection",
              "language": "Python 2.x",
              "card_line": "This algorithm detects human faces in given images.",
              "doc_url": "https://algorithmia.com/algorithms/dlib/FaceDetection",
              "api_url": "https://api.algorithmia.com/v1/algo/dlib/FaceDetection"
            },
            {
              "username": "nlp",
              "algoname": "Doc2Vec",
              "algolabel": "Doc2Vec",
              "language": "Python 2.x",
              "card_line": "Vectorize documents of arbitrary length",
              "doc_url": "https://algorithmia.com/algorithms/nlp/Doc2Vec",
              "api_url": "https://api.algorithmia.com/v1/algo/nlp/Doc2Vec"
            },
            {
              "username": "classification",
              "algoname": "GenderByName",
              "algolabel": "Gender By Name (First, Last or Full Name) Classifier",
              "language": "Python 3.x",
              "card_line": "Fast gender classifier by name. Classification works with first and last name (order-independent); last name optional.",
              "doc_url": "https://algorithmia.com/algorithms/classification/GenderByName",
              "api_url": "https://api.algorithmia.com/v1/algo/classification/GenderByName"
            },
            {
              "username": "paranoia",
              "algoname": "FpGrowth",
              "algolabel": "FpGrowth",
              "language": "Java",
              "card_line": "A scalable method for finding frequent patterns within large datasets",
              "submitted_at": "2015-12-07T00:08:45.000Z",
              "doc_url": "https://algorithmia.com/algorithms/paranoia/FpGrowth",
              "api_url": "https://api.algorithmia.com/v1/algo/paranoia/FpGrowth"
            },
            {
              "username": "deeplearning",
              "algoname": "ObjectDetectionCOCO",
              "algolabel": "ObjectDetection - COCO",
              "language": "Python 3.x",
              "card_line": "Detecting Objects in complex scenes",
              "doc_url": "https://algorithmia.com/algorithms/deeplearning/ObjectDetectionCOCO",
              "api_url": "https://api.algorithmia.com/v1/algo/deeplearning/ObjectDetectionCOCO"
            },
            {
              "username": "nlp",
              "algoname": "DocumentClassifier",
              "algolabel": "Document Classifier",
              "language": "Scala",
              "card_line": "Classify or Recommend documents with ease",
              "doc_url": "https://algorithmia.com/algorithms/nlp/DocumentClassifier",
              "api_url": "https://api.algorithmia.com/v1/algo/nlp/DocumentClassifier"
            },
            {
              "username": "PetiteProgrammer",
              "algoname": "TextSimilarity",
              "algolabel": "Text Similarity",
              "language": "Python 3.x",
              "card_line": "Find the most similar text files within a collection of documents",
              "doc_url": "https://algorithmia.com/algorithms/PetiteProgrammer/TextSimilarity",
              "api_url": "https://api.algorithmia.com/v1/algo/PetiteProgrammer/TextSimilarity"
            },
            {
              "username": "weka",
              "algoname": "WekaClassification",
              "algolabel": "Weka Classification",
              "language": "Java",
              "card_line": "This is the main algorithm that all of the Weka classification algorithms call.",
              "submitted_at": "2015-10-02T20:39:49.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/WekaClassification",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/WekaClassification"
            },
            {
              "username": "mahout",
              "algoname": "DigitRecognizer",
              "algolabel": "Digit Recognizer",
              "language": "Java",
              "card_line": "Applies a random forest model trained on the MNIST handwritten digit dataset to a 28 by 28 grayscale pixel grid, which is input as a double array of length 784.",
              "submitted_at": "2015-03-11T22:41:52.000Z",
              "doc_url": "https://algorithmia.com/algorithms/mahout/DigitRecognizer",
              "api_url": "https://api.algorithmia.com/v1/algo/mahout/DigitRecognizer"
            },
            {
              "username": "mahout",
              "algoname": "RandomForestApply",
              "algolabel": "Random Forest Apply",
              "language": "Java",
              "card_line": "Apply trained Mahout Random Forest Classifier to data",
              "submitted_at": "2015-03-11T21:13:18.000Z",
              "doc_url": "https://algorithmia.com/algorithms/mahout/RandomForestApply",
              "api_url": "https://api.algorithmia.com/v1/algo/mahout/RandomForestApply"
            },
            {
              "username": "deeplearning",
              "algoname": "Parsey",
              "algolabel": "Parsey McParseface",
              "language": "Scala",
              "card_line": "Parse sentences with ease.",
              "doc_url": "https://algorithmia.com/algorithms/deeplearning/Parsey",
              "api_url": "https://api.algorithmia.com/v1/algo/deeplearning/Parsey"
            },
            {
              "username": "character_recognition",
              "algoname": "tesseract",
              "algolabel": "tesseract",
              "language": "Python 2.x",
              "card_line": "extracts text with deep learning",
              "doc_url": "https://algorithmia.com/algorithms/character_recognition/tesseract",
              "api_url": "https://api.algorithmia.com/v1/algo/character_recognition/tesseract"
            },
            {
              "username": "PetiteProgrammer",
              "algoname": "NamedEntityRecognition",
              "algolabel": "Named Entity Recognition (Detection of Persons, Dates, Locations and much more)",
              "language": "Python 3.x",
              "card_line": "Extracts entities out of text such as persons and organizations, with high precision. ",
              "doc_url": "https://algorithmia.com/algorithms/PetiteProgrammer/NamedEntityRecognition",
              "api_url": "https://api.algorithmia.com/v1/algo/PetiteProgrammer/NamedEntityRecognition"
            },
            {
              "username": "weka",
              "algoname": "DigitRecognition",
              "algolabel": "Digit Recognition",
              "language": "Java",
              "card_line": "The Digit Recognition algorithm that uses a Random Forest model trained on 50000 samples obtained from the MNIST digits dataset.",
              "submitted_at": "2015-05-01T01:23:58.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/DigitRecognition",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/DigitRecognition"
            },
            {
              "username": "bkyan",
              "algoname": "StyleThief",
              "algolabel": "StyleThief (Open Source)",
              "language": "Python 2.x",
              "card_line": "Anish Athalye's Neural Style Transfer Using TensorFlow",
              "doc_url": "https://algorithmia.com/algorithms/bkyan/StyleThief",
              "api_url": "https://api.algorithmia.com/v1/algo/bkyan/StyleThief"
            },
            {
              "username": "PetiteProgrammer",
              "algoname": "NumberExtractor",
              "algolabel": "NumberExtractor",
              "language": "Python 3.x",
              "card_line": "Extracts numbers (positive, negative and floats) from raw text.",
              "doc_url": "https://algorithmia.com/algorithms/PetiteProgrammer/NumberExtractor",
              "api_url": "https://api.algorithmia.com/v1/algo/PetiteProgrammer/NumberExtractor"
            },
            {
              "username": "PetiteProgrammer",
              "algoname": "DateExtractor",
              "algolabel": "DateExtractor",
              "language": "Python 3.x",
              "card_line": "Extracts dates from raw text",
              "doc_url": "https://algorithmia.com/algorithms/PetiteProgrammer/DateExtractor",
              "api_url": "https://api.algorithmia.com/v1/algo/PetiteProgrammer/DateExtractor"
            },
            {
              "username": "media",
              "algoname": "ContentAwareResize",
              "algolabel": "Content Aware Resize",
              "language": "Python 2.x",
              "card_line": "Resize images automatically, without removing important features such as faces",
              "doc_url": "https://algorithmia.com/algorithms/media/ContentAwareResize",
              "api_url": "https://api.algorithmia.com/v1/algo/media/ContentAwareResize"
            },
            {
              "username": "kenny",
              "algoname": "WekaCluster",
              "algolabel": "Weka Cluster",
              "language": "Java",
              "card_line": "k-means clustering using the Weka machine learning library.",
              "submitted_at": "2015-04-22T01:40:46.000Z",
              "doc_url": "https://algorithmia.com/algorithms/kenny/WekaCluster",
              "api_url": "https://api.algorithmia.com/v1/algo/kenny/WekaCluster"
            },
            {
              "username": "mheimann",
              "algoname": "RecognizeFaces",
              "algolabel": "Recognize Faces",
              "language": "Python 2.x",
              "card_line": "Uses a trained face recognizer to identify faces.",
              "submitted_at": "2015-10-06T00:50:11.000Z",
              "doc_url": "https://algorithmia.com/algorithms/mheimann/RecognizeFaces",
              "api_url": "https://api.algorithmia.com/v1/algo/mheimann/RecognizeFaces"
            },
            {
              "username": "guardlogic",
              "algoname": "AdultImageClassifier",
              "algolabel": "AdultImageClassifier",
              "language": "Python 2.x",
              "card_line": "  Assesses if an image contains \"Adult\" content where the term \"Adult\" is defined as \"sexually explicit\".",
              "doc_url": "https://algorithmia.com/algorithms/guardlogic/AdultImageClassifier",
              "api_url": "https://api.algorithmia.com/v1/algo/guardlogic/AdultImageClassifier"
            },
            {
              "username": "cv",
              "algoname": "FaceRecognition",
              "algolabel": "Face Recognition",
              "language": "Python 2.x",
              "card_line": "Train and recognize human faces",
              "doc_url": "https://algorithmia.com/algorithms/cv/FaceRecognition",
              "api_url": "https://api.algorithmia.com/v1/algo/cv/FaceRecognition"
            },
            {
              "username": "character_recognition",
              "algoname": "TextDetectionCTPN",
              "algolabel": "Text Detection (CTPN)",
              "language": "Python 2.x",
              "card_line": "detect text or words in any kind of image including both scanned documents and natural images.",
              "doc_url": "https://algorithmia.com/algorithms/character_recognition/TextDetectionCTPN",
              "api_url": "https://api.algorithmia.com/v1/algo/character_recognition/TextDetectionCTPN"
            },
            {
              "username": "web",
              "algoname": "MaliciousDomainClassifier",
              "algolabel": "Malicious Domain Classifier",
              "language": "Java",
              "card_line": "Determine whether a domain name is safe or malicious",
              "doc_url": "https://algorithmia.com/algorithms/web/MaliciousDomainClassifier",
              "api_url": "https://api.algorithmia.com/v1/algo/web/MaliciousDomainClassifier"
            },
            {
              "username": "character_recognition",
              "algoname": "NaturalTextNet",
              "algolabel": "Natural Text Net",
              "language": "Python 3.x",
              "card_line": "Extracts text from natural scene images",
              "doc_url": "https://algorithmia.com/algorithms/character_recognition/NaturalTextNet",
              "api_url": "https://api.algorithmia.com/v1/algo/character_recognition/NaturalTextNet"
            },
            {
              "username": "PetiteProgrammer",
              "algoname": "pythoncodeprediction",
              "algolabel": "Python Code Prediction",
              "language": "Python 3.x",
              "card_line": "Next word/sequence prediction for Python code",
              "doc_url": "https://algorithmia.com/algorithms/PetiteProgrammer/pythoncodeprediction",
              "api_url": "https://api.algorithmia.com/v1/algo/PetiteProgrammer/pythoncodeprediction"
            },
            {
              "username": "sfw",
              "algoname": "VideoNudityDetection",
              "algolabel": "Video Nudity Detection",
              "language": "Python 2.x",
              "card_line": "Detect Nudity in Video",
              "doc_url": "https://algorithmia.com/algorithms/sfw/VideoNudityDetection",
              "api_url": "https://api.algorithmia.com/v1/algo/sfw/VideoNudityDetection"
            },
            {
              "username": "character_recognition",
              "algoname": "SmartTextExtraction",
              "algolabel": "Smart Text Extraction",
              "language": "Scala",
              "card_line": "Extract text the smart way",
              "doc_url": "https://algorithmia.com/algorithms/character_recognition/SmartTextExtraction",
              "api_url": "https://api.algorithmia.com/v1/algo/character_recognition/SmartTextExtraction"
            },
            {
              "username": "wuhuikai",
              "algoname": "A2RL_online",
              "algolabel": "A2RL: Auto Image Cropping",
              "language": "Python 3.x",
              "card_line": "Auto-crop given image to improve the aesthetic.",
              "doc_url": "https://algorithmia.com/algorithms/wuhuikai/A2RL_online",
              "api_url": "https://api.algorithmia.com/v1/algo/wuhuikai/A2RL_online"
            },
            {
              "username": "conctest",
              "algoname": "DigitRecognition",
              "algolabel": "Digit Recognition",
              "language": "Python 2.x",
              "card_line": "Recognizes handwritten digits using a pre trained  Convolutional Neural Network .",
              "submitted_at": "2015-06-22T15:39:45.000Z",
              "doc_url": "https://algorithmia.com/algorithms/conctest/DigitRecognition",
              "api_url": "https://api.algorithmia.com/v1/algo/conctest/DigitRecognition"
            },
            {
              "username": "PetiteProgrammer",
              "algoname": "ImageClassifier",
              "algolabel": "Image Classifier",
              "language": "Python 3.x",
              "card_line": "Highly Accurate Image Classifier",
              "doc_url": "https://algorithmia.com/algorithms/PetiteProgrammer/ImageClassifier",
              "api_url": "https://api.algorithmia.com/v1/algo/PetiteProgrammer/ImageClassifier"
            },
            {
              "username": "Aluxian",
              "algoname": "AffinityAnalysisFPGrowth",
              "algolabel": "Affinity Analysis for Market Basket Recommendation (FP-Growth)",
              "language": "Java",
              "card_line": "Affinity analysis is an analytical technique that aims to discover relationships between activities and preferences that pertain to specific individuals.",
              "submitted_at": "2015-10-20T21:44:38.000Z",
              "doc_url": "https://algorithmia.com/algorithms/Aluxian/AffinityAnalysisFPGrowth",
              "api_url": "https://api.algorithmia.com/v1/algo/Aluxian/AffinityAnalysisFPGrowth"
            },
            {
              "username": "Wolverine",
              "algoname": "FastAnomalydetection",
              "algolabel": "Fast Anomaly Detection",
              "language": "Python 3.x",
              "card_line": "A fast Anomaly detection algorithm best used for IoT, Fraud detection and IT Ops",
              "doc_url": "https://algorithmia.com/algorithms/Wolverine/FastAnomalydetection",
              "api_url": "https://api.algorithmia.com/v1/algo/Wolverine/FastAnomalydetection"
            },
            {
              "username": "weka",
              "algoname": "RandomForest",
              "algolabel": "RandomForest",
              "language": "Java",
              "card_line": "This is the RandomForest classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/trees/RandomForest.html",
              "submitted_at": "2015-05-01T01:13:46.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/RandomForest",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/RandomForest"
            },
            {
              "username": "tags",
              "algoname": "RecommendGithub",
              "algolabel": "Recommend Github",
              "language": "Java",
              "card_line": "Recommend a github repos based on a given one",
              "submitted_at": "2016-02-02T23:35:11.000Z",
              "doc_url": "https://algorithmia.com/algorithms/tags/RecommendGithub",
              "api_url": "https://api.algorithmia.com/v1/algo/tags/RecommendGithub"
            },
            {
              "username": "PetiteProgrammer",
              "algoname": "NaturalLanguageUnderstanding",
              "algolabel": "Natural Language Understanding",
              "language": "Python 3.x",
              "card_line": "Understand intents, time, etc. from natural language ",
              "doc_url": "https://algorithmia.com/algorithms/PetiteProgrammer/NaturalLanguageUnderstanding",
              "api_url": "https://api.algorithmia.com/v1/algo/PetiteProgrammer/NaturalLanguageUnderstanding"
            },
            {
              "username": "cmartines",
              "algoname": "Chartie",
              "algolabel": "Chartie",
              "language": "Java",
              "card_line": "See beyond the numbers The new free web API that finds the  trend event  from your  numerical arrays For more detail : w...",
              "submitted_at": "2015-03-15T15:24:44.000Z",
              "doc_url": "https://algorithmia.com/algorithms/cmartines/Chartie",
              "api_url": "https://api.algorithmia.com/v1/algo/cmartines/Chartie"
            },
            {
              "username": "ryval",
              "algoname": "LogisticRegression",
              "algolabel": "LogisticRegression",
              "language": "Python 2.x",
              "card_line": "Train a Logistic Regression model and use it to predict unknown classifiers.",
              "submitted_at": "2015-08-20T23:24:10.000Z",
              "doc_url": "https://algorithmia.com/algorithms/ryval/LogisticRegression",
              "api_url": "https://api.algorithmia.com/v1/algo/ryval/LogisticRegression"
            },
            {
              "username": "sklearn",
              "algoname": "GeographicSpectralClustering",
              "algolabel": "Geographic Spectral Clustering",
              "language": "Python 2.x",
              "card_line": "Spectral clustering for geographic (lat/long) data.",
              "submitted_at": "2015-05-01T01:02:21.000Z",
              "doc_url": "https://algorithmia.com/algorithms/sklearn/GeographicSpectralClustering",
              "api_url": "https://api.algorithmia.com/v1/algo/sklearn/GeographicSpectralClustering"
            },
            {
              "username": "mahout",
              "algoname": "Recommendation",
              "algolabel": "Recommendation",
              "language": "Java",
              "card_line": "Overview Eventually we will expand this to allow different parameters and options for neighborhood and similarity functi...",
              "submitted_at": "2015-06-29T21:29:16.000Z",
              "doc_url": "https://algorithmia.com/algorithms/mahout/Recommendation",
              "api_url": "https://api.algorithmia.com/v1/algo/mahout/Recommendation"
            },
            {
              "username": "berlius",
              "algoname": "colorize",
              "algolabel": "colorize",
              "language": "Python 2.x",
              "card_line": "Colorize black and white images with Berkeley model",
              "doc_url": "https://algorithmia.com/algorithms/berlius/colorize",
              "api_url": "https://api.algorithmia.com/v1/algo/berlius/colorize"
            },
            {
              "username": "dbgannon",
              "algoname": "SciDocClassifier",
              "algolabel": "SciDocClassifier",
              "language": "Python 3.x",
              "card_line": "Overview SciDocClassifier uses a ML Model created by Gensim Doc2vec to classify scientific abstracts into five...",
              "doc_url": "https://algorithmia.com/algorithms/dbgannon/SciDocClassifier",
              "api_url": "https://api.algorithmia.com/v1/algo/dbgannon/SciDocClassifier"
            },
            {
              "username": "mheimann",
              "algoname": "TrainFaceRecognizer",
              "algolabel": "Train Face Recognizer",
              "language": "Python 2.x",
              "card_line": "Trains a face recognizer from a labeled set of faces.",
              "submitted_at": "2015-08-08T00:03:29.000Z",
              "doc_url": "https://algorithmia.com/algorithms/mheimann/TrainFaceRecognizer",
              "api_url": "https://api.algorithmia.com/v1/algo/mheimann/TrainFaceRecognizer"
            },
            {
              "username": "mgomezm",
              "algoname": "AccelerometerClassifier",
              "algolabel": "AccelerometerClassifier",
              "language": "Java",
              "card_line": "Given x,y,z accelerometer readings, will determine whther the user is Stationary, Walking, or Running.",
              "submitted_at": "2015-10-19T21:17:41.000Z",
              "doc_url": "https://algorithmia.com/algorithms/mgomezm/AccelerometerClassifier",
              "api_url": "https://api.algorithmia.com/v1/algo/mgomezm/AccelerometerClassifier"
            },
            {
              "username": "wuhuikai",
              "algoname": "A2RL",
              "algolabel": "A2RL: Auto Image Cropping",
              "language": "Python 3.x",
              "card_line": "Auto-crop given image to improve the aesthetic.",
              "doc_url": "https://algorithmia.com/algorithms/wuhuikai/A2RL",
              "api_url": "https://api.algorithmia.com/v1/algo/wuhuikai/A2RL"
            },
            {
              "username": "lucianosantabrigida",
              "algoname": "ptwiki2vec",
              "algolabel": "ptwiki2vec",
              "language": "Python 3.x",
              "card_line": "[WIP] portuguese wikipedia vectors",
              "doc_url": "https://algorithmia.com/algorithms/lucianosantabrigida/ptwiki2vec",
              "api_url": "https://api.algorithmia.com/v1/algo/lucianosantabrigida/ptwiki2vec"
            },
            {
              "username": "pappacena",
              "algoname": "kmeans",
              "algolabel": "k-means",
              "language": "Python 3.x",
              "card_line": "Simple k-means algorithm implementation",
              "doc_url": "https://algorithmia.com/algorithms/pappacena/kmeans",
              "api_url": "https://api.algorithmia.com/v1/algo/pappacena/kmeans"
            },
            {
              "username": "imageclassification",
              "algoname": "ResNetFeatureExtraction",
              "algolabel": "ResNet Feature Extraction",
              "language": "Python 3.x",
              "card_line": " Extract ResNet feature vectors from images. ",
              "doc_url": "https://algorithmia.com/algorithms/imageclassification/ResNetFeatureExtraction",
              "api_url": "https://api.algorithmia.com/v1/algo/imageclassification/ResNetFeatureExtraction"
            },
            {
              "username": "weka",
              "algoname": "NaiveBayes",
              "algolabel": "NaiveBayes",
              "language": "Java",
              "card_line": "This is the NaiveBayes classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/bayes/NaiveBayes.html",
              "submitted_at": "2015-05-01T01:32:40.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/NaiveBayes",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/NaiveBayes"
            },
            {
              "username": "jagiella",
              "algoname": "BirthDeathProcess",
              "algolabel": "BirthDeathProcess",
              "language": "Java",
              "submitted_at": "2015-10-19T21:52:34.000Z",
              "doc_url": "https://algorithmia.com/algorithms/jagiella/BirthDeathProcess",
              "api_url": "https://api.algorithmia.com/v1/algo/jagiella/BirthDeathProcess"
            },
            {
              "username": "thatguy2048",
              "algoname": "SimpleKNN",
              "algolabel": "SimpleKNN",
              "language": "Java",
              "card_line": "This is a simple KNN classifier which accepts a given number of training data points, classes for those points and sample points to evaluate.",
              "submitted_at": "2015-10-19T21:35:10.000Z",
              "doc_url": "https://algorithmia.com/algorithms/thatguy2048/SimpleKNN",
              "api_url": "https://api.algorithmia.com/v1/algo/thatguy2048/SimpleKNN"
            },
            {
              "username": "PetiteProgrammer",
              "algoname": "AutoComplete",
              "algolabel": "AutoComplete (Auto Complete, Next Word Prediction)",
              "language": "Python 3.x",
              "card_line": "Completes sentences based on user input ",
              "doc_url": "https://algorithmia.com/algorithms/PetiteProgrammer/AutoComplete",
              "api_url": "https://api.algorithmia.com/v1/algo/PetiteProgrammer/AutoComplete"
            },
            {
              "username": "imageclassification",
              "algoname": "ImageClassificationTrainer",
              "algolabel": "Image Classification Trainer",
              "language": "Python 3.x",
              "card_line": " Train fine-tuned image classifiers with transfer learning. ",
              "doc_url": "https://algorithmia.com/algorithms/imageclassification/ImageClassificationTrainer",
              "api_url": "https://api.algorithmia.com/v1/algo/imageclassification/ImageClassificationTrainer"
            },
            {
              "username": "buliginleo",
              "algoname": "NudityCheck",
              "algolabel": "NudityCheck",
              "language": "Python 3.x",
              "card_line": "Free neural network for check nudity by link",
              "doc_url": "https://algorithmia.com/algorithms/buliginleo/NudityCheck",
              "api_url": "https://api.algorithmia.com/v1/algo/buliginleo/NudityCheck"
            },
            {
              "username": "ml",
              "algoname": "LearnHMM",
              "algolabel": "LearnHMM",
              "language": "Java",
              "card_line": "Learns a Hidden Markov Model (HMM) based on a series of example state transitions.",
              "submitted_at": "2015-10-19T21:17:18.000Z",
              "doc_url": "https://algorithmia.com/algorithms/ml/LearnHMM",
              "api_url": "https://api.algorithmia.com/v1/algo/ml/LearnHMM"
            },
            {
              "username": "sklearn",
              "algoname": "GeographicOutlierDetection",
              "algolabel": "Geographic Outlier Detection",
              "language": "Python 2.x",
              "card_line": "This algorithm finds the most unexpected events in a set of geographic events relative to some reference set of events.",
              "submitted_at": "2015-05-04T20:16:28.000Z",
              "doc_url": "https://algorithmia.com/algorithms/sklearn/GeographicOutlierDetection",
              "api_url": "https://api.algorithmia.com/v1/algo/sklearn/GeographicOutlierDetection"
            },
            {
              "username": "poze",
              "algoname": "poseEstimation_v2",
              "algolabel": "Pose Estimation",
              "language": "Python 3.x",
              "card_line": " Detect body pose for multiple people on image.",
              "doc_url": "https://algorithmia.com/algorithms/poze/poseEstimation_v2",
              "api_url": "https://api.algorithmia.com/v1/algo/poze/poseEstimation_v2"
            },
            {
              "username": "weka",
              "algoname": "CsvToArff",
              "algolabel": "CsvToArff",
              "language": "Java",
              "card_line": "Converts .csv",
              "submitted_at": "2015-10-04T06:26:04.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/CsvToArff",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/CsvToArff"
            },
            {
              "username": "jtbandes",
              "algoname": "LinearRegression",
              "algolabel": "LinearRegression",
              "language": "Java",
              "card_line": "Performs a least-squares regression with one independent variable.",
              "submitted_at": "2015-10-19T21:19:41.000Z",
              "doc_url": "https://algorithmia.com/algorithms/jtbandes/LinearRegression",
              "api_url": "https://api.algorithmia.com/v1/algo/jtbandes/LinearRegression"
            },
            {
              "username": "ml",
              "algoname": "ClickStreamTransitions",
              "algolabel": "Click Stream Transitions",
              "language": "Java",
              "card_line": "Returns the top 5 most \"interesting\" transitions learned by the Hidden Markov Model.",
              "submitted_at": "2015-10-19T21:17:26.000Z",
              "doc_url": "https://algorithmia.com/algorithms/ml/ClickStreamTransitions",
              "api_url": "https://api.algorithmia.com/v1/algo/ml/ClickStreamTransitions"
            },
            {
              "username": "weka",
              "algoname": "KStar",
              "algolabel": "KStar",
              "language": "Java",
              "card_line": "This is the KStar classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/lazy/KStar.html",
              "submitted_at": "2015-05-01T01:30:46.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/KStar",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/KStar"
            },
            {
              "username": "weka",
              "algoname": "BayesianLogisticRegression",
              "algolabel": "BayesianLogisticRegression",
              "language": "Java",
              "card_line": "This is the BayesianLogisticRegression classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/bayes/BayesianLogisticRegression.html",
              "submitted_at": "2015-05-01T01:33:01.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/BayesianLogisticRegression",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/BayesianLogisticRegression"
            },
            {
              "username": "weka",
              "algoname": "NaiveBayesSimple",
              "algolabel": "NaiveBayesSimple",
              "language": "Java",
              "card_line": "This is the NaiveBayesSimple classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/bayes/NaiveBayesSimple.html",
              "submitted_at": "2015-05-01T01:32:25.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/NaiveBayesSimple",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/NaiveBayesSimple"
            },
            {
              "username": "weka",
              "algoname": "ZeroR",
              "algolabel": "ZeroR",
              "language": "Java",
              "card_line": "This is the ZeroR classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/rules/ZeroR.html",
              "submitted_at": "2015-05-01T01:16:48.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/ZeroR",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/ZeroR"
            },
            {
              "username": "mahout",
              "algoname": "RandomForestTrain",
              "algolabel": "Random Forest Train",
              "language": "Java",
              "card_line": "Trains a Mahout random forest classifier.",
              "submitted_at": "2015-03-11T21:09:01.000Z",
              "doc_url": "https://algorithmia.com/algorithms/mahout/RandomForestTrain",
              "api_url": "https://api.algorithmia.com/v1/algo/mahout/RandomForestTrain"
            },
            {
              "username": "weka",
              "algoname": "LogitBoost",
              "algolabel": "Logit Boost",
              "language": "Java",
              "card_line": "This is the LogitBoost classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/meta/LogitBoost.html",
              "submitted_at": "2015-10-02T19:03:17.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/LogitBoost",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/LogitBoost"
            },
            {
              "username": "opencv",
              "algoname": "SVM",
              "algolabel": "SVM",
              "language": "Java",
              "card_line": "A basic interface to OpenCV's SVM, as explained in http://docs.opencv.org/java/org/opencv/ml/CvSVM.html .",
              "submitted_at": "2015-05-01T01:58:46.000Z",
              "doc_url": "https://algorithmia.com/algorithms/opencv/SVM",
              "api_url": "https://api.algorithmia.com/v1/algo/opencv/SVM"
            },
            {
              "username": "mlolson",
              "algoname": "LinearRegression",
              "algolabel": "LinearRegression",
              "language": "Java",
              "submitted_at": "2015-10-19T21:17:10.000Z",
              "doc_url": "https://algorithmia.com/algorithms/mlolson/LinearRegression",
              "api_url": "https://api.algorithmia.com/v1/algo/mlolson/LinearRegression"
            },
            {
              "username": "weka",
              "algoname": "SimpleKMeansClusterer",
              "algolabel": "SimpleKMeansClusterer",
              "language": "Java",
              "card_line": "Uses SimpleKMeans clusterer, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/clusterers/SimpleKMeans.html",
              "submitted_at": "2015-06-29T21:55:45.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/SimpleKMeansClusterer",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/SimpleKMeansClusterer"
            },
            {
              "username": "paranoia",
              "algoname": "OrdinaryLeastSquares",
              "algolabel": "OrdinaryLeastSquares",
              "language": "Java",
              "submitted_at": "2015-10-19T21:15:20.000Z",
              "doc_url": "https://algorithmia.com/algorithms/paranoia/OrdinaryLeastSquares",
              "api_url": "https://api.algorithmia.com/v1/algo/paranoia/OrdinaryLeastSquares"
            },
            {
              "username": "weka",
              "algoname": "StringToWordVector",
              "algolabel": "StringToWordVector",
              "language": "Java",
              "card_line": "This is the StringToWordVector filter, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/filters/unsupervised/attribute/StringToWordVector.html",
              "submitted_at": "2015-05-01T01:05:42.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/StringToWordVector",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/StringToWordVector"
            },
            {
              "username": "weka",
              "algoname": "JRip",
              "algolabel": "JRip",
              "language": "Java",
              "card_line": "This is the JRip classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/rules/JRip.html",
              "submitted_at": "2015-05-01T01:17:19.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/JRip",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/JRip"
            },
            {
              "username": "o12827402",
              "algoname": "fjcut_v1",
              "algolabel": "fjcut_v1",
              "language": "Python 2.x",
              "card_line": "Overview Provide a short overview of your algorithm.",
              "doc_url": "https://algorithmia.com/algorithms/o12827402/fjcut_v1",
              "api_url": "https://api.algorithmia.com/v1/algo/o12827402/fjcut_v1"
            },
            {
              "username": "weka",
              "algoname": "J48",
              "algolabel": "J48",
              "language": "Java",
              "card_line": "This is the J48 classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/trees/J48.html",
              "submitted_at": "2015-05-01T01:16:31.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/J48",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/J48"
            },
            {
              "username": "weka",
              "algoname": "DecisionTable",
              "algolabel": "DecisionTable",
              "language": "Java",
              "card_line": "This is the DecisionTable classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/rules/DecisionTable.html",
              "submitted_at": "2015-05-01T01:17:23.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/DecisionTable",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/DecisionTable"
            },
            {
              "username": "weka",
              "algoname": "SMOTE",
              "algolabel": "SMOTE",
              "language": "Java",
              "card_line": "This is the SMOTE filter, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/filters/supervised/instance/SMOTE.html",
              "submitted_at": "2015-05-01T01:04:53.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/SMOTE",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/SMOTE"
            },
            {
              "username": "weka",
              "algoname": "NBTree",
              "algolabel": "NBTree",
              "language": "Java",
              "card_line": "This is the NBTree classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/trees/NBTree.html",
              "submitted_at": "2015-05-01T01:13:47.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/NBTree",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/NBTree"
            },
            {
              "username": "opencv",
              "algoname": "RTrees",
              "algolabel": "RTrees",
              "language": "Java",
              "card_line": "A basic interface to OpenCV's RTrees, as explained in http://docs.opencv.org/java/org/opencv/ml/CvRTrees.html.",
              "submitted_at": "2015-05-01T01:58:49.000Z",
              "doc_url": "https://algorithmia.com/algorithms/opencv/RTrees",
              "api_url": "https://api.algorithmia.com/v1/algo/opencv/RTrees"
            },
            {
              "username": "weka",
              "algoname": "PART",
              "algolabel": "PART",
              "language": "Java",
              "card_line": "This is the PART classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/rules/PART.html",
              "submitted_at": "2015-05-01T01:16:57.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/PART",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/PART"
            },
            {
              "username": "weka",
              "algoname": "LibLINEAR",
              "algolabel": "LibLINEAR",
              "language": "Java",
              "card_line": "This is the LibLINEAR classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/functions/LibLINEAR.html",
              "submitted_at": "2015-05-01T01:32:01.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/LibLINEAR",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/LibLINEAR"
            },
            {
              "username": "weka",
              "algoname": "LinearRegression",
              "algolabel": "LinearRegression",
              "language": "Java",
              "card_line": "This is the LinearRegression classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/functions/LinearRegression.html",
              "submitted_at": "2015-05-01T01:31:56.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/LinearRegression",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/LinearRegression"
            },
            {
              "username": "weka",
              "algoname": "Id3",
              "algolabel": "Id3",
              "language": "Java",
              "card_line": "This is the Id3 classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/trees/Id3.html",
              "submitted_at": "2015-05-01T01:16:30.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/Id3",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/Id3"
            },
            {
              "username": "weka",
              "algoname": "MathExpression",
              "algolabel": "MathExpression",
              "language": "Java",
              "card_line": "This is the MathExpression filter, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/filters/unsupervised/attribute/MathExpression.html",
              "submitted_at": "2015-05-01T01:11:02.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/MathExpression",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/MathExpression"
            },
            {
              "username": "weka",
              "algoname": "TimeSeriesDelta",
              "algolabel": "TimeSeriesDelta",
              "language": "Java",
              "card_line": "This is the TimeSeriesDelta filter, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/filters/unsupervised/attribute/TimeSeriesDelta.html",
              "submitted_at": "2015-05-01T01:05:36.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/TimeSeriesDelta",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/TimeSeriesDelta"
            },
            {
              "username": "opencv",
              "algoname": "NormalBayesClassifier",
              "algolabel": "Normal Bayes Classifier",
              "language": "Java",
              "card_line": "A basic interface to OpenCV's DTree, as explained in http://docs.opencv.org/java/org/opencv/ml/CvNormalBayesClassifier.html .",
              "submitted_at": "2015-05-01T01:58:44.000Z",
              "doc_url": "https://algorithmia.com/algorithms/opencv/NormalBayesClassifier",
              "api_url": "https://api.algorithmia.com/v1/algo/opencv/NormalBayesClassifier"
            },
            {
              "username": "weka",
              "algoname": "ClassificationViaClustering",
              "algolabel": "ClassificationViaClustering",
              "language": "Java",
              "card_line": "This is the ClassificationViaClustering classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/meta/ClassificationViaClustering.html",
              "submitted_at": "2015-05-01T01:27:47.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/ClassificationViaClustering",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/ClassificationViaClustering"
            },
            {
              "username": "weka",
              "algoname": "M5P",
              "algolabel": "M5P",
              "language": "Java",
              "card_line": "This is the M5P classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/trees/M5P.html",
              "submitted_at": "2015-05-01T01:13:49.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/M5P",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/M5P"
            },
            {
              "username": "weka",
              "algoname": "REPTree",
              "algolabel": "REPTree",
              "language": "Java",
              "card_line": "This is the REPTree classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/trees/REPTree.html",
              "submitted_at": "2015-05-01T01:13:45.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/REPTree",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/REPTree"
            },
            {
              "username": "weka",
              "algoname": "AODE",
              "algolabel": "AODE",
              "language": "Java",
              "card_line": "This is the AODE classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/bayes/AODE.html",
              "submitted_at": "2015-05-01T01:33:12.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/AODE",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/AODE"
            },
            {
              "username": "weka",
              "algoname": "GaussianProcesses",
              "algolabel": "GaussianProcesses",
              "language": "Java",
              "card_line": "This is the GaussianProcesses classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/functions/GaussianProcesses.html",
              "submitted_at": "2015-05-01T01:32:15.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/GaussianProcesses",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/GaussianProcesses"
            },
            {
              "username": "weka",
              "algoname": "XMeansClusterer",
              "algolabel": "XMeansClusterer",
              "language": "Java",
              "card_line": "Uses XMeans clusterer, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/clusterers/XMeans.html",
              "submitted_at": "2015-06-29T21:54:59.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/XMeansClusterer",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/XMeansClusterer"
            },
            {
              "username": "weka",
              "algoname": "LibSVM",
              "algolabel": "LibSVM",
              "language": "Java",
              "card_line": "This is the LibSVM classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/functions/LibSVM.html",
              "submitted_at": "2015-05-01T01:31:58.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/LibSVM",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/LibSVM"
            },
            {
              "username": "weka",
              "algoname": "WekaHierarchicalClusterer",
              "algolabel": "WekaHierarchicalClusterer",
              "language": "Java",
              "card_line": "Uses Hierarchical clusterer, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/clusterers/HierarchicalClusterer.html",
              "submitted_at": "2015-06-29T21:41:31.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/WekaHierarchicalClusterer",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/WekaHierarchicalClusterer"
            },
            {
              "username": "weka",
              "algoname": "PaceRegression",
              "algolabel": "PaceRegression",
              "language": "Java",
              "card_line": "This is the PaceRegression classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/functions/PaceRegression.html",
              "submitted_at": "2015-05-01T01:31:37.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/PaceRegression",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/PaceRegression"
            },
            {
              "username": "weka",
              "algoname": "NNge",
              "algolabel": "NNge",
              "language": "Java",
              "card_line": "This is the NNge classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/rules/NNge.html",
              "submitted_at": "2015-05-01T01:16:59.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/NNge",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/NNge"
            },
            {
              "username": "weka",
              "algoname": "NaiveBayesUpdateable",
              "algolabel": "NaiveBayesUpdateable",
              "language": "Java",
              "card_line": "This is the NaiveBayesUpdateable classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/bayes/NaiveBayesUpdateable.html",
              "submitted_at": "2015-05-01T01:32:23.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/NaiveBayesUpdateable",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/NaiveBayesUpdateable"
            },
            {
              "username": "weka",
              "algoname": "SimpleLogistic",
              "algolabel": "SimpleLogistic",
              "language": "Java",
              "card_line": "This is the SimpleLogistic classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/functions/SimpleLogistic.html",
              "submitted_at": "2015-05-01T01:31:27.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/SimpleLogistic",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/SimpleLogistic"
            },
            {
              "username": "opencv",
              "algoname": "KNearest",
              "algolabel": "KNearest",
              "language": "Java",
              "card_line": "An interface to OpenCV's K nearest neighbor, as explained in http://docs.opencv.org/java/org/opencv/ml/CvKNearest.html .",
              "submitted_at": "2015-05-01T01:58:42.000Z",
              "doc_url": "https://algorithmia.com/algorithms/opencv/KNearest",
              "api_url": "https://api.algorithmia.com/v1/algo/opencv/KNearest"
            },
            {
              "username": "weka",
              "algoname": "Logistic",
              "algolabel": "Logistic",
              "language": "Java",
              "card_line": "This is the Logistic classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/functions/Logistic.html",
              "submitted_at": "2015-05-01T01:31:51.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/Logistic",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/Logistic"
            }
          ]
        }
      },
      {
        "request": {
          "url": "/meta/algorithms",
          "method": "GET",
          "headers": {
            "host": "algorithmia.com",
            "connection": "keep-alive",
            "pragma": "no-cache",
            "cache-control": "no-cache",
            "accept": "application/json, text/plain, */*",
            "dnt": "1",
            "x-xsrf-token": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "cors",
            "referer": "https://algorithmia.com/tags/machine-learning",
            "accept-encoding": "gzip, deflate, br",
            "accept-language": "en-US,en;q=0.9",
            "cookie": "ajs_group_id=null; ajs_anonymous_id=%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22; _ga=GA1.2.1872580011.1571235636; _fbp=fb.1.1571235636317.604574724; intercom-id-c9fj6354=01941621-342b-4320-ad75-53826b5a002c; hubspotutk=105fad8a9b12bfed67330a0dbfe12c61; _gid=GA1.2.1843278152.1572282100; __zlcmid=uzie5dAUbB300Y; __hstc=69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3; __hssrc=1; fs_intercom=4655074328608768:4513847218700288; XSRF-TOKEN=0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da; referrer=www.google.com; landing_page=https://algorithmia.com/; signup_session=true; ajs_user_id=%22acunniffe%22; fs_uid=rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636; new-algo-language=scala; __hssc=69686351.5.1572357353053; intercom-session-c9fj6354=L08zdks3K1FOZEs0NngyR2NDQjBxN3VMb1J3dE1QZ0t4N2piYXY5ZmlNWFNVMkxseFhidkxhZ0g4QStWV2hYay0tUUtjQUtFaUZvLzJIZ0drSFdnRjM0UT09--fc3e700881b2cd1507c47ce6533f5b502d54fb7c; ALGO_SESSION=a3f6b462d90b3bf25cbca6e5cd34212f79c55457-last-access=2019-10-29T14%3A06%3A33.955Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "cookies": {
            "ajs_group_id": "null",
            "ajs_anonymous_id": "%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22",
            "_ga": "GA1.2.1872580011.1571235636",
            "_fbp": "fb.1.1571235636317.604574724",
            "intercom-id-c9fj6354": "01941621-342b-4320-ad75-53826b5a002c",
            "hubspotutk": "105fad8a9b12bfed67330a0dbfe12c61",
            "_gid": "GA1.2.1843278152.1572282100",
            "__zlcmid": "uzie5dAUbB300Y",
            "__hstc": "69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3",
            "__hssrc": "1",
            "fs_intercom": "4655074328608768:4513847218700288",
            "XSRF-TOKEN": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "referrer": "www.google.com",
            "landing_page": "https://algorithmia.com/",
            "signup_session": "true",
            "ajs_user_id": "%22acunniffe%22",
            "fs_uid": "rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636",
            "new-algo-language": "scala",
            "__hssc": "69686351.5.1572357353053",
            "intercom-session-c9fj6354": "L08zdks3K1FOZEs0NngyR2NDQjBxN3VMb1J3dE1QZ0t4N2piYXY5ZmlNWFNVMkxseFhidkxhZ0g4QStWV2hYay0tUUtjQUtFaUZvLzJIZ0drSFdnRjM0UT09--fc3e700881b2cd1507c47ce6533f5b502d54fb7c",
            "ALGO_SESSION": "a3f6b462d90b3bf25cbca6e5cd34212f79c55457-last-access=2019-10-29T14%3A06%3A33.955Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "queryParameters": {
            "order": "latest",
            "tag": "machine-learning"
          }
        },
        "response": {
          "statusCode": 200,
          "headers": {
            "content-encoding": "gzip",
            "content-type": "application/json; charset=utf-8",
            "date": "Tue, 29 Oct 2019 14:06:35 GMT",
            "set-cookie": "ALGO_SESSION=c0828b4e01724a7c5a812ed89cfd326cb94dc845-last-access=2019-10-29T14%3A06%3A35.453Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3; Max-Age=86400; Expires=Wed, 30 Oct 2019 14:06:35 GMT; Path=/; Domain=algorithmia.com; Secure; HTTPOnly",
            "strict-transport-security": "max-age=86400; includeSubDomains",
            "vary": "Accept-Encoding",
            "x-content-type-options": "nosniff",
            "x-frame-options": "DENY",
            "content-length": "5791",
            "connection": "keep-alive"
          },
          "body": [
            {
              "username": "o12827402",
              "algoname": "fjcut_v1",
              "algolabel": "fjcut_v1",
              "language": "Python 2.x",
              "card_line": "Overview Provide a short overview of your algorithm.",
              "doc_url": "https://algorithmia.com/algorithms/o12827402/fjcut_v1",
              "api_url": "https://api.algorithmia.com/v1/algo/o12827402/fjcut_v1"
            },
            {
              "username": "PetiteProgrammer",
              "algoname": "AutoComplete",
              "algolabel": "AutoComplete (Auto Complete, Next Word Prediction)",
              "language": "Python 3.x",
              "card_line": "Completes sentences based on user input ",
              "doc_url": "https://algorithmia.com/algorithms/PetiteProgrammer/AutoComplete",
              "api_url": "https://api.algorithmia.com/v1/algo/PetiteProgrammer/AutoComplete"
            },
            {
              "username": "classification",
              "algoname": "GenderByName",
              "algolabel": "Gender By Name (First, Last or Full Name) Classifier",
              "language": "Python 3.x",
              "card_line": "Fast gender classifier by name. Classification works with first and last name (order-independent); last name optional.",
              "doc_url": "https://algorithmia.com/algorithms/classification/GenderByName",
              "api_url": "https://api.algorithmia.com/v1/algo/classification/GenderByName"
            },
            {
              "username": "imageclassification",
              "algoname": "ResNetFeatureExtraction",
              "algolabel": "ResNet Feature Extraction",
              "language": "Python 3.x",
              "card_line": " Extract ResNet feature vectors from images. ",
              "doc_url": "https://algorithmia.com/algorithms/imageclassification/ResNetFeatureExtraction",
              "api_url": "https://api.algorithmia.com/v1/algo/imageclassification/ResNetFeatureExtraction"
            },
            {
              "username": "imageclassification",
              "algoname": "ResNetModelRunner",
              "algolabel": "ResNet Model Runner",
              "language": "Python 3.x",
              "card_line": " Deploy pre-trained ResNets for inference. ",
              "doc_url": "https://algorithmia.com/algorithms/imageclassification/ResNetModelRunner",
              "api_url": "https://api.algorithmia.com/v1/algo/imageclassification/ResNetModelRunner"
            },
            {
              "username": "imageclassification",
              "algoname": "ImageClassificationTrainer",
              "algolabel": "Image Classification Trainer",
              "language": "Python 3.x",
              "card_line": " Train fine-tuned image classifiers with transfer learning. ",
              "doc_url": "https://algorithmia.com/algorithms/imageclassification/ImageClassificationTrainer",
              "api_url": "https://api.algorithmia.com/v1/algo/imageclassification/ImageClassificationTrainer"
            },
            {
              "username": "poze",
              "algoname": "poseEstimation_v2",
              "algolabel": "Pose Estimation",
              "language": "Python 3.x",
              "card_line": " Detect body pose for multiple people on image.",
              "doc_url": "https://algorithmia.com/algorithms/poze/poseEstimation_v2",
              "api_url": "https://api.algorithmia.com/v1/algo/poze/poseEstimation_v2"
            },
            {
              "username": "PetiteProgrammer",
              "algoname": "NaturalLanguageUnderstanding",
              "algolabel": "Natural Language Understanding",
              "language": "Python 3.x",
              "card_line": "Understand intents, time, etc. from natural language ",
              "doc_url": "https://algorithmia.com/algorithms/PetiteProgrammer/NaturalLanguageUnderstanding",
              "api_url": "https://api.algorithmia.com/v1/algo/PetiteProgrammer/NaturalLanguageUnderstanding"
            },
            {
              "username": "PetiteProgrammer",
              "algoname": "NamedEntityRecognition",
              "algolabel": "Named Entity Recognition (Detection of Persons, Dates, Locations and much more)",
              "language": "Python 3.x",
              "card_line": "Extracts entities out of text such as persons and organizations, with high precision. ",
              "doc_url": "https://algorithmia.com/algorithms/PetiteProgrammer/NamedEntityRecognition",
              "api_url": "https://api.algorithmia.com/v1/algo/PetiteProgrammer/NamedEntityRecognition"
            },
            {
              "username": "guardlogic",
              "algoname": "AdultImageClassifier",
              "algolabel": "AdultImageClassifier",
              "language": "Python 2.x",
              "card_line": "  Assesses if an image contains \"Adult\" content where the term \"Adult\" is defined as \"sexually explicit\".",
              "doc_url": "https://algorithmia.com/algorithms/guardlogic/AdultImageClassifier",
              "api_url": "https://api.algorithmia.com/v1/algo/guardlogic/AdultImageClassifier"
            },
            {
              "username": "dbgannon",
              "algoname": "SciDocClassifier",
              "algolabel": "SciDocClassifier",
              "language": "Python 3.x",
              "card_line": "Overview SciDocClassifier uses a ML Model created by Gensim Doc2vec to classify scientific abstracts into five...",
              "doc_url": "https://algorithmia.com/algorithms/dbgannon/SciDocClassifier",
              "api_url": "https://api.algorithmia.com/v1/algo/dbgannon/SciDocClassifier"
            },
            {
              "username": "wuhuikai",
              "algoname": "A2RL_online",
              "algolabel": "A2RL: Auto Image Cropping",
              "language": "Python 3.x",
              "card_line": "Auto-crop given image to improve the aesthetic.",
              "doc_url": "https://algorithmia.com/algorithms/wuhuikai/A2RL_online",
              "api_url": "https://api.algorithmia.com/v1/algo/wuhuikai/A2RL_online"
            },
            {
              "username": "pappacena",
              "algoname": "kmeans",
              "algolabel": "k-means",
              "language": "Python 3.x",
              "card_line": "Simple k-means algorithm implementation",
              "doc_url": "https://algorithmia.com/algorithms/pappacena/kmeans",
              "api_url": "https://api.algorithmia.com/v1/algo/pappacena/kmeans"
            },
            {
              "username": "wuhuikai",
              "algoname": "A2RL",
              "algolabel": "A2RL: Auto Image Cropping",
              "language": "Python 3.x",
              "card_line": "Auto-crop given image to improve the aesthetic.",
              "doc_url": "https://algorithmia.com/algorithms/wuhuikai/A2RL",
              "api_url": "https://api.algorithmia.com/v1/algo/wuhuikai/A2RL"
            },
            {
              "username": "virtualman",
              "algoname": "Hello",
              "algolabel": "Hello World",
              "language": "Java",
              "card_line": "A simple \"Hello World\" algorithm, which returns \"Hello \" + the algorithm input.",
              "doc_url": "https://algorithmia.com/algorithms/virtualman/Hello",
              "api_url": "https://api.algorithmia.com/v1/algo/virtualman/Hello"
            },
            {
              "username": "deeplearning",
              "algoname": "ObjectDetectionCOCO",
              "algolabel": "ObjectDetection - COCO",
              "language": "Python 3.x",
              "card_line": "Detecting Objects in complex scenes",
              "doc_url": "https://algorithmia.com/algorithms/deeplearning/ObjectDetectionCOCO",
              "api_url": "https://api.algorithmia.com/v1/algo/deeplearning/ObjectDetectionCOCO"
            },
            {
              "username": "character_recognition",
              "algoname": "SmartTextExtraction",
              "algolabel": "Smart Text Extraction",
              "language": "Scala",
              "card_line": "Extract text the smart way",
              "doc_url": "https://algorithmia.com/algorithms/character_recognition/SmartTextExtraction",
              "api_url": "https://api.algorithmia.com/v1/algo/character_recognition/SmartTextExtraction"
            },
            {
              "username": "character_recognition",
              "algoname": "TextDetectionCTPN",
              "algolabel": "Text Detection (CTPN)",
              "language": "Python 2.x",
              "card_line": "detect text or words in any kind of image including both scanned documents and natural images.",
              "doc_url": "https://algorithmia.com/algorithms/character_recognition/TextDetectionCTPN",
              "api_url": "https://api.algorithmia.com/v1/algo/character_recognition/TextDetectionCTPN"
            },
            {
              "username": "character_recognition",
              "algoname": "NaturalTextNet",
              "algolabel": "Natural Text Net",
              "language": "Python 3.x",
              "card_line": "Extracts text from natural scene images",
              "doc_url": "https://algorithmia.com/algorithms/character_recognition/NaturalTextNet",
              "api_url": "https://api.algorithmia.com/v1/algo/character_recognition/NaturalTextNet"
            },
            {
              "username": "berlius",
              "algoname": "colorize",
              "algolabel": "colorize",
              "language": "Python 2.x",
              "card_line": "Colorize black and white images with Berkeley model",
              "doc_url": "https://algorithmia.com/algorithms/berlius/colorize",
              "api_url": "https://api.algorithmia.com/v1/algo/berlius/colorize"
            },
            {
              "username": "character_recognition",
              "algoname": "tesseract",
              "algolabel": "tesseract",
              "language": "Python 2.x",
              "card_line": "extracts text with deep learning",
              "doc_url": "https://algorithmia.com/algorithms/character_recognition/tesseract",
              "api_url": "https://api.algorithmia.com/v1/algo/character_recognition/tesseract"
            },
            {
              "username": "PetiteProgrammer",
              "algoname": "ImageClassifier",
              "algolabel": "Image Classifier",
              "language": "Python 3.x",
              "card_line": "Highly Accurate Image Classifier",
              "doc_url": "https://algorithmia.com/algorithms/PetiteProgrammer/ImageClassifier",
              "api_url": "https://api.algorithmia.com/v1/algo/PetiteProgrammer/ImageClassifier"
            },
            {
              "username": "PetiteProgrammer",
              "algoname": "DateExtractor",
              "algolabel": "DateExtractor",
              "language": "Python 3.x",
              "card_line": "Extracts dates from raw text",
              "doc_url": "https://algorithmia.com/algorithms/PetiteProgrammer/DateExtractor",
              "api_url": "https://api.algorithmia.com/v1/algo/PetiteProgrammer/DateExtractor"
            },
            {
              "username": "PetiteProgrammer",
              "algoname": "NumberExtractor",
              "algolabel": "NumberExtractor",
              "language": "Python 3.x",
              "card_line": "Extracts numbers (positive, negative and floats) from raw text.",
              "doc_url": "https://algorithmia.com/algorithms/PetiteProgrammer/NumberExtractor",
              "api_url": "https://api.algorithmia.com/v1/algo/PetiteProgrammer/NumberExtractor"
            },
            {
              "username": "Wolverine",
              "algoname": "FastAnomalydetection",
              "algolabel": "Fast Anomaly Detection",
              "language": "Python 3.x",
              "card_line": "A fast Anomaly detection algorithm best used for IoT, Fraud detection and IT Ops",
              "doc_url": "https://algorithmia.com/algorithms/Wolverine/FastAnomalydetection",
              "api_url": "https://api.algorithmia.com/v1/algo/Wolverine/FastAnomalydetection"
            },
            {
              "username": "cv",
              "algoname": "FaceRecognition",
              "algolabel": "Face Recognition",
              "language": "Python 2.x",
              "card_line": "Train and recognize human faces",
              "doc_url": "https://algorithmia.com/algorithms/cv/FaceRecognition",
              "api_url": "https://api.algorithmia.com/v1/algo/cv/FaceRecognition"
            },
            {
              "username": "buliginleo",
              "algoname": "NudityCheck",
              "algolabel": "NudityCheck",
              "language": "Python 3.x",
              "card_line": "Free neural network for check nudity by link",
              "doc_url": "https://algorithmia.com/algorithms/buliginleo/NudityCheck",
              "api_url": "https://api.algorithmia.com/v1/algo/buliginleo/NudityCheck"
            },
            {
              "username": "dlib",
              "algoname": "FaceDetection",
              "algolabel": "Face Detection",
              "language": "Python 2.x",
              "card_line": "This algorithm detects human faces in given images.",
              "doc_url": "https://algorithmia.com/algorithms/dlib/FaceDetection",
              "api_url": "https://api.algorithmia.com/v1/algo/dlib/FaceDetection"
            },
            {
              "username": "media",
              "algoname": "ContentAwareResize",
              "algolabel": "Content Aware Resize",
              "language": "Python 2.x",
              "card_line": "Resize images automatically, without removing important features such as faces",
              "doc_url": "https://algorithmia.com/algorithms/media/ContentAwareResize",
              "api_url": "https://api.algorithmia.com/v1/algo/media/ContentAwareResize"
            },
            {
              "username": "bkyan",
              "algoname": "StyleThief",
              "algolabel": "StyleThief (Open Source)",
              "language": "Python 2.x",
              "card_line": "Anish Athalye's Neural Style Transfer Using TensorFlow",
              "doc_url": "https://algorithmia.com/algorithms/bkyan/StyleThief",
              "api_url": "https://api.algorithmia.com/v1/algo/bkyan/StyleThief"
            },
            {
              "username": "web",
              "algoname": "MaliciousDomainClassifier",
              "algolabel": "Malicious Domain Classifier",
              "language": "Java",
              "card_line": "Determine whether a domain name is safe or malicious",
              "doc_url": "https://algorithmia.com/algorithms/web/MaliciousDomainClassifier",
              "api_url": "https://api.algorithmia.com/v1/algo/web/MaliciousDomainClassifier"
            },
            {
              "username": "sfw",
              "algoname": "VideoNudityDetection",
              "algolabel": "Video Nudity Detection",
              "language": "Python 2.x",
              "card_line": "Detect Nudity in Video",
              "doc_url": "https://algorithmia.com/algorithms/sfw/VideoNudityDetection",
              "api_url": "https://api.algorithmia.com/v1/algo/sfw/VideoNudityDetection"
            },
            {
              "username": "nlp",
              "algoname": "DocumentClassifier",
              "algolabel": "Document Classifier",
              "language": "Scala",
              "card_line": "Classify or Recommend documents with ease",
              "doc_url": "https://algorithmia.com/algorithms/nlp/DocumentClassifier",
              "api_url": "https://api.algorithmia.com/v1/algo/nlp/DocumentClassifier"
            },
            {
              "username": "lucianosantabrigida",
              "algoname": "ptwiki2vec",
              "algolabel": "ptwiki2vec",
              "language": "Python 3.x",
              "card_line": "[WIP] portuguese wikipedia vectors",
              "doc_url": "https://algorithmia.com/algorithms/lucianosantabrigida/ptwiki2vec",
              "api_url": "https://api.algorithmia.com/v1/algo/lucianosantabrigida/ptwiki2vec"
            },
            {
              "username": "nlp",
              "algoname": "Doc2Vec",
              "algolabel": "Doc2Vec",
              "language": "Python 2.x",
              "card_line": "Vectorize documents of arbitrary length",
              "doc_url": "https://algorithmia.com/algorithms/nlp/Doc2Vec",
              "api_url": "https://api.algorithmia.com/v1/algo/nlp/Doc2Vec"
            },
            {
              "username": "PetiteProgrammer",
              "algoname": "TextSimilarity",
              "algolabel": "Text Similarity",
              "language": "Python 3.x",
              "card_line": "Find the most similar text files within a collection of documents",
              "doc_url": "https://algorithmia.com/algorithms/PetiteProgrammer/TextSimilarity",
              "api_url": "https://api.algorithmia.com/v1/algo/PetiteProgrammer/TextSimilarity"
            },
            {
              "username": "PetiteProgrammer",
              "algoname": "pythoncodeprediction",
              "algolabel": "Python Code Prediction",
              "language": "Python 3.x",
              "card_line": "Next word/sequence prediction for Python code",
              "doc_url": "https://algorithmia.com/algorithms/PetiteProgrammer/pythoncodeprediction",
              "api_url": "https://api.algorithmia.com/v1/algo/PetiteProgrammer/pythoncodeprediction"
            },
            {
              "username": "PetiteProgrammer",
              "algoname": "ProgrammingLanguageIdentification",
              "algolabel": "Programming Language Identification",
              "language": "Python 3.x",
              "card_line": "Detect the programming language of source code",
              "doc_url": "https://algorithmia.com/algorithms/PetiteProgrammer/ProgrammingLanguageIdentification",
              "api_url": "https://api.algorithmia.com/v1/algo/PetiteProgrammer/ProgrammingLanguageIdentification"
            },
            {
              "username": "deeplearning",
              "algoname": "Parsey",
              "algolabel": "Parsey McParseface",
              "language": "Scala",
              "card_line": "Parse sentences with ease.",
              "doc_url": "https://algorithmia.com/algorithms/deeplearning/Parsey",
              "api_url": "https://api.algorithmia.com/v1/algo/deeplearning/Parsey"
            },
            {
              "username": "ryval",
              "algoname": "LogisticRegression",
              "algolabel": "LogisticRegression",
              "language": "Python 2.x",
              "card_line": "Train a Logistic Regression model and use it to predict unknown classifiers.",
              "submitted_at": "2015-08-20T23:24:10.000Z",
              "doc_url": "https://algorithmia.com/algorithms/ryval/LogisticRegression",
              "api_url": "https://api.algorithmia.com/v1/algo/ryval/LogisticRegression"
            },
            {
              "username": "mheimann",
              "algoname": "RecognizeFaces",
              "algolabel": "Recognize Faces",
              "language": "Python 2.x",
              "card_line": "Uses a trained face recognizer to identify faces.",
              "submitted_at": "2015-10-06T00:50:11.000Z",
              "doc_url": "https://algorithmia.com/algorithms/mheimann/RecognizeFaces",
              "api_url": "https://api.algorithmia.com/v1/algo/mheimann/RecognizeFaces"
            },
            {
              "username": "mheimann",
              "algoname": "TrainFaceRecognizer",
              "algolabel": "Train Face Recognizer",
              "language": "Python 2.x",
              "card_line": "Trains a face recognizer from a labeled set of faces.",
              "submitted_at": "2015-08-08T00:03:29.000Z",
              "doc_url": "https://algorithmia.com/algorithms/mheimann/TrainFaceRecognizer",
              "api_url": "https://api.algorithmia.com/v1/algo/mheimann/TrainFaceRecognizer"
            },
            {
              "username": "sklearn",
              "algoname": "GeographicOutlierDetection",
              "algolabel": "Geographic Outlier Detection",
              "language": "Python 2.x",
              "card_line": "This algorithm finds the most unexpected events in a set of geographic events relative to some reference set of events.",
              "submitted_at": "2015-05-04T20:16:28.000Z",
              "doc_url": "https://algorithmia.com/algorithms/sklearn/GeographicOutlierDetection",
              "api_url": "https://api.algorithmia.com/v1/algo/sklearn/GeographicOutlierDetection"
            },
            {
              "username": "sklearn",
              "algoname": "GeographicSpectralClustering",
              "algolabel": "Geographic Spectral Clustering",
              "language": "Python 2.x",
              "card_line": "Spectral clustering for geographic (lat/long) data.",
              "submitted_at": "2015-05-01T01:02:21.000Z",
              "doc_url": "https://algorithmia.com/algorithms/sklearn/GeographicSpectralClustering",
              "api_url": "https://api.algorithmia.com/v1/algo/sklearn/GeographicSpectralClustering"
            },
            {
              "username": "conctest",
              "algoname": "DigitRecognition",
              "algolabel": "Digit Recognition",
              "language": "Python 2.x",
              "card_line": "Recognizes handwritten digits using a pre trained  Convolutional Neural Network .",
              "submitted_at": "2015-06-22T15:39:45.000Z",
              "doc_url": "https://algorithmia.com/algorithms/conctest/DigitRecognition",
              "api_url": "https://api.algorithmia.com/v1/algo/conctest/DigitRecognition"
            },
            {
              "username": "cmartines",
              "algoname": "Chartie",
              "algolabel": "Chartie",
              "language": "Java",
              "card_line": "See beyond the numbers The new free web API that finds the  trend event  from your  numerical arrays For more detail : w...",
              "submitted_at": "2015-03-15T15:24:44.000Z",
              "doc_url": "https://algorithmia.com/algorithms/cmartines/Chartie",
              "api_url": "https://api.algorithmia.com/v1/algo/cmartines/Chartie"
            },
            {
              "username": "paranoia",
              "algoname": "FpGrowth",
              "algolabel": "FpGrowth",
              "language": "Java",
              "card_line": "A scalable method for finding frequent patterns within large datasets",
              "submitted_at": "2015-12-07T00:08:45.000Z",
              "doc_url": "https://algorithmia.com/algorithms/paranoia/FpGrowth",
              "api_url": "https://api.algorithmia.com/v1/algo/paranoia/FpGrowth"
            },
            {
              "username": "Aluxian",
              "algoname": "AffinityAnalysisFPGrowth",
              "algolabel": "Affinity Analysis for Market Basket Recommendation (FP-Growth)",
              "language": "Java",
              "card_line": "Affinity analysis is an analytical technique that aims to discover relationships between activities and preferences that pertain to specific individuals.",
              "submitted_at": "2015-10-20T21:44:38.000Z",
              "doc_url": "https://algorithmia.com/algorithms/Aluxian/AffinityAnalysisFPGrowth",
              "api_url": "https://api.algorithmia.com/v1/algo/Aluxian/AffinityAnalysisFPGrowth"
            },
            {
              "username": "thatguy2048",
              "algoname": "SimpleKNN",
              "algolabel": "SimpleKNN",
              "language": "Java",
              "card_line": "This is a simple KNN classifier which accepts a given number of training data points, classes for those points and sample points to evaluate.",
              "submitted_at": "2015-10-19T21:35:10.000Z",
              "doc_url": "https://algorithmia.com/algorithms/thatguy2048/SimpleKNN",
              "api_url": "https://api.algorithmia.com/v1/algo/thatguy2048/SimpleKNN"
            },
            {
              "username": "weka",
              "algoname": "DigitRecognition",
              "algolabel": "Digit Recognition",
              "language": "Java",
              "card_line": "The Digit Recognition algorithm that uses a Random Forest model trained on 50000 samples obtained from the MNIST digits dataset.",
              "submitted_at": "2015-05-01T01:23:58.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/DigitRecognition",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/DigitRecognition"
            },
            {
              "username": "jagiella",
              "algoname": "BirthDeathProcess",
              "algolabel": "BirthDeathProcess",
              "language": "Java",
              "submitted_at": "2015-10-19T21:52:34.000Z",
              "doc_url": "https://algorithmia.com/algorithms/jagiella/BirthDeathProcess",
              "api_url": "https://api.algorithmia.com/v1/algo/jagiella/BirthDeathProcess"
            },
            {
              "username": "opencv",
              "algoname": "SVM",
              "algolabel": "SVM",
              "language": "Java",
              "card_line": "A basic interface to OpenCV's SVM, as explained in http://docs.opencv.org/java/org/opencv/ml/CvSVM.html .",
              "submitted_at": "2015-05-01T01:58:46.000Z",
              "doc_url": "https://algorithmia.com/algorithms/opencv/SVM",
              "api_url": "https://api.algorithmia.com/v1/algo/opencv/SVM"
            },
            {
              "username": "opencv",
              "algoname": "RTrees",
              "algolabel": "RTrees",
              "language": "Java",
              "card_line": "A basic interface to OpenCV's RTrees, as explained in http://docs.opencv.org/java/org/opencv/ml/CvRTrees.html.",
              "submitted_at": "2015-05-01T01:58:49.000Z",
              "doc_url": "https://algorithmia.com/algorithms/opencv/RTrees",
              "api_url": "https://api.algorithmia.com/v1/algo/opencv/RTrees"
            },
            {
              "username": "opencv",
              "algoname": "NormalBayesClassifier",
              "algolabel": "Normal Bayes Classifier",
              "language": "Java",
              "card_line": "A basic interface to OpenCV's DTree, as explained in http://docs.opencv.org/java/org/opencv/ml/CvNormalBayesClassifier.html .",
              "submitted_at": "2015-05-01T01:58:44.000Z",
              "doc_url": "https://algorithmia.com/algorithms/opencv/NormalBayesClassifier",
              "api_url": "https://api.algorithmia.com/v1/algo/opencv/NormalBayesClassifier"
            },
            {
              "username": "opencv",
              "algoname": "KNearest",
              "algolabel": "KNearest",
              "language": "Java",
              "card_line": "An interface to OpenCV's K nearest neighbor, as explained in http://docs.opencv.org/java/org/opencv/ml/CvKNearest.html .",
              "submitted_at": "2015-05-01T01:58:42.000Z",
              "doc_url": "https://algorithmia.com/algorithms/opencv/KNearest",
              "api_url": "https://api.algorithmia.com/v1/algo/opencv/KNearest"
            },
            {
              "username": "opencv",
              "algoname": "GBTrees",
              "algolabel": "GBTrees",
              "language": "Java",
              "card_line": "A basic interface to OpenCV's DTree, as explained in http://docs.opencv.org/java/org/opencv/ml/CvGBTrees.html .",
              "submitted_at": "2015-05-01T01:58:21.000Z",
              "doc_url": "https://algorithmia.com/algorithms/opencv/GBTrees",
              "api_url": "https://api.algorithmia.com/v1/algo/opencv/GBTrees"
            },
            {
              "username": "opencv",
              "algoname": "ERTrees",
              "algolabel": "ERTrees",
              "language": "Java",
              "card_line": "A basic interface to OpenCV's ERTrees, as explained in http://docs.opencv.org/java/org/opencv/ml/CvERTrees.html.",
              "submitted_at": "2015-05-01T01:58:47.000Z",
              "doc_url": "https://algorithmia.com/algorithms/opencv/ERTrees",
              "api_url": "https://api.algorithmia.com/v1/algo/opencv/ERTrees"
            },
            {
              "username": "opencv",
              "algoname": "DTree",
              "algolabel": "DTree",
              "language": "Java",
              "card_line": "A basic interface to OpenCV's DTree, as explained in http://docs.opencv.org/java/org/opencv/ml/CvDTree.html.",
              "submitted_at": "2015-05-01T01:58:46.000Z",
              "doc_url": "https://algorithmia.com/algorithms/opencv/DTree",
              "api_url": "https://api.algorithmia.com/v1/algo/opencv/DTree"
            },
            {
              "username": "opencv",
              "algoname": "Boost",
              "algolabel": "Boost",
              "language": "Java",
              "card_line": "A basic interface to OpenCV's Boost, as explained in http://docs.opencv.org/java/org/opencv/ml/CvBoost.html .",
              "submitted_at": "2015-05-01T01:58:23.000Z",
              "doc_url": "https://algorithmia.com/algorithms/opencv/Boost",
              "api_url": "https://api.algorithmia.com/v1/algo/opencv/Boost"
            },
            {
              "username": "opencv",
              "algoname": "MLP",
              "algolabel": "MLP",
              "language": "Java",
              "card_line": "An interface to OpenCV's ANN_MLP, as explained in http://docs.opencv.org/java/org/opencv/ml/CvANN_MLP.html .",
              "submitted_at": "2015-05-01T01:58:23.000Z",
              "doc_url": "https://algorithmia.com/algorithms/opencv/MLP",
              "api_url": "https://api.algorithmia.com/v1/algo/opencv/MLP"
            },
            {
              "username": "mlolson",
              "algoname": "LinearRegression",
              "algolabel": "LinearRegression",
              "language": "Java",
              "submitted_at": "2015-10-19T21:17:10.000Z",
              "doc_url": "https://algorithmia.com/algorithms/mlolson/LinearRegression",
              "api_url": "https://api.algorithmia.com/v1/algo/mlolson/LinearRegression"
            },
            {
              "username": "ml",
              "algoname": "ClickStreamTransitions",
              "algolabel": "Click Stream Transitions",
              "language": "Java",
              "card_line": "Returns the top 5 most \"interesting\" transitions learned by the Hidden Markov Model.",
              "submitted_at": "2015-10-19T21:17:26.000Z",
              "doc_url": "https://algorithmia.com/algorithms/ml/ClickStreamTransitions",
              "api_url": "https://api.algorithmia.com/v1/algo/ml/ClickStreamTransitions"
            },
            {
              "username": "mahout",
              "algoname": "Recommendation",
              "algolabel": "Recommendation",
              "language": "Java",
              "card_line": "Overview Eventually we will expand this to allow different parameters and options for neighborhood and similarity functi...",
              "submitted_at": "2015-06-29T21:29:16.000Z",
              "doc_url": "https://algorithmia.com/algorithms/mahout/Recommendation",
              "api_url": "https://api.algorithmia.com/v1/algo/mahout/Recommendation"
            },
            {
              "username": "mahout",
              "algoname": "RandomForestTrain",
              "algolabel": "Random Forest Train",
              "language": "Java",
              "card_line": "Trains a Mahout random forest classifier.",
              "submitted_at": "2015-03-11T21:09:01.000Z",
              "doc_url": "https://algorithmia.com/algorithms/mahout/RandomForestTrain",
              "api_url": "https://api.algorithmia.com/v1/algo/mahout/RandomForestTrain"
            },
            {
              "username": "mahout",
              "algoname": "RandomForestApply",
              "algolabel": "Random Forest Apply",
              "language": "Java",
              "card_line": "Apply trained Mahout Random Forest Classifier to data",
              "submitted_at": "2015-03-11T21:13:18.000Z",
              "doc_url": "https://algorithmia.com/algorithms/mahout/RandomForestApply",
              "api_url": "https://api.algorithmia.com/v1/algo/mahout/RandomForestApply"
            },
            {
              "username": "mahout",
              "algoname": "DigitRecognizer",
              "algolabel": "Digit Recognizer",
              "language": "Java",
              "card_line": "Applies a random forest model trained on the MNIST handwritten digit dataset to a 28 by 28 grayscale pixel grid, which is input as a double array of length 784.",
              "submitted_at": "2015-03-11T22:41:52.000Z",
              "doc_url": "https://algorithmia.com/algorithms/mahout/DigitRecognizer",
              "api_url": "https://api.algorithmia.com/v1/algo/mahout/DigitRecognizer"
            },
            {
              "username": "weka",
              "algoname": "CsvToArff",
              "algolabel": "CsvToArff",
              "language": "Java",
              "card_line": "Converts .csv",
              "submitted_at": "2015-10-04T06:26:04.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/CsvToArff",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/CsvToArff"
            },
            {
              "username": "weka",
              "algoname": "CobwebClusterer",
              "algolabel": "CobwebClusterer",
              "language": "Java",
              "card_line": "Uses Cobweb clusterer, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/clusterers/Cobweb.html",
              "submitted_at": "2015-06-29T21:38:19.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/CobwebClusterer",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/CobwebClusterer"
            },
            {
              "username": "weka",
              "algoname": "CLOPEClusterer",
              "algolabel": "CLOPEClusterer",
              "language": "Java",
              "card_line": "Uses CLOPE clusterer, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/clusterers/CLOPE.html",
              "submitted_at": "2015-06-29T21:36:19.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/CLOPEClusterer",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/CLOPEClusterer"
            },
            {
              "username": "weka",
              "algoname": "EMClusterer",
              "algolabel": "EMClusterer",
              "language": "Java",
              "card_line": "Uses EM clusterer, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/clusterers/EM.html",
              "submitted_at": "2015-06-29T21:38:54.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/EMClusterer",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/EMClusterer"
            },
            {
              "username": "weka",
              "algoname": "FarthestFirstClusterer",
              "algolabel": "FarthestFirstClusterer",
              "language": "Java",
              "card_line": "Uses Farthest First clusterer, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/clusterers/FarthestFirst.html",
              "submitted_at": "2015-06-29T21:39:53.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/FarthestFirstClusterer",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/FarthestFirstClusterer"
            },
            {
              "username": "weka",
              "algoname": "WekaFilteredClusterer",
              "algolabel": "WekaFilteredClusterer",
              "language": "Java",
              "card_line": "Uses Filtered clusterer, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/clusterers/FilteredClusterer.html",
              "submitted_at": "2015-06-29T21:40:46.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/WekaFilteredClusterer",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/WekaFilteredClusterer"
            },
            {
              "username": "weka",
              "algoname": "WekaHierarchicalClusterer",
              "algolabel": "WekaHierarchicalClusterer",
              "language": "Java",
              "card_line": "Uses Hierarchical clusterer, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/clusterers/HierarchicalClusterer.html",
              "submitted_at": "2015-06-29T21:41:31.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/WekaHierarchicalClusterer",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/WekaHierarchicalClusterer"
            },
            {
              "username": "weka",
              "algoname": "WekaMakeDensityBasedClusterer",
              "algolabel": "WekaMakeDensityBasedClusterer",
              "language": "Java",
              "card_line": "Uses MakeDensityBasedClusterer, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/clusterers/MakeDensityBasedClusterer.html",
              "submitted_at": "2015-06-29T21:52:03.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/WekaMakeDensityBasedClusterer",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/WekaMakeDensityBasedClusterer"
            },
            {
              "username": "weka",
              "algoname": "sIBClusterer",
              "algolabel": "sIBClusterer",
              "language": "Java",
              "card_line": "Uses sIB clusterer, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/clusterers/sIB.html",
              "submitted_at": "2015-06-29T21:53:29.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/sIBClusterer",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/sIBClusterer"
            },
            {
              "username": "weka",
              "algoname": "XMeansClusterer",
              "algolabel": "XMeansClusterer",
              "language": "Java",
              "card_line": "Uses XMeans clusterer, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/clusterers/XMeans.html",
              "submitted_at": "2015-06-29T21:54:59.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/XMeansClusterer",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/XMeansClusterer"
            },
            {
              "username": "weka",
              "algoname": "SimpleKMeansClusterer",
              "algolabel": "SimpleKMeansClusterer",
              "language": "Java",
              "card_line": "Uses SimpleKMeans clusterer, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/clusterers/SimpleKMeans.html",
              "submitted_at": "2015-06-29T21:55:45.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/SimpleKMeansClusterer",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/SimpleKMeansClusterer"
            },
            {
              "username": "weka",
              "algoname": "SubsetByExpression",
              "algolabel": "SubsetByExpression",
              "language": "Java",
              "card_line": "This is the SubsetByExpression filter, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/filters/unsupervised/instance/SubsetByExpression.html",
              "submitted_at": "2015-05-01T00:56:54.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/SubsetByExpression",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/SubsetByExpression"
            },
            {
              "username": "weka",
              "algoname": "SparseToNonSparse",
              "algolabel": "SparseToNonSparse",
              "language": "Java",
              "card_line": "This is the SparseToNonSparse filter, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/filters/unsupervised/instance/SparseToNonSparse.html",
              "submitted_at": "2015-05-01T00:56:47.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/SparseToNonSparse",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/SparseToNonSparse"
            },
            {
              "username": "weka",
              "algoname": "ReservoirSample",
              "algolabel": "ReservoirSample",
              "language": "Java",
              "card_line": "This is the ReservoirSample filter, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/filters/unsupervised/instance/ReservoirSample.html",
              "submitted_at": "2015-05-01T00:56:40.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/ReservoirSample",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/ReservoirSample"
            },
            {
              "username": "weka",
              "algoname": "RemoveWithValues",
              "algolabel": "RemoveWithValues",
              "language": "Java",
              "card_line": "This is the RemoveWithValues filter, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/filters/unsupervised/instance/RemoveWithValues.html",
              "submitted_at": "2015-05-01T00:56:39.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/RemoveWithValues",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/RemoveWithValues"
            },
            {
              "username": "weka",
              "algoname": "RemoveRange",
              "algolabel": "RemoveRange",
              "language": "Java",
              "card_line": "This is the RemoveRange filter, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/filters/unsupervised/instance/RemoveRange.html",
              "submitted_at": "2015-05-01T00:56:38.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/RemoveRange",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/RemoveRange"
            },
            {
              "username": "weka",
              "algoname": "RemovePercentage",
              "algolabel": "RemovePercentage",
              "language": "Java",
              "card_line": "This is the RemovePercentage filter, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/filters/unsupervised/instance/RemovePercentage.html",
              "submitted_at": "2015-05-01T00:56:35.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/RemovePercentage",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/RemovePercentage"
            },
            {
              "username": "weka",
              "algoname": "RemoveMisclassified",
              "algolabel": "RemoveMisclassified",
              "language": "Java",
              "card_line": "This is the RemoveMisclassified filter, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/filters/unsupervised/instance/RemoveMisclassified.html",
              "submitted_at": "2015-05-01T00:56:34.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/RemoveMisclassified",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/RemoveMisclassified"
            },
            {
              "username": "weka",
              "algoname": "RemoveFrequentValues",
              "algolabel": "RemoveFrequentValues",
              "language": "Java",
              "card_line": "This is the RemoveFrequentValues filter, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/filters/unsupervised/instance/RemoveFrequentValues.html",
              "submitted_at": "2015-05-01T00:56:32.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/RemoveFrequentValues",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/RemoveFrequentValues"
            },
            {
              "username": "weka",
              "algoname": "RemoveFolds",
              "algolabel": "RemoveFolds",
              "language": "Java",
              "card_line": "This is the RemoveFolds filter, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/filters/unsupervised/instance/RemoveFolds.html",
              "submitted_at": "2015-05-01T00:56:29.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/RemoveFolds",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/RemoveFolds"
            },
            {
              "username": "weka",
              "algoname": "Randomize",
              "algolabel": "Randomize",
              "language": "Java",
              "card_line": "This is the Randomize filter, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/filters/unsupervised/instance/Randomize.html",
              "submitted_at": "2015-05-01T01:04:47.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/Randomize",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/Randomize"
            },
            {
              "username": "weka",
              "algoname": "NonSparseToSparse",
              "algolabel": "NonSparseToSparse",
              "language": "Java",
              "card_line": "This is the NonSparseToSparse filter, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/filters/unsupervised/instance/NonSparseToSparse.html",
              "submitted_at": "2015-05-01T01:04:49.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/NonSparseToSparse",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/NonSparseToSparse"
            },
            {
              "username": "weka",
              "algoname": "StratifiedRemoveFolds",
              "algolabel": "StratifiedRemoveFolds",
              "language": "Java",
              "card_line": "This is the StratifiedRemoveFolds filter, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/filters/supervised/instance/StratifiedRemoveFolds.html",
              "submitted_at": "2015-05-01T01:04:51.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/StratifiedRemoveFolds",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/StratifiedRemoveFolds"
            },
            {
              "username": "weka",
              "algoname": "SpreadSubsample",
              "algolabel": "SpreadSubsample",
              "language": "Java",
              "card_line": "This is the SpreadSubsample filter, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/filters/supervised/instance/SpreadSubsample.html",
              "submitted_at": "2015-05-01T01:04:52.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/SpreadSubsample",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/SpreadSubsample"
            },
            {
              "username": "weka",
              "algoname": "SMOTE",
              "algolabel": "SMOTE",
              "language": "Java",
              "card_line": "This is the SMOTE filter, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/filters/supervised/instance/SMOTE.html",
              "submitted_at": "2015-05-01T01:04:53.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/SMOTE",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/SMOTE"
            },
            {
              "username": "weka",
              "algoname": "Resample",
              "algolabel": "Resample",
              "language": "Java",
              "card_line": "This is the Resample filter, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/filters/supervised/instance/Resample.html",
              "submitted_at": "2015-05-01T01:04:54.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/Resample",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/Resample"
            },
            {
              "username": "weka",
              "algoname": "PLSFilter",
              "algolabel": "PLSFilter",
              "language": "Java",
              "card_line": "This is the PLSFilter filter, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/filters/supervised/attribute/PLSFilter.html",
              "submitted_at": "2015-05-01T01:04:55.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/PLSFilter",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/PLSFilter"
            },
            {
              "username": "weka",
              "algoname": "Discretize",
              "algolabel": "Discretize",
              "language": "Java",
              "card_line": "This is the Discretize filter, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/filters/supervised/attribute/Discretize.html",
              "submitted_at": "2015-05-01T01:05:11.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/Discretize",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/Discretize"
            },
            {
              "username": "weka",
              "algoname": "ClassOrder",
              "algolabel": "ClassOrder",
              "language": "Java",
              "card_line": "This is the ClassOrder filter, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/filters/supervised/attribute/ClassOrder.html",
              "submitted_at": "2015-05-01T01:05:16.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/ClassOrder",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/ClassOrder"
            },
            {
              "username": "weka",
              "algoname": "AttributeSelection",
              "algolabel": "AttributeSelection",
              "language": "Java",
              "card_line": "This is the AttributeSelection filter, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/filters/supervised/attribute/AttributeSelection.html",
              "submitted_at": "2015-05-01T01:05:17.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/AttributeSelection",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/AttributeSelection"
            },
            {
              "username": "weka",
              "algoname": "AddClassification",
              "algolabel": "AddClassification",
              "language": "Java",
              "card_line": "This is the AddClassification filter, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/filters/supervised/attribute/AddClassification.html",
              "submitted_at": "2015-05-01T01:05:17.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/AddClassification",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/AddClassification"
            },
            {
              "username": "weka",
              "algoname": "Wavelet",
              "algolabel": "Wavelet",
              "language": "Java",
              "card_line": "This is the Wavelet filter, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/filters/unsupervised/attribute/Wavelet.html",
              "submitted_at": "2015-05-01T01:05:18.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/Wavelet",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/Wavelet"
            },
            {
              "username": "weka",
              "algoname": "TimeSeriesTranslate",
              "algolabel": "TimeSeriesTranslate",
              "language": "Java",
              "card_line": "This is the TimeSeriesTranslate filter, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/filters/unsupervised/attribute/TimeSeriesTranslate.html",
              "submitted_at": "2015-05-01T01:05:20.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/TimeSeriesTranslate",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/TimeSeriesTranslate"
            },
            {
              "username": "weka",
              "algoname": "TimeSeriesDelta",
              "algolabel": "TimeSeriesDelta",
              "language": "Java",
              "card_line": "This is the TimeSeriesDelta filter, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/filters/unsupervised/attribute/TimeSeriesDelta.html",
              "submitted_at": "2015-05-01T01:05:36.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/TimeSeriesDelta",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/TimeSeriesDelta"
            }
          ]
        }
      },
      {
        "request": {
          "url": "/meta/algorithms",
          "method": "GET",
          "headers": {
            "host": "algorithmia.com",
            "connection": "keep-alive",
            "pragma": "no-cache",
            "cache-control": "no-cache",
            "accept": "application/json, text/plain, */*",
            "dnt": "1",
            "x-xsrf-token": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "cors",
            "referer": "https://algorithmia.com/tags/machine-learning",
            "accept-encoding": "gzip, deflate, br",
            "accept-language": "en-US,en;q=0.9",
            "cookie": "ajs_group_id=null; ajs_anonymous_id=%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22; _ga=GA1.2.1872580011.1571235636; _fbp=fb.1.1571235636317.604574724; intercom-id-c9fj6354=01941621-342b-4320-ad75-53826b5a002c; hubspotutk=105fad8a9b12bfed67330a0dbfe12c61; _gid=GA1.2.1843278152.1572282100; __zlcmid=uzie5dAUbB300Y; __hstc=69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3; __hssrc=1; fs_intercom=4655074328608768:4513847218700288; XSRF-TOKEN=0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da; referrer=www.google.com; landing_page=https://algorithmia.com/; signup_session=true; ajs_user_id=%22acunniffe%22; fs_uid=rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636; new-algo-language=scala; __hssc=69686351.5.1572357353053; intercom-session-c9fj6354=L08zdks3K1FOZEs0NngyR2NDQjBxN3VMb1J3dE1QZ0t4N2piYXY5ZmlNWFNVMkxseFhidkxhZ0g4QStWV2hYay0tUUtjQUtFaUZvLzJIZ0drSFdnRjM0UT09--fc3e700881b2cd1507c47ce6533f5b502d54fb7c; ALGO_SESSION=a3f6b462d90b3bf25cbca6e5cd34212f79c55457-last-access=2019-10-29T14%3A06%3A33.955Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "cookies": {
            "ajs_group_id": "null",
            "ajs_anonymous_id": "%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22",
            "_ga": "GA1.2.1872580011.1571235636",
            "_fbp": "fb.1.1571235636317.604574724",
            "intercom-id-c9fj6354": "01941621-342b-4320-ad75-53826b5a002c",
            "hubspotutk": "105fad8a9b12bfed67330a0dbfe12c61",
            "_gid": "GA1.2.1843278152.1572282100",
            "__zlcmid": "uzie5dAUbB300Y",
            "__hstc": "69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3",
            "__hssrc": "1",
            "fs_intercom": "4655074328608768:4513847218700288",
            "XSRF-TOKEN": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "referrer": "www.google.com",
            "landing_page": "https://algorithmia.com/",
            "signup_session": "true",
            "ajs_user_id": "%22acunniffe%22",
            "fs_uid": "rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636",
            "new-algo-language": "scala",
            "__hssc": "69686351.5.1572357353053",
            "intercom-session-c9fj6354": "L08zdks3K1FOZEs0NngyR2NDQjBxN3VMb1J3dE1QZ0t4N2piYXY5ZmlNWFNVMkxseFhidkxhZ0g4QStWV2hYay0tUUtjQUtFaUZvLzJIZ0drSFdnRjM0UT09--fc3e700881b2cd1507c47ce6533f5b502d54fb7c",
            "ALGO_SESSION": "a3f6b462d90b3bf25cbca6e5cd34212f79c55457-last-access=2019-10-29T14%3A06%3A33.955Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "queryParameters": {
            "order": "starred",
            "tag": "machine-learning"
          }
        },
        "response": {
          "statusCode": 200,
          "headers": {
            "content-encoding": "gzip",
            "content-type": "application/json; charset=utf-8",
            "date": "Tue, 29 Oct 2019 14:06:35 GMT",
            "set-cookie": "ALGO_SESSION=d0c5d5be068d9ed318299474d4dd1a60e7bff2d5-last-access=2019-10-29T14%3A06%3A35.464Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3; Max-Age=86400; Expires=Wed, 30 Oct 2019 14:06:35 GMT; Path=/; Domain=algorithmia.com; Secure; HTTPOnly",
            "strict-transport-security": "max-age=86400; includeSubDomains",
            "vary": "Accept-Encoding",
            "x-content-type-options": "nosniff",
            "x-frame-options": "DENY",
            "content-length": "6107",
            "connection": "keep-alive"
          },
          "body": [
            {
              "username": "deeplearning",
              "algoname": "Parsey",
              "algolabel": "Parsey McParseface",
              "language": "Scala",
              "card_line": "Parse sentences with ease.",
              "doc_url": "https://algorithmia.com/algorithms/deeplearning/Parsey",
              "api_url": "https://api.algorithmia.com/v1/algo/deeplearning/Parsey"
            },
            {
              "username": "PetiteProgrammer",
              "algoname": "ProgrammingLanguageIdentification",
              "algolabel": "Programming Language Identification",
              "language": "Python 3.x",
              "card_line": "Detect the programming language of source code",
              "doc_url": "https://algorithmia.com/algorithms/PetiteProgrammer/ProgrammingLanguageIdentification",
              "api_url": "https://api.algorithmia.com/v1/algo/PetiteProgrammer/ProgrammingLanguageIdentification"
            },
            {
              "username": "paranoia",
              "algoname": "FpGrowth",
              "algolabel": "FpGrowth",
              "language": "Java",
              "card_line": "A scalable method for finding frequent patterns within large datasets",
              "submitted_at": "2015-12-07T00:08:45.000Z",
              "doc_url": "https://algorithmia.com/algorithms/paranoia/FpGrowth",
              "api_url": "https://api.algorithmia.com/v1/algo/paranoia/FpGrowth"
            },
            {
              "username": "PetiteProgrammer",
              "algoname": "TextSimilarity",
              "algolabel": "Text Similarity",
              "language": "Python 3.x",
              "card_line": "Find the most similar text files within a collection of documents",
              "doc_url": "https://algorithmia.com/algorithms/PetiteProgrammer/TextSimilarity",
              "api_url": "https://api.algorithmia.com/v1/algo/PetiteProgrammer/TextSimilarity"
            },
            {
              "username": "Aluxian",
              "algoname": "AffinityAnalysisFPGrowth",
              "algolabel": "Affinity Analysis for Market Basket Recommendation (FP-Growth)",
              "language": "Java",
              "card_line": "Affinity analysis is an analytical technique that aims to discover relationships between activities and preferences that pertain to specific individuals.",
              "submitted_at": "2015-10-20T21:44:38.000Z",
              "doc_url": "https://algorithmia.com/algorithms/Aluxian/AffinityAnalysisFPGrowth",
              "api_url": "https://api.algorithmia.com/v1/algo/Aluxian/AffinityAnalysisFPGrowth"
            },
            {
              "username": "character_recognition",
              "algoname": "SmartTextExtraction",
              "algolabel": "Smart Text Extraction",
              "language": "Scala",
              "card_line": "Extract text the smart way",
              "doc_url": "https://algorithmia.com/algorithms/character_recognition/SmartTextExtraction",
              "api_url": "https://api.algorithmia.com/v1/algo/character_recognition/SmartTextExtraction"
            },
            {
              "username": "nlp",
              "algoname": "DocumentClassifier",
              "algolabel": "Document Classifier",
              "language": "Scala",
              "card_line": "Classify or Recommend documents with ease",
              "doc_url": "https://algorithmia.com/algorithms/nlp/DocumentClassifier",
              "api_url": "https://api.algorithmia.com/v1/algo/nlp/DocumentClassifier"
            },
            {
              "username": "bkyan",
              "algoname": "StyleThief",
              "algolabel": "StyleThief (Open Source)",
              "language": "Python 2.x",
              "card_line": "Anish Athalye's Neural Style Transfer Using TensorFlow",
              "doc_url": "https://algorithmia.com/algorithms/bkyan/StyleThief",
              "api_url": "https://api.algorithmia.com/v1/algo/bkyan/StyleThief"
            },
            {
              "username": "sklearn",
              "algoname": "GeographicSpectralClustering",
              "algolabel": "Geographic Spectral Clustering",
              "language": "Python 2.x",
              "card_line": "Spectral clustering for geographic (lat/long) data.",
              "submitted_at": "2015-05-01T01:02:21.000Z",
              "doc_url": "https://algorithmia.com/algorithms/sklearn/GeographicSpectralClustering",
              "api_url": "https://api.algorithmia.com/v1/algo/sklearn/GeographicSpectralClustering"
            },
            {
              "username": "deeplearning",
              "algoname": "ObjectDetectionCOCO",
              "algolabel": "ObjectDetection - COCO",
              "language": "Python 3.x",
              "card_line": "Detecting Objects in complex scenes",
              "doc_url": "https://algorithmia.com/algorithms/deeplearning/ObjectDetectionCOCO",
              "api_url": "https://api.algorithmia.com/v1/algo/deeplearning/ObjectDetectionCOCO"
            },
            {
              "username": "PetiteProgrammer",
              "algoname": "pythoncodeprediction",
              "algolabel": "Python Code Prediction",
              "language": "Python 3.x",
              "card_line": "Next word/sequence prediction for Python code",
              "doc_url": "https://algorithmia.com/algorithms/PetiteProgrammer/pythoncodeprediction",
              "api_url": "https://api.algorithmia.com/v1/algo/PetiteProgrammer/pythoncodeprediction"
            },
            {
              "username": "mheimann",
              "algoname": "RecognizeFaces",
              "algolabel": "Recognize Faces",
              "language": "Python 2.x",
              "card_line": "Uses a trained face recognizer to identify faces.",
              "submitted_at": "2015-10-06T00:50:11.000Z",
              "doc_url": "https://algorithmia.com/algorithms/mheimann/RecognizeFaces",
              "api_url": "https://api.algorithmia.com/v1/algo/mheimann/RecognizeFaces"
            },
            {
              "username": "cv",
              "algoname": "FaceRecognition",
              "algolabel": "Face Recognition",
              "language": "Python 2.x",
              "card_line": "Train and recognize human faces",
              "doc_url": "https://algorithmia.com/algorithms/cv/FaceRecognition",
              "api_url": "https://api.algorithmia.com/v1/algo/cv/FaceRecognition"
            },
            {
              "username": "mahout",
              "algoname": "Recommendation",
              "algolabel": "Recommendation",
              "language": "Java",
              "card_line": "Overview Eventually we will expand this to allow different parameters and options for neighborhood and similarity functi...",
              "submitted_at": "2015-06-29T21:29:16.000Z",
              "doc_url": "https://algorithmia.com/algorithms/mahout/Recommendation",
              "api_url": "https://api.algorithmia.com/v1/algo/mahout/Recommendation"
            },
            {
              "username": "PetiteProgrammer",
              "algoname": "ImageClassifier",
              "algolabel": "Image Classifier",
              "language": "Python 3.x",
              "card_line": "Highly Accurate Image Classifier",
              "doc_url": "https://algorithmia.com/algorithms/PetiteProgrammer/ImageClassifier",
              "api_url": "https://api.algorithmia.com/v1/algo/PetiteProgrammer/ImageClassifier"
            },
            {
              "username": "wuhuikai",
              "algoname": "A2RL_online",
              "algolabel": "A2RL: Auto Image Cropping",
              "language": "Python 3.x",
              "card_line": "Auto-crop given image to improve the aesthetic.",
              "doc_url": "https://algorithmia.com/algorithms/wuhuikai/A2RL_online",
              "api_url": "https://api.algorithmia.com/v1/algo/wuhuikai/A2RL_online"
            },
            {
              "username": "nlp",
              "algoname": "Doc2Vec",
              "algolabel": "Doc2Vec",
              "language": "Python 2.x",
              "card_line": "Vectorize documents of arbitrary length",
              "doc_url": "https://algorithmia.com/algorithms/nlp/Doc2Vec",
              "api_url": "https://api.algorithmia.com/v1/algo/nlp/Doc2Vec"
            },
            {
              "username": "dlib",
              "algoname": "FaceDetection",
              "algolabel": "Face Detection",
              "language": "Python 2.x",
              "card_line": "This algorithm detects human faces in given images.",
              "doc_url": "https://algorithmia.com/algorithms/dlib/FaceDetection",
              "api_url": "https://api.algorithmia.com/v1/algo/dlib/FaceDetection"
            },
            {
              "username": "cmartines",
              "algoname": "Chartie",
              "algolabel": "Chartie",
              "language": "Java",
              "card_line": "See beyond the numbers The new free web API that finds the  trend event  from your  numerical arrays For more detail : w...",
              "submitted_at": "2015-03-15T15:24:44.000Z",
              "doc_url": "https://algorithmia.com/algorithms/cmartines/Chartie",
              "api_url": "https://api.algorithmia.com/v1/algo/cmartines/Chartie"
            },
            {
              "username": "poze",
              "algoname": "poseEstimation_v2",
              "algolabel": "Pose Estimation",
              "language": "Python 3.x",
              "card_line": " Detect body pose for multiple people on image.",
              "doc_url": "https://algorithmia.com/algorithms/poze/poseEstimation_v2",
              "api_url": "https://api.algorithmia.com/v1/algo/poze/poseEstimation_v2"
            },
            {
              "username": "tags",
              "algoname": "RecommendGithub",
              "algolabel": "Recommend Github",
              "language": "Java",
              "card_line": "Recommend a github repos based on a given one",
              "submitted_at": "2016-02-02T23:35:11.000Z",
              "doc_url": "https://algorithmia.com/algorithms/tags/RecommendGithub",
              "api_url": "https://api.algorithmia.com/v1/algo/tags/RecommendGithub"
            },
            {
              "username": "weka",
              "algoname": "RandomForest",
              "algolabel": "RandomForest",
              "language": "Java",
              "card_line": "This is the RandomForest classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/trees/RandomForest.html",
              "submitted_at": "2015-05-01T01:13:46.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/RandomForest",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/RandomForest"
            },
            {
              "username": "PetiteProgrammer",
              "algoname": "DateExtractor",
              "algolabel": "DateExtractor",
              "language": "Python 3.x",
              "card_line": "Extracts dates from raw text",
              "doc_url": "https://algorithmia.com/algorithms/PetiteProgrammer/DateExtractor",
              "api_url": "https://api.algorithmia.com/v1/algo/PetiteProgrammer/DateExtractor"
            },
            {
              "username": "PetiteProgrammer",
              "algoname": "NamedEntityRecognition",
              "algolabel": "Named Entity Recognition (Detection of Persons, Dates, Locations and much more)",
              "language": "Python 3.x",
              "card_line": "Extracts entities out of text such as persons and organizations, with high precision. ",
              "doc_url": "https://algorithmia.com/algorithms/PetiteProgrammer/NamedEntityRecognition",
              "api_url": "https://api.algorithmia.com/v1/algo/PetiteProgrammer/NamedEntityRecognition"
            },
            {
              "username": "character_recognition",
              "algoname": "TextDetectionCTPN",
              "algolabel": "Text Detection (CTPN)",
              "language": "Python 2.x",
              "card_line": "detect text or words in any kind of image including both scanned documents and natural images.",
              "doc_url": "https://algorithmia.com/algorithms/character_recognition/TextDetectionCTPN",
              "api_url": "https://api.algorithmia.com/v1/algo/character_recognition/TextDetectionCTPN"
            },
            {
              "username": "berlius",
              "algoname": "colorize",
              "algolabel": "colorize",
              "language": "Python 2.x",
              "card_line": "Colorize black and white images with Berkeley model",
              "doc_url": "https://algorithmia.com/algorithms/berlius/colorize",
              "api_url": "https://api.algorithmia.com/v1/algo/berlius/colorize"
            },
            {
              "username": "media",
              "algoname": "ContentAwareResize",
              "algolabel": "Content Aware Resize",
              "language": "Python 2.x",
              "card_line": "Resize images automatically, without removing important features such as faces",
              "doc_url": "https://algorithmia.com/algorithms/media/ContentAwareResize",
              "api_url": "https://api.algorithmia.com/v1/algo/media/ContentAwareResize"
            },
            {
              "username": "character_recognition",
              "algoname": "tesseract",
              "algolabel": "tesseract",
              "language": "Python 2.x",
              "card_line": "extracts text with deep learning",
              "doc_url": "https://algorithmia.com/algorithms/character_recognition/tesseract",
              "api_url": "https://api.algorithmia.com/v1/algo/character_recognition/tesseract"
            },
            {
              "username": "weka",
              "algoname": "WekaClassification",
              "algolabel": "Weka Classification",
              "language": "Java",
              "card_line": "This is the main algorithm that all of the Weka classification algorithms call.",
              "submitted_at": "2015-10-02T20:39:49.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/WekaClassification",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/WekaClassification"
            },
            {
              "username": "ryval",
              "algoname": "LogisticRegression",
              "algolabel": "LogisticRegression",
              "language": "Python 2.x",
              "card_line": "Train a Logistic Regression model and use it to predict unknown classifiers.",
              "submitted_at": "2015-08-20T23:24:10.000Z",
              "doc_url": "https://algorithmia.com/algorithms/ryval/LogisticRegression",
              "api_url": "https://api.algorithmia.com/v1/algo/ryval/LogisticRegression"
            },
            {
              "username": "Wolverine",
              "algoname": "FastAnomalydetection",
              "algolabel": "Fast Anomaly Detection",
              "language": "Python 3.x",
              "card_line": "A fast Anomaly detection algorithm best used for IoT, Fraud detection and IT Ops",
              "doc_url": "https://algorithmia.com/algorithms/Wolverine/FastAnomalydetection",
              "api_url": "https://api.algorithmia.com/v1/algo/Wolverine/FastAnomalydetection"
            },
            {
              "username": "character_recognition",
              "algoname": "NaturalTextNet",
              "algolabel": "Natural Text Net",
              "language": "Python 3.x",
              "card_line": "Extracts text from natural scene images",
              "doc_url": "https://algorithmia.com/algorithms/character_recognition/NaturalTextNet",
              "api_url": "https://api.algorithmia.com/v1/algo/character_recognition/NaturalTextNet"
            },
            {
              "username": "mgomezm",
              "algoname": "AccelerometerClassifier",
              "algolabel": "AccelerometerClassifier",
              "language": "Java",
              "card_line": "Given x,y,z accelerometer readings, will determine whther the user is Stationary, Walking, or Running.",
              "submitted_at": "2015-10-19T21:17:41.000Z",
              "doc_url": "https://algorithmia.com/algorithms/mgomezm/AccelerometerClassifier",
              "api_url": "https://api.algorithmia.com/v1/algo/mgomezm/AccelerometerClassifier"
            },
            {
              "username": "wuhuikai",
              "algoname": "A2RL",
              "algolabel": "A2RL: Auto Image Cropping",
              "language": "Python 3.x",
              "card_line": "Auto-crop given image to improve the aesthetic.",
              "doc_url": "https://algorithmia.com/algorithms/wuhuikai/A2RL",
              "api_url": "https://api.algorithmia.com/v1/algo/wuhuikai/A2RL"
            },
            {
              "username": "PetiteProgrammer",
              "algoname": "NaturalLanguageUnderstanding",
              "algolabel": "Natural Language Understanding",
              "language": "Python 3.x",
              "card_line": "Understand intents, time, etc. from natural language ",
              "doc_url": "https://algorithmia.com/algorithms/PetiteProgrammer/NaturalLanguageUnderstanding",
              "api_url": "https://api.algorithmia.com/v1/algo/PetiteProgrammer/NaturalLanguageUnderstanding"
            },
            {
              "username": "ml",
              "algoname": "LearnHMM",
              "algolabel": "LearnHMM",
              "language": "Java",
              "card_line": "Learns a Hidden Markov Model (HMM) based on a series of example state transitions.",
              "submitted_at": "2015-10-19T21:17:18.000Z",
              "doc_url": "https://algorithmia.com/algorithms/ml/LearnHMM",
              "api_url": "https://api.algorithmia.com/v1/algo/ml/LearnHMM"
            },
            {
              "username": "sklearn",
              "algoname": "GeographicOutlierDetection",
              "algolabel": "Geographic Outlier Detection",
              "language": "Python 2.x",
              "card_line": "This algorithm finds the most unexpected events in a set of geographic events relative to some reference set of events.",
              "submitted_at": "2015-05-04T20:16:28.000Z",
              "doc_url": "https://algorithmia.com/algorithms/sklearn/GeographicOutlierDetection",
              "api_url": "https://api.algorithmia.com/v1/algo/sklearn/GeographicOutlierDetection"
            },
            {
              "username": "guardlogic",
              "algoname": "AdultImageClassifier",
              "algolabel": "AdultImageClassifier",
              "language": "Python 2.x",
              "card_line": "  Assesses if an image contains \"Adult\" content where the term \"Adult\" is defined as \"sexually explicit\".",
              "doc_url": "https://algorithmia.com/algorithms/guardlogic/AdultImageClassifier",
              "api_url": "https://api.algorithmia.com/v1/algo/guardlogic/AdultImageClassifier"
            },
            {
              "username": "classification",
              "algoname": "GenderByName",
              "algolabel": "Gender By Name (First, Last or Full Name) Classifier",
              "language": "Python 3.x",
              "card_line": "Fast gender classifier by name. Classification works with first and last name (order-independent); last name optional.",
              "doc_url": "https://algorithmia.com/algorithms/classification/GenderByName",
              "api_url": "https://api.algorithmia.com/v1/algo/classification/GenderByName"
            },
            {
              "username": "imageclassification",
              "algoname": "ResNetFeatureExtraction",
              "algolabel": "ResNet Feature Extraction",
              "language": "Python 3.x",
              "card_line": " Extract ResNet feature vectors from images. ",
              "doc_url": "https://algorithmia.com/algorithms/imageclassification/ResNetFeatureExtraction",
              "api_url": "https://api.algorithmia.com/v1/algo/imageclassification/ResNetFeatureExtraction"
            },
            {
              "username": "sfw",
              "algoname": "VideoNudityDetection",
              "algolabel": "Video Nudity Detection",
              "language": "Python 2.x",
              "card_line": "Detect Nudity in Video",
              "doc_url": "https://algorithmia.com/algorithms/sfw/VideoNudityDetection",
              "api_url": "https://api.algorithmia.com/v1/algo/sfw/VideoNudityDetection"
            },
            {
              "username": "ml",
              "algoname": "ClickStreamTransitions",
              "algolabel": "Click Stream Transitions",
              "language": "Java",
              "card_line": "Returns the top 5 most \"interesting\" transitions learned by the Hidden Markov Model.",
              "submitted_at": "2015-10-19T21:17:26.000Z",
              "doc_url": "https://algorithmia.com/algorithms/ml/ClickStreamTransitions",
              "api_url": "https://api.algorithmia.com/v1/algo/ml/ClickStreamTransitions"
            },
            {
              "username": "mheimann",
              "algoname": "TrainFaceRecognizer",
              "algolabel": "Train Face Recognizer",
              "language": "Python 2.x",
              "card_line": "Trains a face recognizer from a labeled set of faces.",
              "submitted_at": "2015-08-08T00:03:29.000Z",
              "doc_url": "https://algorithmia.com/algorithms/mheimann/TrainFaceRecognizer",
              "api_url": "https://api.algorithmia.com/v1/algo/mheimann/TrainFaceRecognizer"
            },
            {
              "username": "weka",
              "algoname": "WekaHierarchicalClusterer",
              "algolabel": "WekaHierarchicalClusterer",
              "language": "Java",
              "card_line": "Uses Hierarchical clusterer, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/clusterers/HierarchicalClusterer.html",
              "submitted_at": "2015-06-29T21:41:31.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/WekaHierarchicalClusterer",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/WekaHierarchicalClusterer"
            },
            {
              "username": "conctest",
              "algoname": "DigitRecognition",
              "algolabel": "Digit Recognition",
              "language": "Python 2.x",
              "card_line": "Recognizes handwritten digits using a pre trained  Convolutional Neural Network .",
              "submitted_at": "2015-06-22T15:39:45.000Z",
              "doc_url": "https://algorithmia.com/algorithms/conctest/DigitRecognition",
              "api_url": "https://api.algorithmia.com/v1/algo/conctest/DigitRecognition"
            },
            {
              "username": "kenny",
              "algoname": "WekaCluster",
              "algolabel": "Weka Cluster",
              "language": "Java",
              "card_line": "k-means clustering using the Weka machine learning library.",
              "submitted_at": "2015-04-22T01:40:46.000Z",
              "doc_url": "https://algorithmia.com/algorithms/kenny/WekaCluster",
              "api_url": "https://api.algorithmia.com/v1/algo/kenny/WekaCluster"
            },
            {
              "username": "imageclassification",
              "algoname": "ImageClassificationTrainer",
              "algolabel": "Image Classification Trainer",
              "language": "Python 3.x",
              "card_line": " Train fine-tuned image classifiers with transfer learning. ",
              "doc_url": "https://algorithmia.com/algorithms/imageclassification/ImageClassificationTrainer",
              "api_url": "https://api.algorithmia.com/v1/algo/imageclassification/ImageClassificationTrainer"
            },
            {
              "username": "buliginleo",
              "algoname": "NudityCheck",
              "algolabel": "NudityCheck",
              "language": "Python 3.x",
              "card_line": "Free neural network for check nudity by link",
              "doc_url": "https://algorithmia.com/algorithms/buliginleo/NudityCheck",
              "api_url": "https://api.algorithmia.com/v1/algo/buliginleo/NudityCheck"
            },
            {
              "username": "imageclassification",
              "algoname": "ResNetModelRunner",
              "algolabel": "ResNet Model Runner",
              "language": "Python 3.x",
              "card_line": " Deploy pre-trained ResNets for inference. ",
              "doc_url": "https://algorithmia.com/algorithms/imageclassification/ResNetModelRunner",
              "api_url": "https://api.algorithmia.com/v1/algo/imageclassification/ResNetModelRunner"
            },
            {
              "username": "thatguy2048",
              "algoname": "SimpleKNN",
              "algolabel": "SimpleKNN",
              "language": "Java",
              "card_line": "This is a simple KNN classifier which accepts a given number of training data points, classes for those points and sample points to evaluate.",
              "submitted_at": "2015-10-19T21:35:10.000Z",
              "doc_url": "https://algorithmia.com/algorithms/thatguy2048/SimpleKNN",
              "api_url": "https://api.algorithmia.com/v1/algo/thatguy2048/SimpleKNN"
            },
            {
              "username": "jtbandes",
              "algoname": "LinearRegression",
              "algolabel": "LinearRegression",
              "language": "Java",
              "card_line": "Performs a least-squares regression with one independent variable.",
              "submitted_at": "2015-10-19T21:19:41.000Z",
              "doc_url": "https://algorithmia.com/algorithms/jtbandes/LinearRegression",
              "api_url": "https://api.algorithmia.com/v1/algo/jtbandes/LinearRegression"
            },
            {
              "username": "mlolson",
              "algoname": "LinearRegression",
              "algolabel": "LinearRegression",
              "language": "Java",
              "submitted_at": "2015-10-19T21:17:10.000Z",
              "doc_url": "https://algorithmia.com/algorithms/mlolson/LinearRegression",
              "api_url": "https://api.algorithmia.com/v1/algo/mlolson/LinearRegression"
            },
            {
              "username": "weka",
              "algoname": "CsvToArff",
              "algolabel": "CsvToArff",
              "language": "Java",
              "card_line": "Converts .csv",
              "submitted_at": "2015-10-04T06:26:04.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/CsvToArff",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/CsvToArff"
            },
            {
              "username": "opencv",
              "algoname": "RTrees",
              "algolabel": "RTrees",
              "language": "Java",
              "card_line": "A basic interface to OpenCV's RTrees, as explained in http://docs.opencv.org/java/org/opencv/ml/CvRTrees.html.",
              "submitted_at": "2015-05-01T01:58:49.000Z",
              "doc_url": "https://algorithmia.com/algorithms/opencv/RTrees",
              "api_url": "https://api.algorithmia.com/v1/algo/opencv/RTrees"
            },
            {
              "username": "weka",
              "algoname": "BayesianLogisticRegression",
              "algolabel": "BayesianLogisticRegression",
              "language": "Java",
              "card_line": "This is the BayesianLogisticRegression classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/bayes/BayesianLogisticRegression.html",
              "submitted_at": "2015-05-01T01:33:01.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/BayesianLogisticRegression",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/BayesianLogisticRegression"
            },
            {
              "username": "weka",
              "algoname": "BayesNet",
              "algolabel": "BayesNet",
              "language": "Java",
              "card_line": "This is the BayesNet classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/bayes/BayesNet.html",
              "submitted_at": "2015-05-01T01:32:53.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/BayesNet",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/BayesNet"
            },
            {
              "username": "weka",
              "algoname": "NaiveBayes",
              "algolabel": "NaiveBayes",
              "language": "Java",
              "card_line": "This is the NaiveBayes classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/bayes/NaiveBayes.html",
              "submitted_at": "2015-05-01T01:32:40.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/NaiveBayes",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/NaiveBayes"
            },
            {
              "username": "weka",
              "algoname": "NaiveBayesSimple",
              "algolabel": "NaiveBayesSimple",
              "language": "Java",
              "card_line": "This is the NaiveBayesSimple classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/bayes/NaiveBayesSimple.html",
              "submitted_at": "2015-05-01T01:32:25.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/NaiveBayesSimple",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/NaiveBayesSimple"
            },
            {
              "username": "weka",
              "algoname": "MultilayerPerceptron",
              "algolabel": "MultilayerPerceptron",
              "language": "Java",
              "card_line": "This is the MultilayerPerceptron classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/functions/MultilayerPerceptron.html",
              "submitted_at": "2015-05-01T01:31:48.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/MultilayerPerceptron",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/MultilayerPerceptron"
            },
            {
              "username": "weka",
              "algoname": "SimpleLogistic",
              "algolabel": "SimpleLogistic",
              "language": "Java",
              "card_line": "This is the SimpleLogistic classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/functions/SimpleLogistic.html",
              "submitted_at": "2015-05-01T01:31:27.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/SimpleLogistic",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/SimpleLogistic"
            },
            {
              "username": "weka",
              "algoname": "DigitRecognition",
              "algolabel": "Digit Recognition",
              "language": "Java",
              "card_line": "The Digit Recognition algorithm that uses a Random Forest model trained on 50000 samples obtained from the MNIST digits dataset.",
              "submitted_at": "2015-05-01T01:23:58.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/DigitRecognition",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/DigitRecognition"
            },
            {
              "username": "weka",
              "algoname": "JRip",
              "algolabel": "JRip",
              "language": "Java",
              "card_line": "This is the JRip classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/rules/JRip.html",
              "submitted_at": "2015-05-01T01:17:19.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/JRip",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/JRip"
            },
            {
              "username": "weka",
              "algoname": "PART",
              "algolabel": "PART",
              "language": "Java",
              "card_line": "This is the PART classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/rules/PART.html",
              "submitted_at": "2015-05-01T01:16:57.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/PART",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/PART"
            },
            {
              "username": "weka",
              "algoname": "J48graft",
              "algolabel": "J48graft",
              "language": "Java",
              "card_line": "This is the J48graft classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/trees/J48graft.html",
              "submitted_at": "2015-05-01T01:14:08.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/J48graft",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/J48graft"
            },
            {
              "username": "weka",
              "algoname": "MathExpression",
              "algolabel": "MathExpression",
              "language": "Java",
              "card_line": "This is the MathExpression filter, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/filters/unsupervised/attribute/MathExpression.html",
              "submitted_at": "2015-05-01T01:11:02.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/MathExpression",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/MathExpression"
            },
            {
              "username": "weka",
              "algoname": "TimeSeriesDelta",
              "algolabel": "TimeSeriesDelta",
              "language": "Java",
              "card_line": "This is the TimeSeriesDelta filter, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/filters/unsupervised/attribute/TimeSeriesDelta.html",
              "submitted_at": "2015-05-01T01:05:36.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/TimeSeriesDelta",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/TimeSeriesDelta"
            },
            {
              "username": "weka",
              "algoname": "SMOTE",
              "algolabel": "SMOTE",
              "language": "Java",
              "card_line": "This is the SMOTE filter, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/filters/supervised/instance/SMOTE.html",
              "submitted_at": "2015-05-01T01:04:53.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/SMOTE",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/SMOTE"
            },
            {
              "username": "mahout",
              "algoname": "DigitRecognizer",
              "algolabel": "Digit Recognizer",
              "language": "Java",
              "card_line": "Applies a random forest model trained on the MNIST handwritten digit dataset to a 28 by 28 grayscale pixel grid, which is input as a double array of length 784.",
              "submitted_at": "2015-03-11T22:41:52.000Z",
              "doc_url": "https://algorithmia.com/algorithms/mahout/DigitRecognizer",
              "api_url": "https://api.algorithmia.com/v1/algo/mahout/DigitRecognizer"
            },
            {
              "username": "PetiteProgrammer",
              "algoname": "AutoComplete",
              "algolabel": "AutoComplete (Auto Complete, Next Word Prediction)",
              "language": "Python 3.x",
              "card_line": "Completes sentences based on user input ",
              "doc_url": "https://algorithmia.com/algorithms/PetiteProgrammer/AutoComplete",
              "api_url": "https://api.algorithmia.com/v1/algo/PetiteProgrammer/AutoComplete"
            },
            {
              "username": "o12827402",
              "algoname": "fjcut_v1",
              "algolabel": "fjcut_v1",
              "language": "Python 2.x",
              "card_line": "Overview Provide a short overview of your algorithm.",
              "doc_url": "https://algorithmia.com/algorithms/o12827402/fjcut_v1",
              "api_url": "https://api.algorithmia.com/v1/algo/o12827402/fjcut_v1"
            },
            {
              "username": "pappacena",
              "algoname": "kmeans",
              "algolabel": "k-means",
              "language": "Python 3.x",
              "card_line": "Simple k-means algorithm implementation",
              "doc_url": "https://algorithmia.com/algorithms/pappacena/kmeans",
              "api_url": "https://api.algorithmia.com/v1/algo/pappacena/kmeans"
            },
            {
              "username": "web",
              "algoname": "MaliciousDomainClassifier",
              "algolabel": "Malicious Domain Classifier",
              "language": "Java",
              "card_line": "Determine whether a domain name is safe or malicious",
              "doc_url": "https://algorithmia.com/algorithms/web/MaliciousDomainClassifier",
              "api_url": "https://api.algorithmia.com/v1/algo/web/MaliciousDomainClassifier"
            },
            {
              "username": "PetiteProgrammer",
              "algoname": "NumberExtractor",
              "algolabel": "NumberExtractor",
              "language": "Python 3.x",
              "card_line": "Extracts numbers (positive, negative and floats) from raw text.",
              "doc_url": "https://algorithmia.com/algorithms/PetiteProgrammer/NumberExtractor",
              "api_url": "https://api.algorithmia.com/v1/algo/PetiteProgrammer/NumberExtractor"
            },
            {
              "username": "lucianosantabrigida",
              "algoname": "ptwiki2vec",
              "algolabel": "ptwiki2vec",
              "language": "Python 3.x",
              "card_line": "[WIP] portuguese wikipedia vectors",
              "doc_url": "https://algorithmia.com/algorithms/lucianosantabrigida/ptwiki2vec",
              "api_url": "https://api.algorithmia.com/v1/algo/lucianosantabrigida/ptwiki2vec"
            },
            {
              "username": "dbgannon",
              "algoname": "SciDocClassifier",
              "algolabel": "SciDocClassifier",
              "language": "Python 3.x",
              "card_line": "Overview SciDocClassifier uses a ML Model created by Gensim Doc2vec to classify scientific abstracts into five...",
              "doc_url": "https://algorithmia.com/algorithms/dbgannon/SciDocClassifier",
              "api_url": "https://api.algorithmia.com/v1/algo/dbgannon/SciDocClassifier"
            },
            {
              "username": "jagiella",
              "algoname": "BirthDeathProcess",
              "algolabel": "BirthDeathProcess",
              "language": "Java",
              "submitted_at": "2015-10-19T21:52:34.000Z",
              "doc_url": "https://algorithmia.com/algorithms/jagiella/BirthDeathProcess",
              "api_url": "https://api.algorithmia.com/v1/algo/jagiella/BirthDeathProcess"
            },
            {
              "username": "paranoia",
              "algoname": "OrdinaryLeastSquares",
              "algolabel": "OrdinaryLeastSquares",
              "language": "Java",
              "submitted_at": "2015-10-19T21:15:20.000Z",
              "doc_url": "https://algorithmia.com/algorithms/paranoia/OrdinaryLeastSquares",
              "api_url": "https://api.algorithmia.com/v1/algo/paranoia/OrdinaryLeastSquares"
            },
            {
              "username": "weka",
              "algoname": "LogitBoost",
              "algolabel": "Logit Boost",
              "language": "Java",
              "card_line": "This is the LogitBoost classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/meta/LogitBoost.html",
              "submitted_at": "2015-10-02T19:03:17.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/LogitBoost",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/LogitBoost"
            },
            {
              "username": "weka",
              "algoname": "SimpleKMeansClusterer",
              "algolabel": "SimpleKMeansClusterer",
              "language": "Java",
              "card_line": "Uses SimpleKMeans clusterer, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/clusterers/SimpleKMeans.html",
              "submitted_at": "2015-06-29T21:55:45.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/SimpleKMeansClusterer",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/SimpleKMeansClusterer"
            },
            {
              "username": "weka",
              "algoname": "XMeansClusterer",
              "algolabel": "XMeansClusterer",
              "language": "Java",
              "card_line": "Uses XMeans clusterer, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/clusterers/XMeans.html",
              "submitted_at": "2015-06-29T21:54:59.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/XMeansClusterer",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/XMeansClusterer"
            },
            {
              "username": "weka",
              "algoname": "sIBClusterer",
              "algolabel": "sIBClusterer",
              "language": "Java",
              "card_line": "Uses sIB clusterer, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/clusterers/sIB.html",
              "submitted_at": "2015-06-29T21:53:29.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/sIBClusterer",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/sIBClusterer"
            },
            {
              "username": "weka",
              "algoname": "WekaMakeDensityBasedClusterer",
              "algolabel": "WekaMakeDensityBasedClusterer",
              "language": "Java",
              "card_line": "Uses MakeDensityBasedClusterer, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/clusterers/MakeDensityBasedClusterer.html",
              "submitted_at": "2015-06-29T21:52:03.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/WekaMakeDensityBasedClusterer",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/WekaMakeDensityBasedClusterer"
            },
            {
              "username": "weka",
              "algoname": "WekaFilteredClusterer",
              "algolabel": "WekaFilteredClusterer",
              "language": "Java",
              "card_line": "Uses Filtered clusterer, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/clusterers/FilteredClusterer.html",
              "submitted_at": "2015-06-29T21:40:46.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/WekaFilteredClusterer",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/WekaFilteredClusterer"
            },
            {
              "username": "weka",
              "algoname": "FarthestFirstClusterer",
              "algolabel": "FarthestFirstClusterer",
              "language": "Java",
              "card_line": "Uses Farthest First clusterer, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/clusterers/FarthestFirst.html",
              "submitted_at": "2015-06-29T21:39:53.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/FarthestFirstClusterer",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/FarthestFirstClusterer"
            },
            {
              "username": "weka",
              "algoname": "EMClusterer",
              "algolabel": "EMClusterer",
              "language": "Java",
              "card_line": "Uses EM clusterer, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/clusterers/EM.html",
              "submitted_at": "2015-06-29T21:38:54.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/EMClusterer",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/EMClusterer"
            },
            {
              "username": "weka",
              "algoname": "CobwebClusterer",
              "algolabel": "CobwebClusterer",
              "language": "Java",
              "card_line": "Uses Cobweb clusterer, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/clusterers/Cobweb.html",
              "submitted_at": "2015-06-29T21:38:19.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/CobwebClusterer",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/CobwebClusterer"
            },
            {
              "username": "weka",
              "algoname": "CLOPEClusterer",
              "algolabel": "CLOPEClusterer",
              "language": "Java",
              "card_line": "Uses CLOPE clusterer, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/clusterers/CLOPE.html",
              "submitted_at": "2015-06-29T21:36:19.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/CLOPEClusterer",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/CLOPEClusterer"
            },
            {
              "username": "opencv",
              "algoname": "ERTrees",
              "algolabel": "ERTrees",
              "language": "Java",
              "card_line": "A basic interface to OpenCV's ERTrees, as explained in http://docs.opencv.org/java/org/opencv/ml/CvERTrees.html.",
              "submitted_at": "2015-05-01T01:58:47.000Z",
              "doc_url": "https://algorithmia.com/algorithms/opencv/ERTrees",
              "api_url": "https://api.algorithmia.com/v1/algo/opencv/ERTrees"
            },
            {
              "username": "opencv",
              "algoname": "DTree",
              "algolabel": "DTree",
              "language": "Java",
              "card_line": "A basic interface to OpenCV's DTree, as explained in http://docs.opencv.org/java/org/opencv/ml/CvDTree.html.",
              "submitted_at": "2015-05-01T01:58:46.000Z",
              "doc_url": "https://algorithmia.com/algorithms/opencv/DTree",
              "api_url": "https://api.algorithmia.com/v1/algo/opencv/DTree"
            },
            {
              "username": "opencv",
              "algoname": "SVM",
              "algolabel": "SVM",
              "language": "Java",
              "card_line": "A basic interface to OpenCV's SVM, as explained in http://docs.opencv.org/java/org/opencv/ml/CvSVM.html .",
              "submitted_at": "2015-05-01T01:58:46.000Z",
              "doc_url": "https://algorithmia.com/algorithms/opencv/SVM",
              "api_url": "https://api.algorithmia.com/v1/algo/opencv/SVM"
            },
            {
              "username": "opencv",
              "algoname": "NormalBayesClassifier",
              "algolabel": "Normal Bayes Classifier",
              "language": "Java",
              "card_line": "A basic interface to OpenCV's DTree, as explained in http://docs.opencv.org/java/org/opencv/ml/CvNormalBayesClassifier.html .",
              "submitted_at": "2015-05-01T01:58:44.000Z",
              "doc_url": "https://algorithmia.com/algorithms/opencv/NormalBayesClassifier",
              "api_url": "https://api.algorithmia.com/v1/algo/opencv/NormalBayesClassifier"
            },
            {
              "username": "opencv",
              "algoname": "KNearest",
              "algolabel": "KNearest",
              "language": "Java",
              "card_line": "An interface to OpenCV's K nearest neighbor, as explained in http://docs.opencv.org/java/org/opencv/ml/CvKNearest.html .",
              "submitted_at": "2015-05-01T01:58:42.000Z",
              "doc_url": "https://algorithmia.com/algorithms/opencv/KNearest",
              "api_url": "https://api.algorithmia.com/v1/algo/opencv/KNearest"
            },
            {
              "username": "opencv",
              "algoname": "Boost",
              "algolabel": "Boost",
              "language": "Java",
              "card_line": "A basic interface to OpenCV's Boost, as explained in http://docs.opencv.org/java/org/opencv/ml/CvBoost.html .",
              "submitted_at": "2015-05-01T01:58:23.000Z",
              "doc_url": "https://algorithmia.com/algorithms/opencv/Boost",
              "api_url": "https://api.algorithmia.com/v1/algo/opencv/Boost"
            },
            {
              "username": "opencv",
              "algoname": "MLP",
              "algolabel": "MLP",
              "language": "Java",
              "card_line": "An interface to OpenCV's ANN_MLP, as explained in http://docs.opencv.org/java/org/opencv/ml/CvANN_MLP.html .",
              "submitted_at": "2015-05-01T01:58:23.000Z",
              "doc_url": "https://algorithmia.com/algorithms/opencv/MLP",
              "api_url": "https://api.algorithmia.com/v1/algo/opencv/MLP"
            },
            {
              "username": "opencv",
              "algoname": "GBTrees",
              "algolabel": "GBTrees",
              "language": "Java",
              "card_line": "A basic interface to OpenCV's DTree, as explained in http://docs.opencv.org/java/org/opencv/ml/CvGBTrees.html .",
              "submitted_at": "2015-05-01T01:58:21.000Z",
              "doc_url": "https://algorithmia.com/algorithms/opencv/GBTrees",
              "api_url": "https://api.algorithmia.com/v1/algo/opencv/GBTrees"
            },
            {
              "username": "weka",
              "algoname": "AODE",
              "algolabel": "AODE",
              "language": "Java",
              "card_line": "This is the AODE classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/bayes/AODE.html",
              "submitted_at": "2015-05-01T01:33:12.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/AODE",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/AODE"
            },
            {
              "username": "weka",
              "algoname": "AODEsr",
              "algolabel": "AODEsr",
              "language": "Java",
              "card_line": "This is the AODEsr classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/bayes/AODEsr.html",
              "submitted_at": "2015-05-01T01:33:05.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/AODEsr",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/AODEsr"
            },
            {
              "username": "weka",
              "algoname": "ComplementNaiveBayes",
              "algolabel": "ComplementNaiveBayes",
              "language": "Java",
              "card_line": "This is the ComplementNaiveBayes classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/bayes/ComplementNaiveBayes.html",
              "submitted_at": "2015-05-01T01:32:51.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/ComplementNaiveBayes",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/ComplementNaiveBayes"
            },
            {
              "username": "weka",
              "algoname": "DMNBtext",
              "algolabel": "DMNBtext",
              "language": "Java",
              "card_line": "This is the DMNBtext classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/bayes/DMNBtext.html",
              "submitted_at": "2015-05-01T01:32:49.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/DMNBtext",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/DMNBtext"
            },
            {
              "username": "weka",
              "algoname": "HNB",
              "algolabel": "HNB",
              "language": "Java",
              "card_line": "This is the HNB classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/bayes/HNB.html",
              "submitted_at": "2015-05-01T01:32:47.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/HNB",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/HNB"
            }
          ]
        }
      },
      {
        "request": {
          "url": "/webapi/algorithms/PetiteProgrammer/ProgrammingLanguageIdentification",
          "method": "GET",
          "headers": {
            "host": "algorithmia.com",
            "connection": "keep-alive",
            "pragma": "no-cache",
            "cache-control": "no-cache",
            "accept": "application/json, text/plain, */*",
            "dnt": "1",
            "x-xsrf-token": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "cors",
            "referer": "https://algorithmia.com/algorithms/PetiteProgrammer/ProgrammingLanguageIdentification",
            "accept-encoding": "gzip, deflate, br",
            "accept-language": "en-US,en;q=0.9",
            "cookie": "ajs_group_id=null; ajs_anonymous_id=%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22; _ga=GA1.2.1872580011.1571235636; _fbp=fb.1.1571235636317.604574724; intercom-id-c9fj6354=01941621-342b-4320-ad75-53826b5a002c; hubspotutk=105fad8a9b12bfed67330a0dbfe12c61; _gid=GA1.2.1843278152.1572282100; __zlcmid=uzie5dAUbB300Y; __hstc=69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3; __hssrc=1; fs_intercom=4655074328608768:4513847218700288; XSRF-TOKEN=0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da; referrer=www.google.com; landing_page=https://algorithmia.com/; signup_session=true; ajs_user_id=%22acunniffe%22; fs_uid=rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636; new-algo-language=scala; __hssc=69686351.5.1572357353053; intercom-session-c9fj6354=L08zdks3K1FOZEs0NngyR2NDQjBxN3VMb1J3dE1QZ0t4N2piYXY5ZmlNWFNVMkxseFhidkxhZ0g4QStWV2hYay0tUUtjQUtFaUZvLzJIZ0drSFdnRjM0UT09--fc3e700881b2cd1507c47ce6533f5b502d54fb7c; ALGO_SESSION=d0c5d5be068d9ed318299474d4dd1a60e7bff2d5-last-access=2019-10-29T14%3A06%3A35.464Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "cookies": {
            "ajs_group_id": "null",
            "ajs_anonymous_id": "%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22",
            "_ga": "GA1.2.1872580011.1571235636",
            "_fbp": "fb.1.1571235636317.604574724",
            "intercom-id-c9fj6354": "01941621-342b-4320-ad75-53826b5a002c",
            "hubspotutk": "105fad8a9b12bfed67330a0dbfe12c61",
            "_gid": "GA1.2.1843278152.1572282100",
            "__zlcmid": "uzie5dAUbB300Y",
            "__hstc": "69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3",
            "__hssrc": "1",
            "fs_intercom": "4655074328608768:4513847218700288",
            "XSRF-TOKEN": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "referrer": "www.google.com",
            "landing_page": "https://algorithmia.com/",
            "signup_session": "true",
            "ajs_user_id": "%22acunniffe%22",
            "fs_uid": "rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636",
            "new-algo-language": "scala",
            "__hssc": "69686351.5.1572357353053",
            "intercom-session-c9fj6354": "L08zdks3K1FOZEs0NngyR2NDQjBxN3VMb1J3dE1QZ0t4N2piYXY5ZmlNWFNVMkxseFhidkxhZ0g4QStWV2hYay0tUUtjQUtFaUZvLzJIZ0drSFdnRjM0UT09--fc3e700881b2cd1507c47ce6533f5b502d54fb7c",
            "ALGO_SESSION": "d0c5d5be068d9ed318299474d4dd1a60e7bff2d5-last-access=2019-10-29T14%3A06%3A35.464Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "queryParameters": {}
        },
        "response": {
          "statusCode": 200,
          "headers": {
            "content-encoding": "gzip",
            "content-type": "application/json; charset=utf-8",
            "date": "Tue, 29 Oct 2019 14:06:36 GMT",
            "set-cookie": "ALGO_SESSION=7052ba40b5fe0b5209609698aea03bafda4ef4b9-last-access=2019-10-29T14%3A06%3A36.546Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3; Max-Age=86400; Expires=Wed, 30 Oct 2019 14:06:36 GMT; Path=/; Domain=algorithmia.com; Secure; HTTPOnly",
            "strict-transport-security": "max-age=86400; includeSubDomains",
            "vary": "Accept-Encoding",
            "x-content-type-options": "nosniff",
            "x-frame-options": "DENY",
            "content-length": "1515",
            "connection": "keep-alive"
          },
          "body": {
            "algorithm": {
              "algo_id": 37412,
              "object_id": "algo-e32d5ea4-1149-4a8e-85ed-86900bc37482",
              "username": "PetiteProgrammer",
              "algoname": "ProgrammingLanguageIdentification",
              "algolabel": "Programming Language Identification",
              "language": "python3-1",
              "tag_line": "Detect the programming language of source code",
              "card_line": "Detect the programming language of source code",
              "summary": "<p>This algorithm detects the programming language of source code with high accuracy (about 99.4% top-1 accuracy for a Github dataset).</p>\n<p>It currently supports these languages:</p>\n<p><span>C, </span><span>C#, C++, CSS, Haskell, HTML, Java, JavaScript, Lua, Objective-C, Perl, PHP, Python, R, Scala, SQL, Swift, VB.</span></p>\n<p>Also see <a href=\"https://medium.com/machine-learning-at-petiteprogrammer/detecting-the-programming-language-of-source-code-snippets-using-machine-learning-and-neural-e275ca4ce93e\">my article</a> on the machine learning techniques used.</p>\n<h3>Input</h3>\n<p>The text of a document with source code.</p>\n<h3><strong>Output</strong></h3>\n<p>List of pairs: [language name, probability]</p>\n<p>For example:</p>\n<pre>[  [\"javascript\", 0.9935536807317678],  [\"vb\", 0.001937278879510437],  [\"c\", 0.0017313291225903907] ...]</pre>\n",
              "discoverable_world": true,
              "source_world": false,
              "license": "apl",
              "tags": [
                "classifier",
                "language identification",
                "machine learning",
                "nlp",
                "text analysis",
                "utilities"
              ],
              "stats": {
                "duration_avg": 1.0086366440468846,
                "total_calls": 227001,
                "follower_count": 25,
                "vote_count": 42
              },
              "latest_version": {
                "version": "0.1.3",
                "version_hash": "fc1ca3bb92ccd0ced2d8ddd45e1a39a664124d71",
                "callable_world": true,
                "has_internet": true,
                "can_recurse": false,
                "cost": 20,
                "runner_image_name": "algorithmia/langserver-single",
                "runner_image_tag": "latest",
                "worker_type": "CPU",
                "requires_gpu": false
              },
              "sample": {
                "sample_input": "\"/* Simple JavaScript example */\\n\\n// add two numbers\\nfunction add(n, m) {\\n  return n + m;\\n}\"",
                "sample_output": "[[\"javascript\",0.9898891716577287],[\"markdown\",0.003837364611352916],[\"java\",0.0018736157456299308],[\"php\",0.0017531876463711639],[\"c\",0.0009585207454160043],[\"lua\",0.0007419186073970404],[\"html\",0.0003518026874305513],[\"objective-c\",0.0002779842516112652],[\"sql\",0.00017283418084344316],[\"css\",0.000038611774005519745],[\"c++\",0.0000343903914437696],[\"swift\",0.00003122888156291078],[\"bash\",0.000013677125153852474],[\"ruby\",0.00001224731478181401],[\"perl\",0.000005581660035943508],[\"c#\",0.0000038442524620865925],[\"scala\",0.000003723956933340254],[\"python\",1.572113560595084E-7],[\"r\",6.431838326426007E-8],[\"haskell\",4.036764786336715E-8],[\"vb\",3.261245241114874E-8]]"
              },
              "current_user": {
                "is_member": false,
                "is_owner": false,
                "is_follower": false,
                "is_voter": false
              },
              "latestCommit": "2fc6f9af74ec1f7ca7a98dd79506d0ce6a6d29b6"
            }
          }
        }
      },
      {
        "request": {
          "url": "/v1/algo/PetiteProgrammer/ProgrammingLanguageIdentification/0.1.3",
          "method": "POST",
          "headers": {
            "host": "algorithmia.com",
            "connection": "keep-alive",
            "content-length": "97",
            "pragma": "no-cache",
            "cache-control": "no-cache",
            "accept": "application/json, text/javascript",
            "origin": "https://algorithmia.com",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36",
            "dnt": "1",
            "content-type": "application/json",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "cors",
            "referer": "https://algorithmia.com/algorithms/PetiteProgrammer/ProgrammingLanguageIdentification",
            "accept-encoding": "gzip, deflate, br",
            "accept-language": "en-US,en;q=0.9",
            "cookie": "ajs_group_id=null; ajs_anonymous_id=%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22; _ga=GA1.2.1872580011.1571235636; _fbp=fb.1.1571235636317.604574724; intercom-id-c9fj6354=01941621-342b-4320-ad75-53826b5a002c; hubspotutk=105fad8a9b12bfed67330a0dbfe12c61; _gid=GA1.2.1843278152.1572282100; __zlcmid=uzie5dAUbB300Y; __hstc=69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3; __hssrc=1; fs_intercom=4655074328608768:4513847218700288; XSRF-TOKEN=0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da; referrer=www.google.com; landing_page=https://algorithmia.com/; signup_session=true; ajs_user_id=%22acunniffe%22; fs_uid=rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636; new-algo-language=scala; __hssc=69686351.5.1572357353053; intercom-session-c9fj6354=L08zdks3K1FOZEs0NngyR2NDQjBxN3VMb1J3dE1QZ0t4N2piYXY5ZmlNWFNVMkxseFhidkxhZ0g4QStWV2hYay0tUUtjQUtFaUZvLzJIZ0drSFdnRjM0UT09--fc3e700881b2cd1507c47ce6533f5b502d54fb7c; ALGO_SESSION=7052ba40b5fe0b5209609698aea03bafda4ef4b9-last-access=2019-10-29T14%3A06%3A36.546Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "cookies": {
            "ajs_group_id": "null",
            "ajs_anonymous_id": "%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22",
            "_ga": "GA1.2.1872580011.1571235636",
            "_fbp": "fb.1.1571235636317.604574724",
            "intercom-id-c9fj6354": "01941621-342b-4320-ad75-53826b5a002c",
            "hubspotutk": "105fad8a9b12bfed67330a0dbfe12c61",
            "_gid": "GA1.2.1843278152.1572282100",
            "__zlcmid": "uzie5dAUbB300Y",
            "__hstc": "69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3",
            "__hssrc": "1",
            "fs_intercom": "4655074328608768:4513847218700288",
            "XSRF-TOKEN": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "referrer": "www.google.com",
            "landing_page": "https://algorithmia.com/",
            "signup_session": "true",
            "ajs_user_id": "%22acunniffe%22",
            "fs_uid": "rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636",
            "new-algo-language": "scala",
            "__hssc": "69686351.5.1572357353053",
            "intercom-session-c9fj6354": "L08zdks3K1FOZEs0NngyR2NDQjBxN3VMb1J3dE1QZ0t4N2piYXY5ZmlNWFNVMkxseFhidkxhZ0g4QStWV2hYay0tUUtjQUtFaUZvLzJIZ0drSFdnRjM0UT09--fc3e700881b2cd1507c47ce6533f5b502d54fb7c",
            "ALGO_SESSION": "7052ba40b5fe0b5209609698aea03bafda4ef4b9-last-access=2019-10-29T14%3A06%3A36.546Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "queryParameters": {},
          "body": "/* Simple JavaScript example */\n\n// add two numbers\nfunction add(n, m) {\n  return n + m;\n}"
        },
        "response": {
          "statusCode": 200,
          "headers": {
            "content-encoding": "gzip",
            "content-type": "application/json; charset=utf-8",
            "date": "Tue, 29 Oct 2019 14:06:49 GMT",
            "strict-transport-security": "max-age=86400; includeSubDomains",
            "vary": "Accept-Encoding",
            "x-content-type-options": "nosniff",
            "x-frame-options": "DENY",
            "content-length": "440",
            "connection": "keep-alive"
          },
          "body": {
            "result": [
              [
                "javascript",
                0.9898891716577288
              ],
              [
                "markdown",
                0.003837364611352919
              ],
              [
                "java",
                0.0018736157456299355
              ],
              [
                "php",
                0.001753187646371167
              ],
              [
                "c",
                0.0009585207454160036
              ],
              [
                "lua",
                0.0007419186073970403
              ],
              [
                "html",
                0.00035180268743055217
              ],
              [
                "objective-c",
                0.00027798425161126557
              ],
              [
                "sql",
                0.0001728341808434431
              ],
              [
                "css",
                0.00003861177400551988
              ],
              [
                "c++",
                0.00003439039144376966
              ],
              [
                "swift",
                0.00003122888156291083
              ],
              [
                "bash",
                0.000013677125153852449
              ],
              [
                "ruby",
                0.000012247314781813987
              ],
              [
                "perl",
                0.0000055816600359435255
              ],
              [
                "c#",
                0.0000038442524620865984
              ],
              [
                "scala",
                0.000003723956933340268
              ],
              [
                "python",
                1.5721135605950836e-7
              ],
              [
                "r",
                6.431838326426007e-8
              ],
              [
                "haskell",
                4.036764786336714e-8
              ],
              [
                "vb",
                3.261245241114874e-8
              ]
            ],
            "metadata": {
              "content_type": "json",
              "duration": 0.010710371
            }
          }
        }
      },
      {
        "request": {
          "url": "/comments/algo-e32d5ea4-1149-4a8e-85ed-86900bc37482",
          "method": "GET",
          "headers": {
            "host": "algorithmia.com",
            "connection": "keep-alive",
            "pragma": "no-cache",
            "cache-control": "no-cache",
            "accept": "application/json, text/plain, */*",
            "dnt": "1",
            "x-xsrf-token": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "cors",
            "referer": "https://algorithmia.com/algorithms/PetiteProgrammer/ProgrammingLanguageIdentification/discussion",
            "accept-encoding": "gzip, deflate, br",
            "accept-language": "en-US,en;q=0.9",
            "cookie": "ajs_group_id=null; ajs_anonymous_id=%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22; _ga=GA1.2.1872580011.1571235636; _fbp=fb.1.1571235636317.604574724; intercom-id-c9fj6354=01941621-342b-4320-ad75-53826b5a002c; hubspotutk=105fad8a9b12bfed67330a0dbfe12c61; _gid=GA1.2.1843278152.1572282100; __zlcmid=uzie5dAUbB300Y; __hstc=69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3; __hssrc=1; fs_intercom=4655074328608768:4513847218700288; XSRF-TOKEN=0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da; referrer=www.google.com; landing_page=https://algorithmia.com/; signup_session=true; ajs_user_id=%22acunniffe%22; fs_uid=rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636; new-algo-language=scala; __hssc=69686351.5.1572357353053; intercom-session-c9fj6354=L08zdks3K1FOZEs0NngyR2NDQjBxN3VMb1J3dE1QZ0t4N2piYXY5ZmlNWFNVMkxseFhidkxhZ0g4QStWV2hYay0tUUtjQUtFaUZvLzJIZ0drSFdnRjM0UT09--fc3e700881b2cd1507c47ce6533f5b502d54fb7c; ALGO_SESSION=7052ba40b5fe0b5209609698aea03bafda4ef4b9-last-access=2019-10-29T14%3A06%3A36.546Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "cookies": {
            "ajs_group_id": "null",
            "ajs_anonymous_id": "%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22",
            "_ga": "GA1.2.1872580011.1571235636",
            "_fbp": "fb.1.1571235636317.604574724",
            "intercom-id-c9fj6354": "01941621-342b-4320-ad75-53826b5a002c",
            "hubspotutk": "105fad8a9b12bfed67330a0dbfe12c61",
            "_gid": "GA1.2.1843278152.1572282100",
            "__zlcmid": "uzie5dAUbB300Y",
            "__hstc": "69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3",
            "__hssrc": "1",
            "fs_intercom": "4655074328608768:4513847218700288",
            "XSRF-TOKEN": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "referrer": "www.google.com",
            "landing_page": "https://algorithmia.com/",
            "signup_session": "true",
            "ajs_user_id": "%22acunniffe%22",
            "fs_uid": "rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636",
            "new-algo-language": "scala",
            "__hssc": "69686351.5.1572357353053",
            "intercom-session-c9fj6354": "L08zdks3K1FOZEs0NngyR2NDQjBxN3VMb1J3dE1QZ0t4N2piYXY5ZmlNWFNVMkxseFhidkxhZ0g4QStWV2hYay0tUUtjQUtFaUZvLzJIZ0drSFdnRjM0UT09--fc3e700881b2cd1507c47ce6533f5b502d54fb7c",
            "ALGO_SESSION": "7052ba40b5fe0b5209609698aea03bafda4ef4b9-last-access=2019-10-29T14%3A06%3A36.546Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "queryParameters": {}
        },
        "response": {
          "statusCode": 200,
          "headers": {
            "content-encoding": "gzip",
            "content-type": "application/json; charset=utf-8",
            "date": "Tue, 29 Oct 2019 14:07:00 GMT",
            "set-cookie": "ALGO_SESSION=39f2a54dd7ea3f989657694c8203ccabd38b05f7-last-access=2019-10-29T14%3A07%3A00.107Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3; Max-Age=86400; Expires=Wed, 30 Oct 2019 14:07:00 GMT; Path=/; Domain=algorithmia.com; Secure; HTTPOnly",
            "strict-transport-security": "max-age=86400; includeSubDomains",
            "vary": "Accept-Encoding",
            "x-content-type-options": "nosniff",
            "x-frame-options": "DENY",
            "content-length": "2204",
            "connection": "keep-alive"
          },
          "body": [
            {
              "object_id": "algo-e32d5ea4-1149-4a8e-85ed-86900bc37482",
              "object_type": "algorithm",
              "comment_id": 649,
              "username": "zeryx",
              "message": "Wow this is a really neat idea for an algorithm, great job!",
              "avatar_url": "http://www.gravatar.com/avatar/560ac56436e0aa21cb8b8b2b7f958474",
              "created_at": 1468938814000
            },
            {
              "object_id": "algo-e32d5ea4-1149-4a8e-85ed-86900bc37482",
              "object_type": "algorithm",
              "comment_id": 653,
              "username": "PetiteProgrammer",
              "message": "Thank you @zeryx! Also see the blog post about it here: http://danielheres.space/jekyll/update/2016/07/18/detecting-the-programming-language-of-source-code-snippets-using-machine-learning-and-neural-networks.html",
              "avatar_url": "http://www.gravatar.com/avatar/acf42781b65ef4bb6473aa62bcc7e9b1",
              "created_at": 1468939279000
            },
            {
              "object_id": "algo-e32d5ea4-1149-4a8e-85ed-86900bc37482",
              "object_type": "algorithm",
              "comment_id": 656,
              "username": "b",
              "message": "Awesome idea for an algorithm! It doesn't recognize bash though :P",
              "avatar_url": "http://www.gravatar.com/avatar/fcef7eee240c3751be4cfb4a5c049438",
              "created_at": 1468966476000
            },
            {
              "object_id": "algo-e32d5ea4-1149-4a8e-85ed-86900bc37482",
              "object_type": "algorithm",
              "comment_id": 657,
              "username": "PetiteProgrammer",
              "message": "@b Thanks! Maybe will add Bash in a future version!",
              "avatar_url": "http://www.gravatar.com/avatar/acf42781b65ef4bb6473aa62bcc7e9b1",
              "created_at": 1468992034000
            },
            {
              "object_id": "algo-e32d5ea4-1149-4a8e-85ed-86900bc37482",
              "object_type": "algorithm",
              "comment_id": 665,
              "username": "VaishakHolla",
              "message": "This is cool! Can you share the source in python if you can? and also the training data i am eager to play with this stuff!! Great job btw",
              "created_at": 1469078648000
            },
            {
              "object_id": "algo-e32d5ea4-1149-4a8e-85ed-86900bc37482",
              "object_type": "algorithm",
              "comment_id": 666,
              "username": "PetiteProgrammer",
              "message": "@b Bash + Markdown support is coming in the next version!",
              "avatar_url": "http://www.gravatar.com/avatar/acf42781b65ef4bb6473aa62bcc7e9b1",
              "created_at": 1469085910000
            },
            {
              "object_id": "algo-e32d5ea4-1149-4a8e-85ed-86900bc37482",
              "object_type": "algorithm",
              "comment_id": 667,
              "username": "PetiteProgrammer",
              "message": "@VaishakHolla I currently have no plans for open sourcing this. I use http://rosettacode.org/wiki/Rosetta_Code and GitHub as training data. See also my blog post on some of the details: http://danielheres.space/jekyll/update/2016/07/18/detecting-the-programming-language-of-source-code-snippets-using-machine-learning-and-neural-networks.html",
              "avatar_url": "http://www.gravatar.com/avatar/acf42781b65ef4bb6473aa62bcc7e9b1",
              "created_at": 1469086029000
            },
            {
              "object_id": "algo-e32d5ea4-1149-4a8e-85ed-86900bc37482",
              "object_type": "algorithm",
              "comment_id": 669,
              "username": "PetiteProgrammer",
              "message": "@b and all: Bash and Markdown support is added.",
              "avatar_url": "http://www.gravatar.com/avatar/acf42781b65ef4bb6473aa62bcc7e9b1",
              "created_at": 1469125178000
            },
            {
              "object_id": "algo-e32d5ea4-1149-4a8e-85ed-86900bc37482",
              "object_type": "algorithm",
              "comment_id": 678,
              "username": "PetiteProgrammer",
              "message": "New version is completely hosted on Algorithmica for better security / privacy + improved response times.",
              "avatar_url": "http://www.gravatar.com/avatar/acf42781b65ef4bb6473aa62bcc7e9b1",
              "created_at": 1469352184000
            },
            {
              "object_id": "algo-e32d5ea4-1149-4a8e-85ed-86900bc37482",
              "object_type": "algorithm",
              "comment_id": 715,
              "username": "anowell",
              "message": "Pretty sweet. It consistently identifies Rust code as Swift (~70% confidence), but I probably should have read the list of supported languages beforehand. :-)",
              "created_at": 1469638977000
            },
            {
              "object_id": "algo-e32d5ea4-1149-4a8e-85ed-86900bc37482",
              "object_type": "algorithm",
              "comment_id": 729,
              "username": "PetiteProgrammer",
              "message": "@anowell: that's funny, probably because they share a lot of keywords :). Maybe support for Rust is coming in a next version...",
              "avatar_url": "http://www.gravatar.com/avatar/acf42781b65ef4bb6473aa62bcc7e9b1",
              "created_at": 1470475584000
            },
            {
              "object_id": "algo-e32d5ea4-1149-4a8e-85ed-86900bc37482",
              "object_type": "algorithm",
              "comment_id": 940,
              "username": "sushan",
              "message": ":( cant u share the code in java...........really wish to add this feature for my coleg project",
              "created_at": 1482383576000
            },
            {
              "object_id": "algo-e32d5ea4-1149-4a8e-85ed-86900bc37482",
              "object_type": "algorithm",
              "comment_id": 972,
              "username": "PetiteProgrammer",
              "message": "@sushan it isn't written in Java. Couldn't you use the API for your project? You get 500 calls / month for free on Algorithmia.",
              "avatar_url": "http://www.gravatar.com/avatar/acf42781b65ef4bb6473aa62bcc7e9b1",
              "created_at": 1484220194000
            },
            {
              "object_id": "algo-e32d5ea4-1149-4a8e-85ed-86900bc37482",
              "object_type": "algorithm",
              "comment_id": 1103,
              "username": "aibeke",
              "message": "Hello! I tried to execute java example code, but i got error message. Exception in thread \"main\" com.algorithmia.APIException: 400 malformed request: {\"error\":{\"message\":\"Failed to parse input, input did not parse as valid json\"}}",
              "created_at": 1493802664000
            },
            {
              "object_id": "algo-e32d5ea4-1149-4a8e-85ed-86900bc37482",
              "object_type": "algorithm",
              "comment_id": 1104,
              "username": "aibeke",
              "message": "JavaScript example works :) Thank you!",
              "created_at": 1493812183000
            },
            {
              "object_id": "algo-e32d5ea4-1149-4a8e-85ed-86900bc37482",
              "object_type": "algorithm",
              "comment_id": 1109,
              "username": "PetiteProgrammer",
              "message": "Cool! Yes, it should be valid JSON. Did you put the Java code in quotes?",
              "avatar_url": "http://www.gravatar.com/avatar/acf42781b65ef4bb6473aa62bcc7e9b1",
              "created_at": 1494141769000
            },
            {
              "object_id": "algo-e32d5ea4-1149-4a8e-85ed-86900bc37482",
              "object_type": "algorithm",
              "comment_id": 1117,
              "username": "aibeke",
              "message": "In the java example you need to correct line as this (pipeJson->pipe): AlgoResponse result = algo.pipe(input);",
              "created_at": 1494258243000
            },
            {
              "object_id": "algo-e32d5ea4-1149-4a8e-85ed-86900bc37482",
              "object_type": "algorithm",
              "comment_id": 1146,
              "username": "Wiooo",
              "message": "I'd suggest adding capitalization sensing if it's not already there because in the code snippet I entered, it suggested Java over C++ when I entered a snippet that's in C++... it should have been able to detect that it's not java just from the fact that in java you identify a string with \"String\" and in C++ you identify a string with \"string\"...",
              "created_at": 1497813859000
            },
            {
              "object_id": "algo-e32d5ea4-1149-4a8e-85ed-86900bc37482",
              "object_type": "algorithm",
              "comment_id": 1165,
              "username": "PetiteProgrammer",
              "message": "Hi Wiooo, that is a excellent suggestion. The current version indeed does indeed convert all text to lowercase. I guess not doing that would probably yield better accuracy as you say.",
              "avatar_url": "http://www.gravatar.com/avatar/acf42781b65ef4bb6473aa62bcc7e9b1",
              "created_at": 1498506618000
            },
            {
              "object_id": "algo-e32d5ea4-1149-4a8e-85ed-86900bc37482",
              "object_type": "algorithm",
              "comment_id": 1337,
              "username": "Woodywuuu",
              "message": "Nice job!Could u share ur blog again?It seems like the link does not work.Thanks a lot:)",
              "created_at": 1505209603000
            },
            {
              "object_id": "algo-e32d5ea4-1149-4a8e-85ed-86900bc37482",
              "object_type": "algorithm",
              "comment_id": 1338,
              "username": "PetiteProgrammer",
              "message": "@Woodywuuu thanks, updated the article.",
              "avatar_url": "http://www.gravatar.com/avatar/acf42781b65ef4bb6473aa62bcc7e9b1",
              "created_at": 1505220772000
            },
            {
              "object_id": "algo-e32d5ea4-1149-4a8e-85ed-86900bc37482",
              "object_type": "algorithm",
              "comment_id": 1477,
              "username": "newsiberian",
              "message": "Hi, @PetiteProgrammer. Can you provide a list of supported syntaxes, as they are called in your app?",
              "created_at": 1514208177000
            },
            {
              "object_id": "algo-e32d5ea4-1149-4a8e-85ed-86900bc37482",
              "object_type": "algorithm",
              "comment_id": 1489,
              "username": "PetiteProgrammer",
              "message": "@newsiberian what do you mean by supported syntaxes? For all supported languages, all syntax is supported.",
              "avatar_url": "http://www.gravatar.com/avatar/acf42781b65ef4bb6473aa62bcc7e9b1",
              "created_at": 1515356390000
            },
            {
              "object_id": "algo-e32d5ea4-1149-4a8e-85ed-86900bc37482",
              "object_type": "algorithm",
              "comment_id": 1490,
              "username": "newsiberian",
              "message": "Hi, sorry, I mean \"languages\". I missed the list in the description page.\nAny plans to add Go support? Maybe something else?",
              "created_at": 1515356757000
            },
            {
              "object_id": "algo-e32d5ea4-1149-4a8e-85ed-86900bc37482",
              "object_type": "algorithm",
              "comment_id": 1547,
              "username": "PetiteProgrammer",
              "message": "Yeah Go support would be a logical next step.",
              "avatar_url": "http://www.gravatar.com/avatar/acf42781b65ef4bb6473aa62bcc7e9b1",
              "created_at": 1519385133000
            }
          ]
        }
      },
      {
        "request": {
          "url": "/webapi/categories",
          "method": "GET",
          "headers": {
            "host": "algorithmia.com",
            "connection": "keep-alive",
            "pragma": "no-cache",
            "cache-control": "no-cache",
            "accept": "application/json, text/plain, */*",
            "dnt": "1",
            "x-xsrf-token": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "cors",
            "referer": "https://algorithmia.com/algorithms/PetiteProgrammer/ProgrammingLanguageIdentification/docs",
            "accept-encoding": "gzip, deflate, br",
            "accept-language": "en-US,en;q=0.9",
            "cookie": "ajs_group_id=null; ajs_anonymous_id=%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22; _ga=GA1.2.1872580011.1571235636; _fbp=fb.1.1571235636317.604574724; intercom-id-c9fj6354=01941621-342b-4320-ad75-53826b5a002c; hubspotutk=105fad8a9b12bfed67330a0dbfe12c61; _gid=GA1.2.1843278152.1572282100; __zlcmid=uzie5dAUbB300Y; __hstc=69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3; __hssrc=1; fs_intercom=4655074328608768:4513847218700288; XSRF-TOKEN=0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da; referrer=www.google.com; landing_page=https://algorithmia.com/; signup_session=true; ajs_user_id=%22acunniffe%22; fs_uid=rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636; new-algo-language=scala; __hssc=69686351.5.1572357353053; intercom-session-c9fj6354=L08zdks3K1FOZEs0NngyR2NDQjBxN3VMb1J3dE1QZ0t4N2piYXY5ZmlNWFNVMkxseFhidkxhZ0g4QStWV2hYay0tUUtjQUtFaUZvLzJIZ0drSFdnRjM0UT09--fc3e700881b2cd1507c47ce6533f5b502d54fb7c; ALGO_SESSION=39f2a54dd7ea3f989657694c8203ccabd38b05f7-last-access=2019-10-29T14%3A07%3A00.107Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "cookies": {
            "ajs_group_id": "null",
            "ajs_anonymous_id": "%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22",
            "_ga": "GA1.2.1872580011.1571235636",
            "_fbp": "fb.1.1571235636317.604574724",
            "intercom-id-c9fj6354": "01941621-342b-4320-ad75-53826b5a002c",
            "hubspotutk": "105fad8a9b12bfed67330a0dbfe12c61",
            "_gid": "GA1.2.1843278152.1572282100",
            "__zlcmid": "uzie5dAUbB300Y",
            "__hstc": "69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3",
            "__hssrc": "1",
            "fs_intercom": "4655074328608768:4513847218700288",
            "XSRF-TOKEN": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "referrer": "www.google.com",
            "landing_page": "https://algorithmia.com/",
            "signup_session": "true",
            "ajs_user_id": "%22acunniffe%22",
            "fs_uid": "rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636",
            "new-algo-language": "scala",
            "__hssc": "69686351.5.1572357353053",
            "intercom-session-c9fj6354": "L08zdks3K1FOZEs0NngyR2NDQjBxN3VMb1J3dE1QZ0t4N2piYXY5ZmlNWFNVMkxseFhidkxhZ0g4QStWV2hYay0tUUtjQUtFaUZvLzJIZ0drSFdnRjM0UT09--fc3e700881b2cd1507c47ce6533f5b502d54fb7c",
            "ALGO_SESSION": "39f2a54dd7ea3f989657694c8203ccabd38b05f7-last-access=2019-10-29T14%3A07%3A00.107Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "queryParameters": {}
        },
        "response": {
          "statusCode": 200,
          "headers": {
            "content-encoding": "gzip",
            "content-type": "application/json; charset=utf-8",
            "date": "Tue, 29 Oct 2019 14:07:04 GMT",
            "set-cookie": "ALGO_SESSION=b787d487177f8d96aea262552d171c326567d521-last-access=2019-10-29T14%3A07%3A04.964Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3; Max-Age=86400; Expires=Wed, 30 Oct 2019 14:07:04 GMT; Path=/; Domain=algorithmia.com; Secure; HTTPOnly",
            "strict-transport-security": "max-age=86400; includeSubDomains",
            "vary": "Accept-Encoding",
            "x-content-type-options": "nosniff",
            "x-frame-options": "DENY",
            "content-length": "3235",
            "connection": "keep-alive"
          },
          "body": {
            "categories": [
              {
                "tag": "text analysis",
                "title": "Text Analysis",
                "tagline": "Make sense of unstructured text",
                "summary": "<p>Text Analysis or Natural Language Processing (NLP) is a way for computers to analyze, understand, and derive meaning from human language in a smart and useful way. By utilizing NLP, developers can organize and structure knowledge to perform tasks such as automatic summarization, translation, named entity recognition, relationship extraction, <a href=\"https://blog.algorithmia.com/introduction-sentiment-analysis/\" target=\"_blank\" rel=\"nofollow\">sentiment analysis</a>, speech recognition, and topic segmentation. <strong>Read: <a href=\"https://blog.algorithmia.com/introduction-natural-language-processing-nlp/\" target=\"_blank\" rel=\"nofollow\">Introduction to Natural Language Processing</a></strong></p>\n<h2 id=\"interactive-demos-\">Interactive Demos:</h2>\n<ul>\n<li><a href=\"https://algorithmia.com/algorithms/deeplearning/Parsey#console\" target=\"_blank\" rel=\"nofollow\">Parse Sentences</a></li>\n<li><a href=\"https://algorithmia.com/algorithms/nlp/SentimentAnalysis#console\" target=\"_blank\" rel=\"nofollow\">Analyze the Sentiment of a Text</a> (interactive console at bottom)</li>\n</ul>\n<h2 id=\"recipes-\">Recipes:</h2>\n<ul>\n<li><a href=\"https://algorithmia.com/developers/tutorials/recipes/language_detector/\" target=\"_blank\" rel=\"nofollow\">Categorize your documents by the text's natural language</a></li>\n<li><a href=\"https://algorithmia.com/developers/tutorials/recipes/topic_modeling_lda/\" target=\"_blank\" rel=\"nofollow\">Classify documents to topics</a></li>\n<li><a href=\"https://algorithmia.com/developers/tutorials/recipes/site_crawler_analyzer/\" target=\"_blank\" rel=\"nofollow\">Crawl, scrape, and analyze websites</a></li>\n<li><a href=\"https://algorithmia.com/developers/tutorials/recipes/named_entity_recognition/\" target=\"_blank\" rel=\"nofollow\">Named entities of Tweets</a></li>\n<li><a href=\"https://algorithmia.com/developers/tutorials/recipes/sentiment_web_scraping/\" target=\"_blank\" rel=\"nofollow\">Sentiment Analysis Pipeline</a></li>\n<li><a href=\"https://algorithmia.com/developers/tutorials/recipes/summarize_slideshow_presentations/\" target=\"_blank\" rel=\"nofollow\">Summarize a slideshow presentation</a></li>\n</ul>\n",
                "icon": "/public/categories/synapse/text-analysis.svg",
                "position": 1
              },
              {
                "tag": "machine learning",
                "title": "Machine Learning",
                "tagline": "Teach your app to teach itself",
                "summary": "<p>Machine learning is a set of mathematical approaches to teaching computers to learn based on large quantities of data, instead of human step by step instruction. There are many categories of Machine Learning including <a href=\"https://blog.algorithmia.com/introduction-natural-language-processing-nlp/\" target=\"_blank\" rel=\"nofollow\">Natural Language Processing</a>, <a href=\"https://algorithmia.com/tags/computer-vision\" target=\"_blank\" rel=\"nofollow\">Computer Vision</a>, <a href=\"https://algorithmia.com/tags/time-series\" target=\"_blank\" rel=\"nofollow\">Time Series</a>, and more.</p>\n<h2 id=\"demos-\">Demos:</h2>\n<ul>\n<li><p><a href=\"http://demos.algorithmia.com/video-metadata/\" target=\"_blank\" rel=\"nofollow\">Search the content within any video</a></p>\n</li>\n<li><p><a href=\"http://demos.algorithmia.com/colorize-photos/\" target=\"_blank\" rel=\"nofollow\">Colorize a Black and White Photo</a></p>\n</li>\n<li><a href=\"https://algorithmia.com/use-cases\" target=\"_blank\" rel=\"nofollow\">The whole Machine Learning demo gallery</a> :)</li>\n</ul>\n",
                "icon": "/public/categories/synapse/machine-learning.svg",
                "position": 2
              },
              {
                "tag": "computer vision",
                "title": "Computer Vision",
                "tagline": "Identify objects in images",
                "summary": "<p>Computer Vision gives us the ability to teach a computer to make meaning of the physical world through vision. These tools allow us to develop applications that can make meaning from the input of cameras, photos, and videos to mind-bending degrees. <strong>Read more: <a href=\"https://blog.algorithmia.com/introduction-computer-vision/\" target=\"_blank\" rel=\"nofollow\">Introduction to Computer Vision</a></strong></p>\n<h2 id=\"computer-vision-demos-\">Computer Vision Demos:</h2>\n<ul>\n<li><a href=\"http://demos.algorithmia.com/image-tagger\" target=\"_blank\" rel=\"nofollow\">Automatic Image Tagging and Object Detection</a></li>\n<li><a href=\"http://demos.algorithmia.com/isitnude/\" target=\"_blank\" rel=\"nofollow\">Nudity Detection</a></li>\n</ul>\n<h2 id=\"tutorials-\">Tutorials:</h2>\n<ul>\n<li><p><a href=\"https://blog.algorithmia.com/censoring-faces-automatically/\" target=\"_blank\" rel=\"nofollow\">Censoring Faces Automatically</a></p>\n</li>\n<li><p><a href=\"https://blog.algorithmia.com/introduction-to-horizon-line-estimation/\" target=\"_blank\" rel=\"nofollow\">Horizon line estimation</a></p>\n</li>\n</ul>\n",
                "icon": "/public/categories/synapse/computer-vision.svg",
                "position": 3
              },
              {
                "tag": "deep learning",
                "title": "Deep Learning",
                "tagline": "Learn from your data",
                "summary": "<p><strong>New to Deep Learning?</strong> Check our our gentle <a href=\"http://blog.algorithmia.com/introduction-to-deep-learning-2016/\" target=\"_blank\" rel=\"nofollow\">introduction to deep learning</a>. </p>\n<p>More about deep learning: </p>\n<ul>\n<li><a href=\"http://blog.algorithmia.com/ai-why-deep-learning-matters/\" target=\"_blank\" rel=\"nofollow\">Why Deep Learning Matters and What’s Next for Artificial Intelligence</a> </li>\n<li><a href=\"http://blog.algorithmia.com/deploying-deep-learning-cloud-services/\" target=\"_blank\" rel=\"nofollow\">Lessons Learned from Deploying Deep Learning at Scale</a> </li>\n<li><a href=\"http://blog.algorithmia.com/cloud-hosted-deep-learning-models/\" target=\"_blank\" rel=\"nofollow\">Turn Your Deep Learning Model into a Serverless Microservice </a></li>\n</ul>\n<p><strong>Want to host your deep learning model as a microservice?</strong> Check our our guides for hosting your <a href=\"https://algorithmia.com/developers/algorithm-development/model-guides/theano/\" target=\"_blank\" rel=\"nofollow\">Theano</a>, <a href=\"https://algorithmia.com/developers/algorithm-development/model-guides/tensorflow/\" target=\"_blank\" rel=\"nofollow\">TensorFlow</a>, and <a href=\"https://algorithmia.com/developers/algorithm-development/model-guides/caffe/\" target=\"_blank\" rel=\"nofollow\">Caffe</a> models as scalable REST APIs.</p>\n",
                "icon": "/public/categories/synapse/deep-learning.svg",
                "position": 4
              },
              {
                "tag": "utilities",
                "title": "Utilities",
                "tagline": "Ready to use microservices",
                "summary": "",
                "icon": "/public/categories/synapse/utilities.svg",
                "position": 5
              },
              {
                "tag": "microservices",
                "title": "Microservices",
                "tagline": "Serverless and simple",
                "summary": "<p><a href=\"https://blog.algorithmia.com/introduction-to-serverless-microservices/\" target=\"\">Microservices</a> are a software architecture that allows for highly elastic and scalable computing, and AI is the killer app for microservices. In our AI marketplace, you can choose from thousands of ML models and algorithms and utilize them as much or as little as you need. </p>",
                "position": 6
              },
              {
                "tag": "web",
                "title": "Web Tools",
                "tagline": "Composable tools you need",
                "summary": "<p>Sometimes, all you need to do is extract some simple information from publicly available sources: for example, finding all the email addresses of a company’s C-Suite, or summarizing the topic pages of a FAQ. You could accomplish some of it with a Python script and some RegEx magic, but now it's even easier with the power of serverless microservices </p><h2>Interactive Demos:</h2><ul><li><a href=\"http://demos.algorithmia.com/web-page-inspector/\" target=\"\">Retrieve and clean structured data from any URL</a></li><li><a href=\"http://demos.algorithmia.com/sitemap/\" target=\"\">How to crawl a site and map its links</a></li></ul><h2>Tutorials:</h2><p></p><ul><li><a href=\"https://blog.algorithmia.com/rapidly-extract-information-from-public-websites/\" target=\"\">Rapidly Extract Information from Public Websites</a></li></ul><p></p>",
                "position": 7
              },
              {
                "tag": "time series",
                "title": "Time Series",
                "tagline": "Predicting future results",
                "summary": "<p>Time Series Analysis uses a set of powerful statistical and machine learning tools for predicting future events based on past data.<b> Read more: <a href=\"http://blog.algorithmia.com/sentiment-time-series-analysis/\">Understanding customer data using time series analysis</a>. </b></p><h3>Interactive Time Series Demos</h3><ul><li><a href=\"http://demos.algorithmia.com/timeseries/\" target=\"\">Time Series Analysis</a></li></ul><h3>Time Series Tutorials</h3><ul><li><a href=\"http://blog.algorithmia.com/predictive-algorithms-track-real-time-health-trends/\">Using predictive time series algorithms to track real-time health trends</a></li><li><a href=\"http://blog.algorithmia.com/forecast-sentiment-analysis-with-r/\">Use R to build a sentiment analysis forecasting pipeline</a></li></ul>",
                "position": 8
              },
              {
                "tag": "sentiment analysis",
                "title": "Sentiment Analysis",
                "tagline": "Tools to determine the attitude of content",
                "summary": "<p><a href=\"https://algorithmia.com/algorithms/nlp/SentimentAnalysis\" target=\"_blank\" rel=\"nofollow\">Sentiment Analysis</a> is the use of natural language processing, statistics, and text analysis to extract and identify the sentiment of text into positive, negative, or neutral categories. We often see sentiment analysis used to arrive at a binary decision: somebody is either for or against something, users like or dislike something, or the product is good or bad. <strong>Read: <a href=\"https://blog.algorithmia.com/introduction-sentiment-analysis-algorithms/\" target=\"_blank\" rel=\"nofollow\">Introduction to Sentiment Analysis Algorithms Article</a></strong></p>\n<h3 id=\"sentiment-analysis-interactive-demos-\">Sentiment Analysis Interactive Demos:</h3>\n<ul>\n<li><p><a href=\"http://demos.algorithmia.com/web-page-inspector/\" target=\"_blank\" rel=\"nofollow\">Web Page Inspector</a></p>\n</li>\n<li><p><a href=\"http://demos.algorithmia.com/rss-dashboard/\" target=\"_blank\" rel=\"nofollow\">RSS Dashboard</a></p>\n</li>\n</ul>\n<h3 id=\"sentiment-analysis-span-id-selectionboundary_1507670991399_25412472751733106-class-rangyselectionboundary-span-tutorials-\">Sentiment Analysis ﻿TUTORIALS:</h3>\n<ul>\n<li><p><a href=\"https://blog.algorithmia.com/building-an-emotionally-aware-chatbot/\" target=\"_blank\" rel=\"nofollow\">Build an Emotionally-Aware Chatbot</a></p>\n</li>\n<li><p><a href=\"https://blog.algorithmia.com/anaylze-tweets-topic-sentiment-analysis/\" target=\"_blank\" rel=\"nofollow\">Introduction to Twitter Topic and Sentiment Analysis</a></p>\n</li>\n<li><p><a href=\"https://blog.algorithmia.com/sentiment-analysis-pipeline-for-web-scraping/\" target=\"_blank\" rel=\"nofollow\">Building a Sentiment Analysis Pipeline for Web Scraping</a></p>\n</li>\n<li><p><a href=\"https://blog.algorithmia.com/sentiment-analysis-tool-api-social-media/\" target=\"_blank\" rel=\"nofollow\">How to Add Sentiment Analysis to Your Project in Five Lines of Code</a></p>\n</li>\n</ul>\n",
                "icon": "/assets/images/categories/default.png",
                "position": 9
              }
            ]
          }
        }
      },
      {
        "request": {
          "url": "/webapi/users/acunniffe/algorithms",
          "method": "GET",
          "headers": {
            "host": "algorithmia.com",
            "connection": "keep-alive",
            "pragma": "no-cache",
            "cache-control": "no-cache",
            "accept": "application/json, text/plain, */*",
            "dnt": "1",
            "x-xsrf-token": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "cors",
            "referer": "https://algorithmia.com/algorithms",
            "accept-encoding": "gzip, deflate, br",
            "accept-language": "en-US,en;q=0.9",
            "cookie": "ajs_group_id=null; ajs_anonymous_id=%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22; _ga=GA1.2.1872580011.1571235636; _fbp=fb.1.1571235636317.604574724; intercom-id-c9fj6354=01941621-342b-4320-ad75-53826b5a002c; hubspotutk=105fad8a9b12bfed67330a0dbfe12c61; _gid=GA1.2.1843278152.1572282100; __zlcmid=uzie5dAUbB300Y; __hstc=69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3; __hssrc=1; fs_intercom=4655074328608768:4513847218700288; XSRF-TOKEN=0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da; referrer=www.google.com; landing_page=https://algorithmia.com/; signup_session=true; ajs_user_id=%22acunniffe%22; fs_uid=rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636; new-algo-language=scala; __hssc=69686351.5.1572357353053; intercom-session-c9fj6354=L08zdks3K1FOZEs0NngyR2NDQjBxN3VMb1J3dE1QZ0t4N2piYXY5ZmlNWFNVMkxseFhidkxhZ0g4QStWV2hYay0tUUtjQUtFaUZvLzJIZ0drSFdnRjM0UT09--fc3e700881b2cd1507c47ce6533f5b502d54fb7c; ALGO_SESSION=b787d487177f8d96aea262552d171c326567d521-last-access=2019-10-29T14%3A07%3A04.964Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "cookies": {
            "ajs_group_id": "null",
            "ajs_anonymous_id": "%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22",
            "_ga": "GA1.2.1872580011.1571235636",
            "_fbp": "fb.1.1571235636317.604574724",
            "intercom-id-c9fj6354": "01941621-342b-4320-ad75-53826b5a002c",
            "hubspotutk": "105fad8a9b12bfed67330a0dbfe12c61",
            "_gid": "GA1.2.1843278152.1572282100",
            "__zlcmid": "uzie5dAUbB300Y",
            "__hstc": "69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3",
            "__hssrc": "1",
            "fs_intercom": "4655074328608768:4513847218700288",
            "XSRF-TOKEN": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "referrer": "www.google.com",
            "landing_page": "https://algorithmia.com/",
            "signup_session": "true",
            "ajs_user_id": "%22acunniffe%22",
            "fs_uid": "rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636",
            "new-algo-language": "scala",
            "__hssc": "69686351.5.1572357353053",
            "intercom-session-c9fj6354": "L08zdks3K1FOZEs0NngyR2NDQjBxN3VMb1J3dE1QZ0t4N2piYXY5ZmlNWFNVMkxseFhidkxhZ0g4QStWV2hYay0tUUtjQUtFaUZvLzJIZ0drSFdnRjM0UT09--fc3e700881b2cd1507c47ce6533f5b502d54fb7c",
            "ALGO_SESSION": "b787d487177f8d96aea262552d171c326567d521-last-access=2019-10-29T14%3A07%3A04.964Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "queryParameters": {}
        },
        "response": {
          "statusCode": 200,
          "headers": {
            "cache-control": "no-cache, no-store",
            "content-encoding": "gzip",
            "content-type": "application/json; charset=utf-8",
            "date": "Tue, 29 Oct 2019 14:07:05 GMT",
            "set-cookie": "ALGO_SESSION=31c5e21829eb5f14b342e2211b98b738ef1cadb7-last-access=2019-10-29T14%3A07%3A05.024Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3; Max-Age=86400; Expires=Wed, 30 Oct 2019 14:07:05 GMT; Path=/; Domain=algorithmia.com; Secure; HTTPOnly",
            "strict-transport-security": "max-age=86400; includeSubDomains",
            "vary": "Accept-Encoding",
            "x-content-type-options": "nosniff",
            "x-frame-options": "DENY",
            "content-length": "169",
            "connection": "keep-alive"
          },
          "body": [
            {
              "username": "acunniffe",
              "algoname": "example_test",
              "algolabel": "example_test",
              "card_line": null,
              "total_calls": 999
            },
            {
              "username": "acunniffe",
              "algoname": "Hello",
              "algolabel": "Hello World",
              "card_line": "A simple \"Hello World\" algorithm, which returns \"Hello \" + the algorithm input.",
              "total_calls": 999
            }
          ]
        }
      },
      {
        "request": {
          "url": "/users/acunniffe/algorithms/starred",
          "method": "GET",
          "headers": {
            "host": "algorithmia.com",
            "connection": "keep-alive",
            "pragma": "no-cache",
            "cache-control": "no-cache",
            "accept": "application/json, text/plain, */*",
            "dnt": "1",
            "x-xsrf-token": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "cors",
            "referer": "https://algorithmia.com/algorithms",
            "accept-encoding": "gzip, deflate, br",
            "accept-language": "en-US,en;q=0.9",
            "cookie": "ajs_group_id=null; ajs_anonymous_id=%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22; _ga=GA1.2.1872580011.1571235636; _fbp=fb.1.1571235636317.604574724; intercom-id-c9fj6354=01941621-342b-4320-ad75-53826b5a002c; hubspotutk=105fad8a9b12bfed67330a0dbfe12c61; _gid=GA1.2.1843278152.1572282100; __zlcmid=uzie5dAUbB300Y; __hstc=69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3; __hssrc=1; fs_intercom=4655074328608768:4513847218700288; XSRF-TOKEN=0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da; referrer=www.google.com; landing_page=https://algorithmia.com/; signup_session=true; ajs_user_id=%22acunniffe%22; fs_uid=rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636; new-algo-language=scala; __hssc=69686351.5.1572357353053; intercom-session-c9fj6354=L08zdks3K1FOZEs0NngyR2NDQjBxN3VMb1J3dE1QZ0t4N2piYXY5ZmlNWFNVMkxseFhidkxhZ0g4QStWV2hYay0tUUtjQUtFaUZvLzJIZ0drSFdnRjM0UT09--fc3e700881b2cd1507c47ce6533f5b502d54fb7c; ALGO_SESSION=b787d487177f8d96aea262552d171c326567d521-last-access=2019-10-29T14%3A07%3A04.964Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "cookies": {
            "ajs_group_id": "null",
            "ajs_anonymous_id": "%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22",
            "_ga": "GA1.2.1872580011.1571235636",
            "_fbp": "fb.1.1571235636317.604574724",
            "intercom-id-c9fj6354": "01941621-342b-4320-ad75-53826b5a002c",
            "hubspotutk": "105fad8a9b12bfed67330a0dbfe12c61",
            "_gid": "GA1.2.1843278152.1572282100",
            "__zlcmid": "uzie5dAUbB300Y",
            "__hstc": "69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3",
            "__hssrc": "1",
            "fs_intercom": "4655074328608768:4513847218700288",
            "XSRF-TOKEN": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "referrer": "www.google.com",
            "landing_page": "https://algorithmia.com/",
            "signup_session": "true",
            "ajs_user_id": "%22acunniffe%22",
            "fs_uid": "rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636",
            "new-algo-language": "scala",
            "__hssc": "69686351.5.1572357353053",
            "intercom-session-c9fj6354": "L08zdks3K1FOZEs0NngyR2NDQjBxN3VMb1J3dE1QZ0t4N2piYXY5ZmlNWFNVMkxseFhidkxhZ0g4QStWV2hYay0tUUtjQUtFaUZvLzJIZ0drSFdnRjM0UT09--fc3e700881b2cd1507c47ce6533f5b502d54fb7c",
            "ALGO_SESSION": "b787d487177f8d96aea262552d171c326567d521-last-access=2019-10-29T14%3A07%3A04.964Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "queryParameters": {}
        },
        "response": {
          "statusCode": 200,
          "headers": {
            "content-encoding": "gzip",
            "content-type": "application/json; charset=utf-8",
            "date": "Tue, 29 Oct 2019 14:07:05 GMT",
            "set-cookie": "ALGO_SESSION=8f074578587b8729bb6829695642759caf83e301-last-access=2019-10-29T14%3A07%3A05.171Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3; Max-Age=86400; Expires=Wed, 30 Oct 2019 14:07:05 GMT; Path=/; Domain=algorithmia.com; Secure; HTTPOnly",
            "strict-transport-security": "max-age=86400; includeSubDomains",
            "vary": "Accept-Encoding",
            "x-content-type-options": "nosniff",
            "x-frame-options": "DENY",
            "content-length": "222",
            "connection": "keep-alive"
          },
          "body": [
            {
              "algo_id": 130237,
              "object_id": "algo-533a1908-4277-4d30-bd0b-07bf2cd88517",
              "username": "acunniffe",
              "algoname": "example_test",
              "algolabel": "example_test",
              "language": "scala",
              "tag_line": "",
              "discoverable_world": false,
              "source_world": false,
              "is_suppressed": false,
              "license": "apl",
              "total_calls": 0,
              "runner_id": 5,
              "algorithm_builder_id": 1
            }
          ]
        }
      },
      {
        "request": {
          "url": "/meta/algorithms",
          "method": "GET",
          "headers": {
            "host": "algorithmia.com",
            "connection": "keep-alive",
            "pragma": "no-cache",
            "cache-control": "no-cache",
            "accept": "application/json, text/plain, */*",
            "dnt": "1",
            "x-xsrf-token": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "cors",
            "referer": "https://algorithmia.com/algorithms",
            "accept-encoding": "gzip, deflate, br",
            "accept-language": "en-US,en;q=0.9",
            "cookie": "ajs_group_id=null; ajs_anonymous_id=%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22; _ga=GA1.2.1872580011.1571235636; _fbp=fb.1.1571235636317.604574724; intercom-id-c9fj6354=01941621-342b-4320-ad75-53826b5a002c; hubspotutk=105fad8a9b12bfed67330a0dbfe12c61; _gid=GA1.2.1843278152.1572282100; __zlcmid=uzie5dAUbB300Y; __hstc=69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3; __hssrc=1; fs_intercom=4655074328608768:4513847218700288; XSRF-TOKEN=0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da; referrer=www.google.com; landing_page=https://algorithmia.com/; signup_session=true; ajs_user_id=%22acunniffe%22; fs_uid=rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636; new-algo-language=scala; __hssc=69686351.5.1572357353053; intercom-session-c9fj6354=L08zdks3K1FOZEs0NngyR2NDQjBxN3VMb1J3dE1QZ0t4N2piYXY5ZmlNWFNVMkxseFhidkxhZ0g4QStWV2hYay0tUUtjQUtFaUZvLzJIZ0drSFdnRjM0UT09--fc3e700881b2cd1507c47ce6533f5b502d54fb7c; ALGO_SESSION=b787d487177f8d96aea262552d171c326567d521-last-access=2019-10-29T14%3A07%3A04.964Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "cookies": {
            "ajs_group_id": "null",
            "ajs_anonymous_id": "%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22",
            "_ga": "GA1.2.1872580011.1571235636",
            "_fbp": "fb.1.1571235636317.604574724",
            "intercom-id-c9fj6354": "01941621-342b-4320-ad75-53826b5a002c",
            "hubspotutk": "105fad8a9b12bfed67330a0dbfe12c61",
            "_gid": "GA1.2.1843278152.1572282100",
            "__zlcmid": "uzie5dAUbB300Y",
            "__hstc": "69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3",
            "__hssrc": "1",
            "fs_intercom": "4655074328608768:4513847218700288",
            "XSRF-TOKEN": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "referrer": "www.google.com",
            "landing_page": "https://algorithmia.com/",
            "signup_session": "true",
            "ajs_user_id": "%22acunniffe%22",
            "fs_uid": "rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636",
            "new-algo-language": "scala",
            "__hssc": "69686351.5.1572357353053",
            "intercom-session-c9fj6354": "L08zdks3K1FOZEs0NngyR2NDQjBxN3VMb1J3dE1QZ0t4N2piYXY5ZmlNWFNVMkxseFhidkxhZ0g4QStWV2hYay0tUUtjQUtFaUZvLzJIZ0drSFdnRjM0UT09--fc3e700881b2cd1507c47ce6533f5b502d54fb7c",
            "ALGO_SESSION": "b787d487177f8d96aea262552d171c326567d521-last-access=2019-10-29T14%3A07%3A04.964Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "queryParameters": {
            "order": "starred"
          }
        },
        "response": {
          "statusCode": 200,
          "headers": {
            "content-encoding": "gzip",
            "content-type": "application/json; charset=utf-8",
            "date": "Tue, 29 Oct 2019 14:07:05 GMT",
            "set-cookie": "ALGO_SESSION=ebee5e9d2f4b622441d7ec05e355f3e1b7290838-last-access=2019-10-29T14%3A07%3A05.187Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3; Max-Age=86400; Expires=Wed, 30 Oct 2019 14:07:05 GMT; Path=/; Domain=algorithmia.com; Secure; HTTPOnly",
            "strict-transport-security": "max-age=86400; includeSubDomains",
            "vary": "Accept-Encoding",
            "x-content-type-options": "nosniff",
            "x-frame-options": "DENY",
            "content-length": "6474",
            "connection": "keep-alive"
          },
          "body": [
            {
              "username": "deeplearning",
              "algoname": "ColorfulImageColorization",
              "algolabel": "Colorful Image Colorization",
              "language": "Python 2.x",
              "card_line": "Colorizes given black & white images.",
              "doc_url": "https://algorithmia.com/algorithms/deeplearning/ColorfulImageColorization",
              "api_url": "https://api.algorithmia.com/v1/algo/deeplearning/ColorfulImageColorization"
            },
            {
              "username": "nlp",
              "algoname": "Summarizer",
              "algolabel": "Summarizer",
              "language": "Java",
              "card_line": "Summarize english text",
              "submitted_at": "2015-11-20T19:35:16.000Z",
              "doc_url": "https://algorithmia.com/algorithms/nlp/Summarizer",
              "api_url": "https://api.algorithmia.com/v1/algo/nlp/Summarizer"
            },
            {
              "username": "nlp",
              "algoname": "SentimentAnalysis",
              "algolabel": "Sentiment Analysis",
              "language": "Java",
              "card_line": "Determine positive or negative sentiment from text",
              "submitted_at": "2015-11-20T19:19:45.000Z",
              "doc_url": "https://algorithmia.com/algorithms/nlp/SentimentAnalysis",
              "api_url": "https://api.algorithmia.com/v1/algo/nlp/SentimentAnalysis"
            },
            {
              "username": "nlp",
              "algoname": "AutoTag",
              "algolabel": "AutoTag",
              "language": "Java",
              "card_line": "Automatically extract tags from text",
              "submitted_at": "2015-12-11T21:36:22.000Z",
              "doc_url": "https://algorithmia.com/algorithms/nlp/AutoTag",
              "api_url": "https://api.algorithmia.com/v1/algo/nlp/AutoTag"
            },
            {
              "username": "deeplearning",
              "algoname": "DeepFilter",
              "algolabel": "DeepFilter",
              "language": "Python 2.x",
              "card_line": "Apply artistic and stylish filters to your images",
              "doc_url": "https://algorithmia.com/algorithms/deeplearning/DeepFilter",
              "api_url": "https://api.algorithmia.com/v1/algo/deeplearning/DeepFilter"
            },
            {
              "username": "tags",
              "algoname": "AutoTagURL",
              "algolabel": "Auto-Tag URL",
              "language": "Java",
              "card_line": "Automatically generate keyword tags for a URL",
              "submitted_at": "2016-02-17T00:33:43.000Z",
              "doc_url": "https://algorithmia.com/algorithms/tags/AutoTagURL",
              "api_url": "https://api.algorithmia.com/v1/algo/tags/AutoTagURL"
            },
            {
              "username": "util",
              "algoname": "Html2Text",
              "algolabel": "Html 2 Text",
              "language": "Java",
              "card_line": "Extract main text content from a URL",
              "submitted_at": "2016-03-03T01:37:50.000Z",
              "doc_url": "https://algorithmia.com/algorithms/util/Html2Text",
              "api_url": "https://api.algorithmia.com/v1/algo/util/Html2Text"
            },
            {
              "username": "sfw",
              "algoname": "NudityDetection",
              "algolabel": "Nudity Detection",
              "language": "Python 2.x",
              "card_line": "Detect nudity in pictures",
              "submitted_at": "2016-04-15T16:50:59.000Z",
              "doc_url": "https://algorithmia.com/algorithms/sfw/NudityDetection",
              "api_url": "https://api.algorithmia.com/v1/algo/sfw/NudityDetection"
            },
            {
              "username": "nlp",
              "algoname": "SocialSentimentAnalysis",
              "algolabel": "Social Sentiment Analysis",
              "language": "Python 2.x",
              "card_line": "Gives the positive, negative and neutral sentiment of an English sentence.",
              "submitted_at": "2016-01-20T15:01:38.000Z",
              "doc_url": "https://algorithmia.com/algorithms/nlp/SocialSentimentAnalysis",
              "api_url": "https://api.algorithmia.com/v1/algo/nlp/SocialSentimentAnalysis"
            },
            {
              "username": "deeplearning",
              "algoname": "Parsey",
              "algolabel": "Parsey McParseface",
              "language": "Scala",
              "card_line": "Parse sentences with ease.",
              "doc_url": "https://algorithmia.com/algorithms/deeplearning/Parsey",
              "api_url": "https://api.algorithmia.com/v1/algo/deeplearning/Parsey"
            },
            {
              "username": "algorithmiahq",
              "algoname": "DeepFashion",
              "algolabel": "DeepFashion",
              "language": "Python 2.x",
              "card_line": "Recognize clothing items",
              "doc_url": "https://algorithmia.com/algorithms/algorithmiahq/DeepFashion",
              "api_url": "https://api.algorithmia.com/v1/algo/algorithmiahq/DeepFashion"
            },
            {
              "username": "SummarAI",
              "algoname": "Summarizer",
              "algolabel": "Summarizer",
              "language": "Java",
              "card_line": "Advanced Content Summarizer",
              "submitted_at": "2015-10-30T19:05:42.000Z",
              "doc_url": "https://algorithmia.com/algorithms/SummarAI/Summarizer",
              "api_url": "https://api.algorithmia.com/v1/algo/SummarAI/Summarizer"
            },
            {
              "username": "LgoBE",
              "algoname": "CarMakeandModelRecognition",
              "algolabel": "Car Make and Model Recognition",
              "language": "Python 2.x",
              "card_line": "Identify make, model, body style and model year of any car.",
              "doc_url": "https://algorithmia.com/algorithms/LgoBE/CarMakeandModelRecognition",
              "api_url": "https://api.algorithmia.com/v1/algo/LgoBE/CarMakeandModelRecognition"
            },
            {
              "username": "sfw",
              "algoname": "NudityDetectioni2v",
              "algolabel": "NudityDetectioni2v",
              "language": "Python 2.x",
              "card_line": "Detect nudity in pictures.",
              "submitted_at": "2016-04-23T00:12:44.000Z",
              "doc_url": "https://algorithmia.com/algorithms/sfw/NudityDetectioni2v",
              "api_url": "https://api.algorithmia.com/v1/algo/sfw/NudityDetectioni2v"
            },
            {
              "username": "zskurultay",
              "algoname": "ImageSimilarity",
              "algolabel": "Image Similarity",
              "language": "Java",
              "card_line": "compare two images for similarity",
              "submitted_at": "2015-06-24T00:47:44.000Z",
              "doc_url": "https://algorithmia.com/algorithms/zskurultay/ImageSimilarity",
              "api_url": "https://api.algorithmia.com/v1/algo/zskurultay/ImageSimilarity"
            },
            {
              "username": "nlp",
              "algoname": "LDA",
              "algolabel": "LDA",
              "language": "Java",
              "card_line": "LDA is a generative topic model extractor.",
              "submitted_at": "2015-12-09T00:04:10.000Z",
              "doc_url": "https://algorithmia.com/algorithms/nlp/LDA",
              "api_url": "https://api.algorithmia.com/v1/algo/nlp/LDA"
            },
            {
              "username": "web",
              "algoname": "AnalyzeURL",
              "algolabel": "Analyze URL",
              "language": "Java",
              "card_line": "Get content and metadata for a URL",
              "submitted_at": "2015-10-13T17:46:22.000Z",
              "doc_url": "https://algorithmia.com/algorithms/web/AnalyzeURL",
              "api_url": "https://api.algorithmia.com/v1/algo/web/AnalyzeURL"
            },
            {
              "username": "deeplearning",
              "algoname": "IllustrationTagger",
              "algolabel": "Illustration Tagger",
              "language": "Python 2.x",
              "card_line": "Automagically tag your images.",
              "submitted_at": "2016-04-01T18:29:33.000Z",
              "doc_url": "https://algorithmia.com/algorithms/deeplearning/IllustrationTagger",
              "api_url": "https://api.algorithmia.com/v1/algo/deeplearning/IllustrationTagger"
            },
            {
              "username": "StanfordNLP",
              "algoname": "NamedEntityRecognition",
              "algolabel": "Named Entity Recognition",
              "language": "Java",
              "card_line": "Table of Contents Introduction I/O Examples Credits Algorithm Console Introduction This algorithm retrives recognized...",
              "submitted_at": "2015-12-18T19:26:54.000Z",
              "doc_url": "https://algorithmia.com/algorithms/StanfordNLP/NamedEntityRecognition",
              "api_url": "https://api.algorithmia.com/v1/algo/StanfordNLP/NamedEntityRecognition"
            },
            {
              "username": "ocr",
              "algoname": "RecognizeCharacters",
              "algolabel": "OCR",
              "language": "Java",
              "card_line": "Use character recognition to extract text from an image",
              "submitted_at": "2016-01-08T20:10:29.000Z",
              "doc_url": "https://algorithmia.com/algorithms/ocr/RecognizeCharacters",
              "api_url": "https://api.algorithmia.com/v1/algo/ocr/RecognizeCharacters"
            },
            {
              "username": "web",
              "algoname": "WikipediaParser",
              "algolabel": "Wikipedia Parser",
              "language": "Python 2.x",
              "card_line": "Search Wikipedia, get article summaries, links, and images from a page, and more.",
              "submitted_at": "2015-12-22T18:55:36.000Z",
              "doc_url": "https://algorithmia.com/algorithms/web/WikipediaParser",
              "api_url": "https://api.algorithmia.com/v1/algo/web/WikipediaParser"
            },
            {
              "username": "PetiteProgrammer",
              "algoname": "ProgrammingLanguageIdentification",
              "algolabel": "Programming Language Identification",
              "language": "Python 3.x",
              "card_line": "Detect the programming language of source code",
              "doc_url": "https://algorithmia.com/algorithms/PetiteProgrammer/ProgrammingLanguageIdentification",
              "api_url": "https://api.algorithmia.com/v1/algo/PetiteProgrammer/ProgrammingLanguageIdentification"
            },
            {
              "username": "web",
              "algoname": "ShareCounts",
              "algolabel": "Count Social Shares",
              "language": "Java",
              "card_line": "Retrieve the current Facebook, LinkedIn, and Pinterest share counts",
              "submitted_at": "2016-04-04T18:34:37.000Z",
              "doc_url": "https://algorithmia.com/algorithms/web/ShareCounts",
              "api_url": "https://api.algorithmia.com/v1/algo/web/ShareCounts"
            },
            {
              "username": "opencv",
              "algoname": "SmartThumbnail",
              "algolabel": "Smart Thumbnail",
              "language": "Java",
              "card_line": "Create a thumbnail based on the most relevant part of an image",
              "submitted_at": "2016-01-12T18:38:58.000Z",
              "doc_url": "https://algorithmia.com/algorithms/opencv/SmartThumbnail",
              "api_url": "https://api.algorithmia.com/v1/algo/opencv/SmartThumbnail"
            },
            {
              "username": "deeplearning",
              "algoname": "AgeClassification",
              "algolabel": "Age Classification",
              "language": "Python 2.x",
              "card_line": "Classifies the age range of a person in a given image.",
              "doc_url": "https://algorithmia.com/algorithms/deeplearning/AgeClassification",
              "api_url": "https://api.algorithmia.com/v1/algo/deeplearning/AgeClassification"
            },
            {
              "username": "deeplearning",
              "algoname": "GenderClassification",
              "algolabel": "Gender Classification",
              "language": "Python 2.x",
              "card_line": "Classifies the gender of a person in a given image.",
              "doc_url": "https://algorithmia.com/algorithms/deeplearning/GenderClassification",
              "api_url": "https://api.algorithmia.com/v1/algo/deeplearning/GenderClassification"
            },
            {
              "username": "nlp",
              "algoname": "SummarizeURL",
              "algolabel": "Summarize URL",
              "language": "Python 2.x",
              "card_line": "This is a algorithm for summarizing content in webpages",
              "submitted_at": "2016-03-03T02:10:54.000Z",
              "doc_url": "https://algorithmia.com/algorithms/nlp/SummarizeURL",
              "api_url": "https://api.algorithmia.com/v1/algo/nlp/SummarizeURL"
            },
            {
              "username": "nlp",
              "algoname": "AnalyzeTweets",
              "algolabel": "Analyze Tweets",
              "language": "Python 2.x",
              "card_line": "Searches Twitter by keyword and analyzes tweets for sentiment and LDA topics",
              "submitted_at": "2016-02-04T19:51:39.000Z",
              "doc_url": "https://algorithmia.com/algorithms/nlp/AnalyzeTweets",
              "api_url": "https://api.algorithmia.com/v1/algo/nlp/AnalyzeTweets"
            },
            {
              "username": "zza",
              "algoname": "EnhanceResolution",
              "algolabel": "Enhance Resolution",
              "language": "Rust",
              "card_line": "Zoom and Enhance",
              "doc_url": "https://algorithmia.com/algorithms/zza/EnhanceResolution",
              "api_url": "https://api.algorithmia.com/v1/algo/zza/EnhanceResolution"
            },
            {
              "username": "web",
              "algoname": "GetLinks",
              "algolabel": "Get Links",
              "language": "Java",
              "card_line": "Extract links from a URL",
              "submitted_at": "2015-10-21T19:04:30.000Z",
              "doc_url": "https://algorithmia.com/algorithms/web/GetLinks",
              "api_url": "https://api.algorithmia.com/v1/algo/web/GetLinks"
            },
            {
              "username": "outofstep",
              "algoname": "MegaAnalyzeURL",
              "algolabel": "MegaAnalyzeURL",
              "language": "Javascript",
              "card_line": "Extract structured data from a URL",
              "doc_url": "https://algorithmia.com/algorithms/outofstep/MegaAnalyzeURL",
              "api_url": "https://api.algorithmia.com/v1/algo/outofstep/MegaAnalyzeURL"
            },
            {
              "username": "web",
              "algoname": "SiteMap",
              "algolabel": "Site Map",
              "language": "Java",
              "card_line": "Crawls a website and returns a site map",
              "submitted_at": "2015-06-05T00:27:23.000Z",
              "doc_url": "https://algorithmia.com/algorithms/web/SiteMap",
              "api_url": "https://api.algorithmia.com/v1/algo/web/SiteMap"
            },
            {
              "username": "nlp",
              "algoname": "KeywordsForDocumentSet",
              "algolabel": "Keywords For Document Set",
              "language": "Java",
              "card_line": "Compute relevant keywords for a set of documents",
              "submitted_at": "2016-01-11T18:57:51.000Z",
              "doc_url": "https://algorithmia.com/algorithms/nlp/KeywordsForDocumentSet",
              "api_url": "https://api.algorithmia.com/v1/algo/nlp/KeywordsForDocumentSet"
            },
            {
              "username": "opencv",
              "algoname": "FaceDetection",
              "algolabel": "Face Detection",
              "language": "Java",
              "card_line": "Detect faces in images",
              "submitted_at": "2015-10-18T12:16:18.000Z",
              "doc_url": "https://algorithmia.com/algorithms/opencv/FaceDetection",
              "api_url": "https://api.algorithmia.com/v1/algo/opencv/FaceDetection"
            },
            {
              "username": "deeplearning",
              "algoname": "EmotionRecognitionCNNMBP",
              "algolabel": "Emotion Recognition in the Wild via Convolutional Neural Networks and Mapped Binary Patterns",
              "language": "Python 2.x",
              "card_line": "Autodetects emotions in the given image.",
              "doc_url": "https://algorithmia.com/algorithms/deeplearning/EmotionRecognitionCNNMBP",
              "api_url": "https://api.algorithmia.com/v1/algo/deeplearning/EmotionRecognitionCNNMBP"
            },
            {
              "username": "util",
              "algoname": "Url2Text",
              "algolabel": "Url 2 Text",
              "language": "Java",
              "card_line": "Extract main text content from a URL",
              "submitted_at": "2015-11-02T21:50:36.000Z",
              "doc_url": "https://algorithmia.com/algorithms/util/Url2Text",
              "api_url": "https://api.algorithmia.com/v1/algo/util/Url2Text"
            },
            {
              "username": "deeplearning",
              "algoname": "Places365Classifier",
              "algolabel": "Places365 Classifier",
              "language": "Python 2.x",
              "card_line": "A classifier that tags various places.",
              "doc_url": "https://algorithmia.com/algorithms/deeplearning/Places365Classifier",
              "api_url": "https://api.algorithmia.com/v1/algo/deeplearning/Places365Classifier"
            },
            {
              "username": "deeplearning",
              "algoname": "InceptionNet",
              "algolabel": "InceptionNet",
              "language": "Python 2.x",
              "card_line": "Automatically tag images with InceptionNet",
              "doc_url": "https://algorithmia.com/algorithms/deeplearning/InceptionNet",
              "api_url": "https://api.algorithmia.com/v1/algo/deeplearning/InceptionNet"
            },
            {
              "username": "media",
              "algoname": "VideoTransform",
              "algolabel": "Video Transform",
              "language": "Rust",
              "card_line": "Transform a video with image algorithms",
              "doc_url": "https://algorithmia.com/algorithms/media/VideoTransform",
              "api_url": "https://api.algorithmia.com/v1/algo/media/VideoTransform"
            },
            {
              "username": "matching",
              "algoname": "DatingAlgorithm",
              "algolabel": "Dating Algorithm",
              "language": "Python 2.x",
              "card_line": "A dating algorithm",
              "submitted_at": "2016-02-11T23:54:02.000Z",
              "doc_url": "https://algorithmia.com/algorithms/matching/DatingAlgorithm",
              "api_url": "https://api.algorithmia.com/v1/algo/matching/DatingAlgorithm"
            },
            {
              "username": "paranoia",
              "algoname": "FpGrowth",
              "algolabel": "FpGrowth",
              "language": "Java",
              "card_line": "A scalable method for finding frequent patterns within large datasets",
              "submitted_at": "2015-12-07T00:08:45.000Z",
              "doc_url": "https://algorithmia.com/algorithms/paranoia/FpGrowth",
              "api_url": "https://api.algorithmia.com/v1/algo/paranoia/FpGrowth"
            },
            {
              "username": "TimeSeries",
              "algoname": "Forecast",
              "algolabel": "Forecast",
              "language": "Java",
              "card_line": "Gives a forecast the next n steps of a given time series",
              "submitted_at": "2016-04-06T16:43:24.000Z",
              "doc_url": "https://algorithmia.com/algorithms/TimeSeries/Forecast",
              "api_url": "https://api.algorithmia.com/v1/algo/TimeSeries/Forecast"
            },
            {
              "username": "algorithmiahq",
              "algoname": "ColorizationDemo",
              "algolabel": "Colorization Demo",
              "language": "Python 2.x",
              "card_line": "calls colorizer and adds Algorithmia watermark",
              "doc_url": "https://algorithmia.com/algorithms/algorithmiahq/ColorizationDemo",
              "api_url": "https://api.algorithmia.com/v1/algo/algorithmiahq/ColorizationDemo"
            },
            {
              "username": "deeplearning",
              "algoname": "PhotoQualityEnhancement",
              "algolabel": "Photo Quality Enhancement",
              "language": "Python 2.x",
              "card_line": "Enhance your photos as if they're taken with DSLR cameras",
              "doc_url": "https://algorithmia.com/algorithms/deeplearning/PhotoQualityEnhancement",
              "api_url": "https://api.algorithmia.com/v1/algo/deeplearning/PhotoQualityEnhancement"
            },
            {
              "username": "WebPredict",
              "algoname": "GetNGramFrequencies",
              "algolabel": "GetNGramFrequencies",
              "language": "Java",
              "card_line": "Gets lists of N grams from an input text.",
              "submitted_at": "2015-10-19T21:32:32.000Z",
              "doc_url": "https://algorithmia.com/algorithms/WebPredict/GetNGramFrequencies",
              "api_url": "https://api.algorithmia.com/v1/algo/WebPredict/GetNGramFrequencies"
            },
            {
              "username": "PetiteProgrammer",
              "algoname": "TextSimilarity",
              "algolabel": "Text Similarity",
              "language": "Python 3.x",
              "card_line": "Find the most similar text files within a collection of documents",
              "doc_url": "https://algorithmia.com/algorithms/PetiteProgrammer/TextSimilarity",
              "api_url": "https://api.algorithmia.com/v1/algo/PetiteProgrammer/TextSimilarity"
            },
            {
              "username": "Aluxian",
              "algoname": "AffinityAnalysisFPGrowth",
              "algolabel": "Affinity Analysis for Market Basket Recommendation (FP-Growth)",
              "language": "Java",
              "card_line": "Affinity analysis is an analytical technique that aims to discover relationships between activities and preferences that pertain to specific individuals.",
              "submitted_at": "2015-10-20T21:44:38.000Z",
              "doc_url": "https://algorithmia.com/algorithms/Aluxian/AffinityAnalysisFPGrowth",
              "api_url": "https://api.algorithmia.com/v1/algo/Aluxian/AffinityAnalysisFPGrowth"
            },
            {
              "username": "util",
              "algoname": "SmartImageDownloader",
              "algolabel": "Smart Image Downloader",
              "language": "Python 2.x",
              "card_line": "A fast and easy way to parse image links",
              "doc_url": "https://algorithmia.com/algorithms/util/SmartImageDownloader",
              "api_url": "https://api.algorithmia.com/v1/algo/util/SmartImageDownloader"
            },
            {
              "username": "character_recognition",
              "algoname": "SmartTextExtraction",
              "algolabel": "Smart Text Extraction",
              "language": "Scala",
              "card_line": "Extract text the smart way",
              "doc_url": "https://algorithmia.com/algorithms/character_recognition/SmartTextExtraction",
              "api_url": "https://api.algorithmia.com/v1/algo/character_recognition/SmartTextExtraction"
            },
            {
              "username": "web",
              "algoname": "WebPageRecommender",
              "algolabel": "Web Page Recommender",
              "language": "Java",
              "card_line": "Recommend similar pages for any domain",
              "submitted_at": "2016-03-29T21:00:13.000Z",
              "doc_url": "https://algorithmia.com/algorithms/web/WebPageRecommender",
              "api_url": "https://api.algorithmia.com/v1/algo/web/WebPageRecommender"
            },
            {
              "username": "nlp",
              "algoname": "Word2Vec",
              "algolabel": "Word2Vec",
              "language": "Python 2.x",
              "card_line": "Get similar words by vector arithmetic",
              "doc_url": "https://algorithmia.com/algorithms/nlp/Word2Vec",
              "api_url": "https://api.algorithmia.com/v1/algo/nlp/Word2Vec"
            },
            {
              "username": "util",
              "algoname": "ExtractText",
              "algolabel": "Extract Text",
              "language": "Java",
              "card_line": "Extracts text from a given file",
              "submitted_at": "2016-04-05T16:55:05.000Z",
              "doc_url": "https://algorithmia.com/algorithms/util/ExtractText",
              "api_url": "https://api.algorithmia.com/v1/algo/util/ExtractText"
            },
            {
              "username": "nlp",
              "algoname": "SentimentByTerm",
              "algolabel": "Sentiment By Term",
              "language": "Java",
              "card_line": "Find the sentiment associated with particular words in a document",
              "submitted_at": "2015-10-29T01:56:31.000Z",
              "doc_url": "https://algorithmia.com/algorithms/nlp/SentimentByTerm",
              "api_url": "https://api.algorithmia.com/v1/algo/nlp/SentimentByTerm"
            },
            {
              "username": "nlp",
              "algoname": "DocumentClassifier",
              "algolabel": "Document Classifier",
              "language": "Scala",
              "card_line": "Classify or Recommend documents with ease",
              "doc_url": "https://algorithmia.com/algorithms/nlp/DocumentClassifier",
              "api_url": "https://api.algorithmia.com/v1/algo/nlp/DocumentClassifier"
            },
            {
              "username": "bkyan",
              "algoname": "StyleThief",
              "algolabel": "StyleThief (Open Source)",
              "language": "Python 2.x",
              "card_line": "Anish Athalye's Neural Style Transfer Using TensorFlow",
              "doc_url": "https://algorithmia.com/algorithms/bkyan/StyleThief",
              "api_url": "https://api.algorithmia.com/v1/algo/bkyan/StyleThief"
            },
            {
              "username": "matching",
              "algoname": "TaxiMatching",
              "algolabel": "Taxi Matching",
              "language": "Python 2.x",
              "card_line": "A taxi - customer matching algorithm",
              "submitted_at": "2016-02-11T01:33:53.000Z",
              "doc_url": "https://algorithmia.com/algorithms/matching/TaxiMatching",
              "api_url": "https://api.algorithmia.com/v1/algo/matching/TaxiMatching"
            },
            {
              "username": "StanfordNLP",
              "algoname": "SentimentAnalysis",
              "algolabel": "Sentiment Analysis",
              "language": "Java",
              "card_line": "1. Introduction Sentiment analysis (also known as opinion mining) refers to the use of natural language processing, text...",
              "submitted_at": "2015-04-30T19:18:44.000Z",
              "doc_url": "https://algorithmia.com/algorithms/StanfordNLP/SentimentAnalysis",
              "api_url": "https://api.algorithmia.com/v1/algo/StanfordNLP/SentimentAnalysis"
            },
            {
              "username": "ocr",
              "algoname": "SmartOCR",
              "algolabel": "Smart OCR",
              "language": "Java",
              "card_line": "OCR with Image Processing for Higher Accuracies",
              "submitted_at": "2016-02-15T21:32:25.000Z",
              "doc_url": "https://algorithmia.com/algorithms/ocr/SmartOCR",
              "api_url": "https://api.algorithmia.com/v1/algo/ocr/SmartOCR"
            },
            {
              "username": "nlp",
              "algoname": "ProfanityDetection",
              "algolabel": "Profanity Detection",
              "language": "Java",
              "card_line": "Detect profanity in text automatically",
              "submitted_at": "2015-12-01T19:53:38.000Z",
              "doc_url": "https://algorithmia.com/algorithms/nlp/ProfanityDetection",
              "api_url": "https://api.algorithmia.com/v1/algo/nlp/ProfanityDetection"
            },
            {
              "username": "deeplearning",
              "algoname": "SalNet",
              "algolabel": "SalNet: Deep Convolutional Networks for Saliency Prediction",
              "language": "Python 2.x",
              "card_line": "Automatically detects the most relevant parts in an image.",
              "doc_url": "https://algorithmia.com/algorithms/deeplearning/SalNet",
              "api_url": "https://api.algorithmia.com/v1/algo/deeplearning/SalNet"
            },
            {
              "username": "sphinx",
              "algoname": "SpeechRecognition",
              "algolabel": "Speech Recognition",
              "language": "Java",
              "card_line": "This algorithm uses CMU Sphinx open source library to recognize speech in audio files that are uploaded to the Data API or Youtube videos that are licensed under Creative Commons.",
              "submitted_at": "2015-10-20T23:38:59.000Z",
              "doc_url": "https://algorithmia.com/algorithms/sphinx/SpeechRecognition",
              "api_url": "https://api.algorithmia.com/v1/algo/sphinx/SpeechRecognition"
            },
            {
              "username": "tags",
              "algoname": "ScrapeRSS",
              "algolabel": "Scrape RSS",
              "language": "Java",
              "card_line": "Return title, link and comments for each item in an RSS feed",
              "submitted_at": "2015-10-01T18:09:50.000Z",
              "doc_url": "https://algorithmia.com/algorithms/tags/ScrapeRSS",
              "api_url": "https://api.algorithmia.com/v1/algo/tags/ScrapeRSS"
            },
            {
              "username": "diego",
              "algoname": "AnalyzeTwitterUser",
              "algolabel": "Analyze Twitter User",
              "language": "Python 2.x",
              "card_line": "Analyze any Twitter User",
              "submitted_at": "2016-03-19T00:56:16.000Z",
              "doc_url": "https://algorithmia.com/algorithms/diego/AnalyzeTwitterUser",
              "api_url": "https://api.algorithmia.com/v1/algo/diego/AnalyzeTwitterUser"
            },
            {
              "username": "diego",
              "algoname": "RetrieveTweetsWithKeyword",
              "algolabel": "Retrieve Tweets With Keyword",
              "language": "Java",
              "card_line": "Search twitter for keyword and return tweets",
              "submitted_at": "2015-05-06T07:37:13.000Z",
              "doc_url": "https://algorithmia.com/algorithms/diego/RetrieveTweetsWithKeyword",
              "api_url": "https://api.algorithmia.com/v1/algo/diego/RetrieveTweetsWithKeyword"
            },
            {
              "username": "cindyxiaoxiaoli",
              "algoname": "KeywordExtraction",
              "algolabel": "Keyword Extraction",
              "language": "Python 3.x",
              "card_line": "Keyword/KeyPhrase Extraction from Sentence",
              "doc_url": "https://algorithmia.com/algorithms/cindyxiaoxiaoli/KeywordExtraction",
              "api_url": "https://api.algorithmia.com/v1/algo/cindyxiaoxiaoli/KeywordExtraction"
            },
            {
              "username": "infotrie",
              "algoname": "Sentiment_history",
              "algolabel": "Sentiment History (Company)",
              "language": "Python 2.x",
              "card_line": "Equity news sentiment for smarter investment decisions. News Sentiment is derived from millions of web sources.",
              "submitted_at": "2016-04-25T18:58:11.000Z",
              "doc_url": "https://algorithmia.com/algorithms/infotrie/Sentiment_history",
              "api_url": "https://api.algorithmia.com/v1/algo/infotrie/Sentiment_history"
            },
            {
              "username": "web",
              "algoname": "GetRecommendations",
              "algolabel": "Get Recommendations",
              "language": "Java",
              "card_line": "Get page recommendations for a given webpage",
              "submitted_at": "2015-09-17T01:02:13.000Z",
              "doc_url": "https://algorithmia.com/algorithms/web/GetRecommendations",
              "api_url": "https://api.algorithmia.com/v1/algo/web/GetRecommendations"
            },
            {
              "username": "ApacheOpenNLP",
              "algoname": "NamedEntityRecognition",
              "algolabel": "Named Entity Recognition",
              "language": "Java",
              "card_line": "Recognizes and returns entities in a given sentence",
              "submitted_at": "2015-05-01T02:07:31.000Z",
              "doc_url": "https://algorithmia.com/algorithms/ApacheOpenNLP/NamedEntityRecognition",
              "api_url": "https://api.algorithmia.com/v1/algo/ApacheOpenNLP/NamedEntityRecognition"
            },
            {
              "username": "sklearn",
              "algoname": "GeographicSpectralClustering",
              "algolabel": "Geographic Spectral Clustering",
              "language": "Python 2.x",
              "card_line": "Spectral clustering for geographic (lat/long) data.",
              "submitted_at": "2015-05-01T01:02:21.000Z",
              "doc_url": "https://algorithmia.com/algorithms/sklearn/GeographicSpectralClustering",
              "api_url": "https://api.algorithmia.com/v1/algo/sklearn/GeographicSpectralClustering"
            },
            {
              "username": "translation",
              "algoname": "GoogleTranslate",
              "algolabel": "Google Translate",
              "language": "Python 3.x",
              "card_line": "Translation between languages",
              "doc_url": "https://algorithmia.com/algorithms/translation/GoogleTranslate",
              "api_url": "https://api.algorithmia.com/v1/algo/translation/GoogleTranslate"
            },
            {
              "username": "deeplearning",
              "algoname": "ObjectDetectionCOCO",
              "algolabel": "ObjectDetection - COCO",
              "language": "Python 3.x",
              "card_line": "Detecting Objects in complex scenes",
              "doc_url": "https://algorithmia.com/algorithms/deeplearning/ObjectDetectionCOCO",
              "api_url": "https://api.algorithmia.com/v1/algo/deeplearning/ObjectDetectionCOCO"
            },
            {
              "username": "PetiteProgrammer",
              "algoname": "pythoncodeprediction",
              "algolabel": "Python Code Prediction",
              "language": "Python 3.x",
              "card_line": "Next word/sequence prediction for Python code",
              "doc_url": "https://algorithmia.com/algorithms/PetiteProgrammer/pythoncodeprediction",
              "api_url": "https://api.algorithmia.com/v1/algo/PetiteProgrammer/pythoncodeprediction"
            },
            {
              "username": "nus",
              "algoname": "SearchEngineAggregator",
              "algolabel": "SearchEngineAggregator",
              "language": "Java",
              "card_line": "Search across multiple Search engines at once",
              "submitted_at": "2015-10-07T06:10:19.000Z",
              "doc_url": "https://algorithmia.com/algorithms/nus/SearchEngineAggregator",
              "api_url": "https://api.algorithmia.com/v1/algo/nus/SearchEngineAggregator"
            },
            {
              "username": "mheimann",
              "algoname": "RecognizeFaces",
              "algolabel": "Recognize Faces",
              "language": "Python 2.x",
              "card_line": "Uses a trained face recognizer to identify faces.",
              "submitted_at": "2015-10-06T00:50:11.000Z",
              "doc_url": "https://algorithmia.com/algorithms/mheimann/RecognizeFaces",
              "api_url": "https://api.algorithmia.com/v1/algo/mheimann/RecognizeFaces"
            },
            {
              "username": "cv",
              "algoname": "FaceRecognition",
              "algolabel": "Face Recognition",
              "language": "Python 2.x",
              "card_line": "Train and recognize human faces",
              "doc_url": "https://algorithmia.com/algorithms/cv/FaceRecognition",
              "api_url": "https://api.algorithmia.com/v1/algo/cv/FaceRecognition"
            },
            {
              "username": "deeplearning",
              "algoname": "LargescaleImageMemorability",
              "algolabel": "Large-scale Image Memorability",
              "language": "Python 2.x",
              "card_line": "Returns how memorable the given image is.",
              "doc_url": "https://algorithmia.com/algorithms/deeplearning/LargescaleImageMemorability",
              "api_url": "https://api.algorithmia.com/v1/algo/deeplearning/LargescaleImageMemorability"
            },
            {
              "username": "ocr",
              "algoname": "ReceiptRecognition",
              "algolabel": "Receipt Recognition",
              "language": "Java",
              "card_line": "This algorithm reads a computer printed or handwritten receipt (containing only the total or tip portions) and returns the value written.",
              "submitted_at": "2016-01-11T18:08:20.000Z",
              "doc_url": "https://algorithmia.com/algorithms/ocr/ReceiptRecognition",
              "api_url": "https://api.algorithmia.com/v1/algo/ocr/ReceiptRecognition"
            },
            {
              "username": "ANaimi",
              "algoname": "GetTwitterFriends",
              "algolabel": "Get Twitter Friends",
              "language": "Java",
              "card_line": "Takes a screenName as input and returns an array of TwitterProfile as output.",
              "submitted_at": "2015-06-26T20:39:29.000Z",
              "doc_url": "https://algorithmia.com/algorithms/ANaimi/GetTwitterFriends",
              "api_url": "https://api.algorithmia.com/v1/algo/ANaimi/GetTwitterFriends"
            },
            {
              "username": "TimeSeries",
              "algoname": "SimpleMovingAverage",
              "algolabel": "Simple Moving Average",
              "language": "Java",
              "card_line": "Construct a Simple Moving Average.",
              "submitted_at": "2016-04-07T22:56:28.000Z",
              "doc_url": "https://algorithmia.com/algorithms/TimeSeries/SimpleMovingAverage",
              "api_url": "https://api.algorithmia.com/v1/algo/TimeSeries/SimpleMovingAverage"
            },
            {
              "username": "twitter",
              "algoname": "RetrieveTweetsWithKeyword",
              "algolabel": "Retrieve Tweets With Keyword",
              "language": "Python 2.x",
              "card_line": "Retrieve tweets that include keyword anywhere in their text.",
              "submitted_at": "2016-01-27T02:32:41.000Z",
              "doc_url": "https://algorithmia.com/algorithms/twitter/RetrieveTweetsWithKeyword",
              "api_url": "https://api.algorithmia.com/v1/algo/twitter/RetrieveTweetsWithKeyword"
            },
            {
              "username": "mtman",
              "algoname": "SentimentAnalysis",
              "algolabel": "SentimentAnalysis",
              "language": "Java",
              "card_line": "Sentiment analysis based on Apache Open NLP and SentiWordNet.",
              "submitted_at": "2015-10-22T08:35:57.000Z",
              "doc_url": "https://algorithmia.com/algorithms/mtman/SentimentAnalysis",
              "api_url": "https://api.algorithmia.com/v1/algo/mtman/SentimentAnalysis"
            },
            {
              "username": "Geo",
              "algoname": "ZipData",
              "algolabel": "ZipData",
              "language": "Java",
              "card_line": "Returns corresponding info for the given zip code",
              "submitted_at": "2015-07-23T01:06:33.000Z",
              "doc_url": "https://algorithmia.com/algorithms/Geo/ZipData",
              "api_url": "https://api.algorithmia.com/v1/algo/Geo/ZipData"
            },
            {
              "username": "opencv",
              "algoname": "CensorFace",
              "algolabel": "Censor Face",
              "language": "Java",
              "card_line": "Censors faces in given photo.",
              "submitted_at": "2015-06-29T21:47:10.000Z",
              "doc_url": "https://algorithmia.com/algorithms/opencv/CensorFace",
              "api_url": "https://api.algorithmia.com/v1/algo/opencv/CensorFace"
            },
            {
              "username": "mahout",
              "algoname": "Recommendation",
              "algolabel": "Recommendation",
              "language": "Java",
              "card_line": "Overview Eventually we will expand this to allow different parameters and options for neighborhood and similarity functi...",
              "submitted_at": "2015-06-29T21:29:16.000Z",
              "doc_url": "https://algorithmia.com/algorithms/mahout/Recommendation",
              "api_url": "https://api.algorithmia.com/v1/algo/mahout/Recommendation"
            },
            {
              "username": "Geo",
              "algoname": "GeosPy",
              "algolabel": "GeosPy: Geolocation Inference Made Easy",
              "language": "Python 3.x",
              "card_line": "Helps you infer geo-location data.",
              "doc_url": "https://algorithmia.com/algorithms/Geo/GeosPy",
              "api_url": "https://api.algorithmia.com/v1/algo/Geo/GeosPy"
            },
            {
              "username": "nlp",
              "algoname": "LDAMapper",
              "algolabel": "LDA Mapper",
              "language": "Python 2.x",
              "card_line": "Maps LDA topics to documents",
              "doc_url": "https://algorithmia.com/algorithms/nlp/LDAMapper",
              "api_url": "https://api.algorithmia.com/v1/algo/nlp/LDAMapper"
            },
            {
              "username": "deeplearning",
              "algoname": "RealEstateClassifier",
              "algolabel": "Real Estate Classifier",
              "language": "Python 2.x",
              "card_line": "Classifies real estate photos.",
              "doc_url": "https://algorithmia.com/algorithms/deeplearning/RealEstateClassifier",
              "api_url": "https://api.algorithmia.com/v1/algo/deeplearning/RealEstateClassifier"
            },
            {
              "username": "opencv",
              "algoname": "ObjectDetectionWithModels",
              "algolabel": "Object Detection With Models",
              "language": "Java",
              "card_line": "Introduction Core algorithm for taking in an image and a pretrained model and detecting objects for several OpenCV...",
              "submitted_at": "2016-01-12T18:40:33.000Z",
              "doc_url": "https://algorithmia.com/algorithms/opencv/ObjectDetectionWithModels",
              "api_url": "https://api.algorithmia.com/v1/algo/opencv/ObjectDetectionWithModels"
            },
            {
              "username": "nlp",
              "algoname": "LanguageIdentification",
              "algolabel": "Language Identification",
              "language": "Java",
              "card_line": "Guess what language based on input text",
              "submitted_at": "2015-11-20T18:58:52.000Z",
              "doc_url": "https://algorithmia.com/algorithms/nlp/LanguageIdentification",
              "api_url": "https://api.algorithmia.com/v1/algo/nlp/LanguageIdentification"
            },
            {
              "username": "nlp",
              "algoname": "KeywordSetSimilarity",
              "algolabel": "Keyword Set Similarity ",
              "language": "Java",
              "card_line": "Determines similarity between sets of weighted keywords",
              "submitted_at": "2015-09-27T02:01:11.000Z",
              "doc_url": "https://algorithmia.com/algorithms/nlp/KeywordSetSimilarity",
              "api_url": "https://api.algorithmia.com/v1/algo/nlp/KeywordSetSimilarity"
            },
            {
              "username": "alixaxel",
              "algoname": "CoordinatesToTimezone",
              "algolabel": "CoordinatesToTimezone",
              "language": "Java",
              "card_line": "Timezone information for a latitude-longitude location",
              "submitted_at": "2015-07-06T21:00:28.000Z",
              "doc_url": "https://algorithmia.com/algorithms/alixaxel/CoordinatesToTimezone",
              "api_url": "https://api.algorithmia.com/v1/algo/alixaxel/CoordinatesToTimezone"
            },
            {
              "username": "deeplearning",
              "algoname": "CrowdCounter",
              "algolabel": "Crowd Counter",
              "language": "Python 3.x",
              "card_line": "Count the number of people in an image. ",
              "doc_url": "https://algorithmia.com/algorithms/deeplearning/CrowdCounter",
              "api_url": "https://api.algorithmia.com/v1/algo/deeplearning/CrowdCounter"
            },
            {
              "username": "PetiteProgrammer",
              "algoname": "ImageClassifier",
              "algolabel": "Image Classifier",
              "language": "Python 3.x",
              "card_line": "Highly Accurate Image Classifier",
              "doc_url": "https://algorithmia.com/algorithms/PetiteProgrammer/ImageClassifier",
              "api_url": "https://api.algorithmia.com/v1/algo/PetiteProgrammer/ImageClassifier"
            },
            {
              "username": "media",
              "algoname": "SceneDetection",
              "algolabel": "Scene Detection",
              "language": "Python 2.x",
              "card_line": "Detects scene changes or cuts in videos.",
              "doc_url": "https://algorithmia.com/algorithms/media/SceneDetection",
              "api_url": "https://api.algorithmia.com/v1/algo/media/SceneDetection"
            },
            {
              "username": "media",
              "algoname": "VideoMetadataExtraction",
              "algolabel": "Video Metadata Extraction",
              "language": "Rust",
              "card_line": "Extract information from videos using image algorithms",
              "doc_url": "https://algorithmia.com/algorithms/media/VideoMetadataExtraction",
              "api_url": "https://api.algorithmia.com/v1/algo/media/VideoMetadataExtraction"
            },
            {
              "username": "nlp",
              "algoname": "AnalyzeGithubReadme",
              "algolabel": "Analyze Github Readme",
              "language": "Python 2.x",
              "card_line": "An algorithm for analyzing GitHub readmes and making recommendations for improving it.",
              "submitted_at": "2016-04-22T01:07:36.000Z",
              "doc_url": "https://algorithmia.com/algorithms/nlp/AnalyzeGithubReadme",
              "api_url": "https://api.algorithmia.com/v1/algo/nlp/AnalyzeGithubReadme"
            },
            {
              "username": "TimeSeries",
              "algoname": "TimeSeriesSummary",
              "algolabel": "Time Series Summary",
              "language": "Java",
              "card_line": "Calculate various statistics of a time series",
              "submitted_at": "2016-03-11T21:52:30.000Z",
              "doc_url": "https://algorithmia.com/algorithms/TimeSeries/TimeSeriesSummary",
              "api_url": "https://api.algorithmia.com/v1/algo/TimeSeries/TimeSeriesSummary"
            },
            {
              "username": "Geo",
              "algoname": "GeoHash",
              "algolabel": "GeoHash",
              "language": "Python 2.x",
              "card_line": "This algorithm provides a unique identifier for a given coordinate.",
              "submitted_at": "2016-03-10T00:48:13.000Z",
              "doc_url": "https://algorithmia.com/algorithms/Geo/GeoHash",
              "api_url": "https://api.algorithmia.com/v1/algo/Geo/GeoHash"
            },
            {
              "username": "Geo",
              "algoname": "GeoDistance",
              "algolabel": "Geo Distance",
              "language": "Python 2.x",
              "card_line": "Gives the distance between two coordinates.",
              "submitted_at": "2016-02-09T00:27:48.000Z",
              "doc_url": "https://algorithmia.com/algorithms/Geo/GeoDistance",
              "api_url": "https://api.algorithmia.com/v1/algo/Geo/GeoDistance"
            },
            {
              "username": "ANaimi",
              "algoname": "TechEventsFinder",
              "algolabel": "Tech Events Finder",
              "language": "Java",
              "card_line": "Returns a list of future tech events from from Meetup and Eventbrite.",
              "submitted_at": "2015-06-26T23:55:50.000Z",
              "doc_url": "https://algorithmia.com/algorithms/ANaimi/TechEventsFinder",
              "api_url": "https://api.algorithmia.com/v1/algo/ANaimi/TechEventsFinder"
            }
          ]
        }
      },
      {
        "request": {
          "url": "/meta/algorithms",
          "method": "GET",
          "headers": {
            "host": "algorithmia.com",
            "connection": "keep-alive",
            "pragma": "no-cache",
            "cache-control": "no-cache",
            "accept": "application/json, text/plain, */*",
            "dnt": "1",
            "x-xsrf-token": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "cors",
            "referer": "https://algorithmia.com/algorithms",
            "accept-encoding": "gzip, deflate, br",
            "accept-language": "en-US,en;q=0.9",
            "cookie": "ajs_group_id=null; ajs_anonymous_id=%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22; _ga=GA1.2.1872580011.1571235636; _fbp=fb.1.1571235636317.604574724; intercom-id-c9fj6354=01941621-342b-4320-ad75-53826b5a002c; hubspotutk=105fad8a9b12bfed67330a0dbfe12c61; _gid=GA1.2.1843278152.1572282100; __zlcmid=uzie5dAUbB300Y; __hstc=69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3; __hssrc=1; fs_intercom=4655074328608768:4513847218700288; XSRF-TOKEN=0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da; referrer=www.google.com; landing_page=https://algorithmia.com/; signup_session=true; ajs_user_id=%22acunniffe%22; fs_uid=rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636; new-algo-language=scala; __hssc=69686351.5.1572357353053; intercom-session-c9fj6354=L08zdks3K1FOZEs0NngyR2NDQjBxN3VMb1J3dE1QZ0t4N2piYXY5ZmlNWFNVMkxseFhidkxhZ0g4QStWV2hYay0tUUtjQUtFaUZvLzJIZ0drSFdnRjM0UT09--fc3e700881b2cd1507c47ce6533f5b502d54fb7c; ALGO_SESSION=ebee5e9d2f4b622441d7ec05e355f3e1b7290838-last-access=2019-10-29T14%3A07%3A05.187Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "cookies": {
            "ajs_group_id": "null",
            "ajs_anonymous_id": "%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22",
            "_ga": "GA1.2.1872580011.1571235636",
            "_fbp": "fb.1.1571235636317.604574724",
            "intercom-id-c9fj6354": "01941621-342b-4320-ad75-53826b5a002c",
            "hubspotutk": "105fad8a9b12bfed67330a0dbfe12c61",
            "_gid": "GA1.2.1843278152.1572282100",
            "__zlcmid": "uzie5dAUbB300Y",
            "__hstc": "69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3",
            "__hssrc": "1",
            "fs_intercom": "4655074328608768:4513847218700288",
            "XSRF-TOKEN": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "referrer": "www.google.com",
            "landing_page": "https://algorithmia.com/",
            "signup_session": "true",
            "ajs_user_id": "%22acunniffe%22",
            "fs_uid": "rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636",
            "new-algo-language": "scala",
            "__hssc": "69686351.5.1572357353053",
            "intercom-session-c9fj6354": "L08zdks3K1FOZEs0NngyR2NDQjBxN3VMb1J3dE1QZ0t4N2piYXY5ZmlNWFNVMkxseFhidkxhZ0g4QStWV2hYay0tUUtjQUtFaUZvLzJIZ0drSFdnRjM0UT09--fc3e700881b2cd1507c47ce6533f5b502d54fb7c",
            "ALGO_SESSION": "ebee5e9d2f4b622441d7ec05e355f3e1b7290838-last-access=2019-10-29T14%3A07%3A05.187Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "queryParameters": {
            "order": "most_called",
            "tag": "machine-learning"
          }
        },
        "response": {
          "statusCode": 200,
          "headers": {
            "content-encoding": "gzip",
            "content-type": "application/json; charset=utf-8",
            "date": "Tue, 29 Oct 2019 14:07:11 GMT",
            "set-cookie": "ALGO_SESSION=6c484e246e621c6de6aaa248bec27175feef7fd0-last-access=2019-10-29T14%3A07%3A11.783Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3; Max-Age=86400; Expires=Wed, 30 Oct 2019 14:07:11 GMT; Path=/; Domain=algorithmia.com; Secure; HTTPOnly",
            "strict-transport-security": "max-age=86400; includeSubDomains",
            "vary": "Accept-Encoding",
            "x-content-type-options": "nosniff",
            "x-frame-options": "DENY",
            "content-length": "6125",
            "connection": "keep-alive"
          },
          "body": [
            {
              "username": "PetiteProgrammer",
              "algoname": "ProgrammingLanguageIdentification",
              "algolabel": "Programming Language Identification",
              "language": "Python 3.x",
              "card_line": "Detect the programming language of source code",
              "doc_url": "https://algorithmia.com/algorithms/PetiteProgrammer/ProgrammingLanguageIdentification",
              "api_url": "https://api.algorithmia.com/v1/algo/PetiteProgrammer/ProgrammingLanguageIdentification"
            },
            {
              "username": "dlib",
              "algoname": "FaceDetection",
              "algolabel": "Face Detection",
              "language": "Python 2.x",
              "card_line": "This algorithm detects human faces in given images.",
              "doc_url": "https://algorithmia.com/algorithms/dlib/FaceDetection",
              "api_url": "https://api.algorithmia.com/v1/algo/dlib/FaceDetection"
            },
            {
              "username": "nlp",
              "algoname": "Doc2Vec",
              "algolabel": "Doc2Vec",
              "language": "Python 2.x",
              "card_line": "Vectorize documents of arbitrary length",
              "doc_url": "https://algorithmia.com/algorithms/nlp/Doc2Vec",
              "api_url": "https://api.algorithmia.com/v1/algo/nlp/Doc2Vec"
            },
            {
              "username": "classification",
              "algoname": "GenderByName",
              "algolabel": "Gender By Name (First, Last or Full Name) Classifier",
              "language": "Python 3.x",
              "card_line": "Fast gender classifier by name. Classification works with first and last name (order-independent); last name optional.",
              "doc_url": "https://algorithmia.com/algorithms/classification/GenderByName",
              "api_url": "https://api.algorithmia.com/v1/algo/classification/GenderByName"
            },
            {
              "username": "paranoia",
              "algoname": "FpGrowth",
              "algolabel": "FpGrowth",
              "language": "Java",
              "card_line": "A scalable method for finding frequent patterns within large datasets",
              "submitted_at": "2015-12-07T00:08:45.000Z",
              "doc_url": "https://algorithmia.com/algorithms/paranoia/FpGrowth",
              "api_url": "https://api.algorithmia.com/v1/algo/paranoia/FpGrowth"
            },
            {
              "username": "deeplearning",
              "algoname": "ObjectDetectionCOCO",
              "algolabel": "ObjectDetection - COCO",
              "language": "Python 3.x",
              "card_line": "Detecting Objects in complex scenes",
              "doc_url": "https://algorithmia.com/algorithms/deeplearning/ObjectDetectionCOCO",
              "api_url": "https://api.algorithmia.com/v1/algo/deeplearning/ObjectDetectionCOCO"
            },
            {
              "username": "nlp",
              "algoname": "DocumentClassifier",
              "algolabel": "Document Classifier",
              "language": "Scala",
              "card_line": "Classify or Recommend documents with ease",
              "doc_url": "https://algorithmia.com/algorithms/nlp/DocumentClassifier",
              "api_url": "https://api.algorithmia.com/v1/algo/nlp/DocumentClassifier"
            },
            {
              "username": "PetiteProgrammer",
              "algoname": "TextSimilarity",
              "algolabel": "Text Similarity",
              "language": "Python 3.x",
              "card_line": "Find the most similar text files within a collection of documents",
              "doc_url": "https://algorithmia.com/algorithms/PetiteProgrammer/TextSimilarity",
              "api_url": "https://api.algorithmia.com/v1/algo/PetiteProgrammer/TextSimilarity"
            },
            {
              "username": "weka",
              "algoname": "WekaClassification",
              "algolabel": "Weka Classification",
              "language": "Java",
              "card_line": "This is the main algorithm that all of the Weka classification algorithms call.",
              "submitted_at": "2015-10-02T20:39:49.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/WekaClassification",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/WekaClassification"
            },
            {
              "username": "mahout",
              "algoname": "DigitRecognizer",
              "algolabel": "Digit Recognizer",
              "language": "Java",
              "card_line": "Applies a random forest model trained on the MNIST handwritten digit dataset to a 28 by 28 grayscale pixel grid, which is input as a double array of length 784.",
              "submitted_at": "2015-03-11T22:41:52.000Z",
              "doc_url": "https://algorithmia.com/algorithms/mahout/DigitRecognizer",
              "api_url": "https://api.algorithmia.com/v1/algo/mahout/DigitRecognizer"
            },
            {
              "username": "mahout",
              "algoname": "RandomForestApply",
              "algolabel": "Random Forest Apply",
              "language": "Java",
              "card_line": "Apply trained Mahout Random Forest Classifier to data",
              "submitted_at": "2015-03-11T21:13:18.000Z",
              "doc_url": "https://algorithmia.com/algorithms/mahout/RandomForestApply",
              "api_url": "https://api.algorithmia.com/v1/algo/mahout/RandomForestApply"
            },
            {
              "username": "deeplearning",
              "algoname": "Parsey",
              "algolabel": "Parsey McParseface",
              "language": "Scala",
              "card_line": "Parse sentences with ease.",
              "doc_url": "https://algorithmia.com/algorithms/deeplearning/Parsey",
              "api_url": "https://api.algorithmia.com/v1/algo/deeplearning/Parsey"
            },
            {
              "username": "character_recognition",
              "algoname": "tesseract",
              "algolabel": "tesseract",
              "language": "Python 2.x",
              "card_line": "extracts text with deep learning",
              "doc_url": "https://algorithmia.com/algorithms/character_recognition/tesseract",
              "api_url": "https://api.algorithmia.com/v1/algo/character_recognition/tesseract"
            },
            {
              "username": "PetiteProgrammer",
              "algoname": "NamedEntityRecognition",
              "algolabel": "Named Entity Recognition (Detection of Persons, Dates, Locations and much more)",
              "language": "Python 3.x",
              "card_line": "Extracts entities out of text such as persons and organizations, with high precision. ",
              "doc_url": "https://algorithmia.com/algorithms/PetiteProgrammer/NamedEntityRecognition",
              "api_url": "https://api.algorithmia.com/v1/algo/PetiteProgrammer/NamedEntityRecognition"
            },
            {
              "username": "weka",
              "algoname": "DigitRecognition",
              "algolabel": "Digit Recognition",
              "language": "Java",
              "card_line": "The Digit Recognition algorithm that uses a Random Forest model trained on 50000 samples obtained from the MNIST digits dataset.",
              "submitted_at": "2015-05-01T01:23:58.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/DigitRecognition",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/DigitRecognition"
            },
            {
              "username": "bkyan",
              "algoname": "StyleThief",
              "algolabel": "StyleThief (Open Source)",
              "language": "Python 2.x",
              "card_line": "Anish Athalye's Neural Style Transfer Using TensorFlow",
              "doc_url": "https://algorithmia.com/algorithms/bkyan/StyleThief",
              "api_url": "https://api.algorithmia.com/v1/algo/bkyan/StyleThief"
            },
            {
              "username": "PetiteProgrammer",
              "algoname": "NumberExtractor",
              "algolabel": "NumberExtractor",
              "language": "Python 3.x",
              "card_line": "Extracts numbers (positive, negative and floats) from raw text.",
              "doc_url": "https://algorithmia.com/algorithms/PetiteProgrammer/NumberExtractor",
              "api_url": "https://api.algorithmia.com/v1/algo/PetiteProgrammer/NumberExtractor"
            },
            {
              "username": "PetiteProgrammer",
              "algoname": "DateExtractor",
              "algolabel": "DateExtractor",
              "language": "Python 3.x",
              "card_line": "Extracts dates from raw text",
              "doc_url": "https://algorithmia.com/algorithms/PetiteProgrammer/DateExtractor",
              "api_url": "https://api.algorithmia.com/v1/algo/PetiteProgrammer/DateExtractor"
            },
            {
              "username": "media",
              "algoname": "ContentAwareResize",
              "algolabel": "Content Aware Resize",
              "language": "Python 2.x",
              "card_line": "Resize images automatically, without removing important features such as faces",
              "doc_url": "https://algorithmia.com/algorithms/media/ContentAwareResize",
              "api_url": "https://api.algorithmia.com/v1/algo/media/ContentAwareResize"
            },
            {
              "username": "kenny",
              "algoname": "WekaCluster",
              "algolabel": "Weka Cluster",
              "language": "Java",
              "card_line": "k-means clustering using the Weka machine learning library.",
              "submitted_at": "2015-04-22T01:40:46.000Z",
              "doc_url": "https://algorithmia.com/algorithms/kenny/WekaCluster",
              "api_url": "https://api.algorithmia.com/v1/algo/kenny/WekaCluster"
            },
            {
              "username": "mheimann",
              "algoname": "RecognizeFaces",
              "algolabel": "Recognize Faces",
              "language": "Python 2.x",
              "card_line": "Uses a trained face recognizer to identify faces.",
              "submitted_at": "2015-10-06T00:50:11.000Z",
              "doc_url": "https://algorithmia.com/algorithms/mheimann/RecognizeFaces",
              "api_url": "https://api.algorithmia.com/v1/algo/mheimann/RecognizeFaces"
            },
            {
              "username": "guardlogic",
              "algoname": "AdultImageClassifier",
              "algolabel": "AdultImageClassifier",
              "language": "Python 2.x",
              "card_line": "  Assesses if an image contains \"Adult\" content where the term \"Adult\" is defined as \"sexually explicit\".",
              "doc_url": "https://algorithmia.com/algorithms/guardlogic/AdultImageClassifier",
              "api_url": "https://api.algorithmia.com/v1/algo/guardlogic/AdultImageClassifier"
            },
            {
              "username": "cv",
              "algoname": "FaceRecognition",
              "algolabel": "Face Recognition",
              "language": "Python 2.x",
              "card_line": "Train and recognize human faces",
              "doc_url": "https://algorithmia.com/algorithms/cv/FaceRecognition",
              "api_url": "https://api.algorithmia.com/v1/algo/cv/FaceRecognition"
            },
            {
              "username": "character_recognition",
              "algoname": "TextDetectionCTPN",
              "algolabel": "Text Detection (CTPN)",
              "language": "Python 2.x",
              "card_line": "detect text or words in any kind of image including both scanned documents and natural images.",
              "doc_url": "https://algorithmia.com/algorithms/character_recognition/TextDetectionCTPN",
              "api_url": "https://api.algorithmia.com/v1/algo/character_recognition/TextDetectionCTPN"
            },
            {
              "username": "web",
              "algoname": "MaliciousDomainClassifier",
              "algolabel": "Malicious Domain Classifier",
              "language": "Java",
              "card_line": "Determine whether a domain name is safe or malicious",
              "doc_url": "https://algorithmia.com/algorithms/web/MaliciousDomainClassifier",
              "api_url": "https://api.algorithmia.com/v1/algo/web/MaliciousDomainClassifier"
            },
            {
              "username": "character_recognition",
              "algoname": "NaturalTextNet",
              "algolabel": "Natural Text Net",
              "language": "Python 3.x",
              "card_line": "Extracts text from natural scene images",
              "doc_url": "https://algorithmia.com/algorithms/character_recognition/NaturalTextNet",
              "api_url": "https://api.algorithmia.com/v1/algo/character_recognition/NaturalTextNet"
            },
            {
              "username": "PetiteProgrammer",
              "algoname": "pythoncodeprediction",
              "algolabel": "Python Code Prediction",
              "language": "Python 3.x",
              "card_line": "Next word/sequence prediction for Python code",
              "doc_url": "https://algorithmia.com/algorithms/PetiteProgrammer/pythoncodeprediction",
              "api_url": "https://api.algorithmia.com/v1/algo/PetiteProgrammer/pythoncodeprediction"
            },
            {
              "username": "sfw",
              "algoname": "VideoNudityDetection",
              "algolabel": "Video Nudity Detection",
              "language": "Python 2.x",
              "card_line": "Detect Nudity in Video",
              "doc_url": "https://algorithmia.com/algorithms/sfw/VideoNudityDetection",
              "api_url": "https://api.algorithmia.com/v1/algo/sfw/VideoNudityDetection"
            },
            {
              "username": "character_recognition",
              "algoname": "SmartTextExtraction",
              "algolabel": "Smart Text Extraction",
              "language": "Scala",
              "card_line": "Extract text the smart way",
              "doc_url": "https://algorithmia.com/algorithms/character_recognition/SmartTextExtraction",
              "api_url": "https://api.algorithmia.com/v1/algo/character_recognition/SmartTextExtraction"
            },
            {
              "username": "wuhuikai",
              "algoname": "A2RL_online",
              "algolabel": "A2RL: Auto Image Cropping",
              "language": "Python 3.x",
              "card_line": "Auto-crop given image to improve the aesthetic.",
              "doc_url": "https://algorithmia.com/algorithms/wuhuikai/A2RL_online",
              "api_url": "https://api.algorithmia.com/v1/algo/wuhuikai/A2RL_online"
            },
            {
              "username": "conctest",
              "algoname": "DigitRecognition",
              "algolabel": "Digit Recognition",
              "language": "Python 2.x",
              "card_line": "Recognizes handwritten digits using a pre trained  Convolutional Neural Network .",
              "submitted_at": "2015-06-22T15:39:45.000Z",
              "doc_url": "https://algorithmia.com/algorithms/conctest/DigitRecognition",
              "api_url": "https://api.algorithmia.com/v1/algo/conctest/DigitRecognition"
            },
            {
              "username": "PetiteProgrammer",
              "algoname": "ImageClassifier",
              "algolabel": "Image Classifier",
              "language": "Python 3.x",
              "card_line": "Highly Accurate Image Classifier",
              "doc_url": "https://algorithmia.com/algorithms/PetiteProgrammer/ImageClassifier",
              "api_url": "https://api.algorithmia.com/v1/algo/PetiteProgrammer/ImageClassifier"
            },
            {
              "username": "Aluxian",
              "algoname": "AffinityAnalysisFPGrowth",
              "algolabel": "Affinity Analysis for Market Basket Recommendation (FP-Growth)",
              "language": "Java",
              "card_line": "Affinity analysis is an analytical technique that aims to discover relationships between activities and preferences that pertain to specific individuals.",
              "submitted_at": "2015-10-20T21:44:38.000Z",
              "doc_url": "https://algorithmia.com/algorithms/Aluxian/AffinityAnalysisFPGrowth",
              "api_url": "https://api.algorithmia.com/v1/algo/Aluxian/AffinityAnalysisFPGrowth"
            },
            {
              "username": "Wolverine",
              "algoname": "FastAnomalydetection",
              "algolabel": "Fast Anomaly Detection",
              "language": "Python 3.x",
              "card_line": "A fast Anomaly detection algorithm best used for IoT, Fraud detection and IT Ops",
              "doc_url": "https://algorithmia.com/algorithms/Wolverine/FastAnomalydetection",
              "api_url": "https://api.algorithmia.com/v1/algo/Wolverine/FastAnomalydetection"
            },
            {
              "username": "weka",
              "algoname": "RandomForest",
              "algolabel": "RandomForest",
              "language": "Java",
              "card_line": "This is the RandomForest classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/trees/RandomForest.html",
              "submitted_at": "2015-05-01T01:13:46.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/RandomForest",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/RandomForest"
            },
            {
              "username": "tags",
              "algoname": "RecommendGithub",
              "algolabel": "Recommend Github",
              "language": "Java",
              "card_line": "Recommend a github repos based on a given one",
              "submitted_at": "2016-02-02T23:35:11.000Z",
              "doc_url": "https://algorithmia.com/algorithms/tags/RecommendGithub",
              "api_url": "https://api.algorithmia.com/v1/algo/tags/RecommendGithub"
            },
            {
              "username": "PetiteProgrammer",
              "algoname": "NaturalLanguageUnderstanding",
              "algolabel": "Natural Language Understanding",
              "language": "Python 3.x",
              "card_line": "Understand intents, time, etc. from natural language ",
              "doc_url": "https://algorithmia.com/algorithms/PetiteProgrammer/NaturalLanguageUnderstanding",
              "api_url": "https://api.algorithmia.com/v1/algo/PetiteProgrammer/NaturalLanguageUnderstanding"
            },
            {
              "username": "cmartines",
              "algoname": "Chartie",
              "algolabel": "Chartie",
              "language": "Java",
              "card_line": "See beyond the numbers The new free web API that finds the  trend event  from your  numerical arrays For more detail : w...",
              "submitted_at": "2015-03-15T15:24:44.000Z",
              "doc_url": "https://algorithmia.com/algorithms/cmartines/Chartie",
              "api_url": "https://api.algorithmia.com/v1/algo/cmartines/Chartie"
            },
            {
              "username": "ryval",
              "algoname": "LogisticRegression",
              "algolabel": "LogisticRegression",
              "language": "Python 2.x",
              "card_line": "Train a Logistic Regression model and use it to predict unknown classifiers.",
              "submitted_at": "2015-08-20T23:24:10.000Z",
              "doc_url": "https://algorithmia.com/algorithms/ryval/LogisticRegression",
              "api_url": "https://api.algorithmia.com/v1/algo/ryval/LogisticRegression"
            },
            {
              "username": "sklearn",
              "algoname": "GeographicSpectralClustering",
              "algolabel": "Geographic Spectral Clustering",
              "language": "Python 2.x",
              "card_line": "Spectral clustering for geographic (lat/long) data.",
              "submitted_at": "2015-05-01T01:02:21.000Z",
              "doc_url": "https://algorithmia.com/algorithms/sklearn/GeographicSpectralClustering",
              "api_url": "https://api.algorithmia.com/v1/algo/sklearn/GeographicSpectralClustering"
            },
            {
              "username": "mahout",
              "algoname": "Recommendation",
              "algolabel": "Recommendation",
              "language": "Java",
              "card_line": "Overview Eventually we will expand this to allow different parameters and options for neighborhood and similarity functi...",
              "submitted_at": "2015-06-29T21:29:16.000Z",
              "doc_url": "https://algorithmia.com/algorithms/mahout/Recommendation",
              "api_url": "https://api.algorithmia.com/v1/algo/mahout/Recommendation"
            },
            {
              "username": "berlius",
              "algoname": "colorize",
              "algolabel": "colorize",
              "language": "Python 2.x",
              "card_line": "Colorize black and white images with Berkeley model",
              "doc_url": "https://algorithmia.com/algorithms/berlius/colorize",
              "api_url": "https://api.algorithmia.com/v1/algo/berlius/colorize"
            },
            {
              "username": "dbgannon",
              "algoname": "SciDocClassifier",
              "algolabel": "SciDocClassifier",
              "language": "Python 3.x",
              "card_line": "Overview SciDocClassifier uses a ML Model created by Gensim Doc2vec to classify scientific abstracts into five...",
              "doc_url": "https://algorithmia.com/algorithms/dbgannon/SciDocClassifier",
              "api_url": "https://api.algorithmia.com/v1/algo/dbgannon/SciDocClassifier"
            },
            {
              "username": "mheimann",
              "algoname": "TrainFaceRecognizer",
              "algolabel": "Train Face Recognizer",
              "language": "Python 2.x",
              "card_line": "Trains a face recognizer from a labeled set of faces.",
              "submitted_at": "2015-08-08T00:03:29.000Z",
              "doc_url": "https://algorithmia.com/algorithms/mheimann/TrainFaceRecognizer",
              "api_url": "https://api.algorithmia.com/v1/algo/mheimann/TrainFaceRecognizer"
            },
            {
              "username": "mgomezm",
              "algoname": "AccelerometerClassifier",
              "algolabel": "AccelerometerClassifier",
              "language": "Java",
              "card_line": "Given x,y,z accelerometer readings, will determine whther the user is Stationary, Walking, or Running.",
              "submitted_at": "2015-10-19T21:17:41.000Z",
              "doc_url": "https://algorithmia.com/algorithms/mgomezm/AccelerometerClassifier",
              "api_url": "https://api.algorithmia.com/v1/algo/mgomezm/AccelerometerClassifier"
            },
            {
              "username": "wuhuikai",
              "algoname": "A2RL",
              "algolabel": "A2RL: Auto Image Cropping",
              "language": "Python 3.x",
              "card_line": "Auto-crop given image to improve the aesthetic.",
              "doc_url": "https://algorithmia.com/algorithms/wuhuikai/A2RL",
              "api_url": "https://api.algorithmia.com/v1/algo/wuhuikai/A2RL"
            },
            {
              "username": "lucianosantabrigida",
              "algoname": "ptwiki2vec",
              "algolabel": "ptwiki2vec",
              "language": "Python 3.x",
              "card_line": "[WIP] portuguese wikipedia vectors",
              "doc_url": "https://algorithmia.com/algorithms/lucianosantabrigida/ptwiki2vec",
              "api_url": "https://api.algorithmia.com/v1/algo/lucianosantabrigida/ptwiki2vec"
            },
            {
              "username": "pappacena",
              "algoname": "kmeans",
              "algolabel": "k-means",
              "language": "Python 3.x",
              "card_line": "Simple k-means algorithm implementation",
              "doc_url": "https://algorithmia.com/algorithms/pappacena/kmeans",
              "api_url": "https://api.algorithmia.com/v1/algo/pappacena/kmeans"
            },
            {
              "username": "imageclassification",
              "algoname": "ResNetFeatureExtraction",
              "algolabel": "ResNet Feature Extraction",
              "language": "Python 3.x",
              "card_line": " Extract ResNet feature vectors from images. ",
              "doc_url": "https://algorithmia.com/algorithms/imageclassification/ResNetFeatureExtraction",
              "api_url": "https://api.algorithmia.com/v1/algo/imageclassification/ResNetFeatureExtraction"
            },
            {
              "username": "weka",
              "algoname": "NaiveBayes",
              "algolabel": "NaiveBayes",
              "language": "Java",
              "card_line": "This is the NaiveBayes classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/bayes/NaiveBayes.html",
              "submitted_at": "2015-05-01T01:32:40.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/NaiveBayes",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/NaiveBayes"
            },
            {
              "username": "jagiella",
              "algoname": "BirthDeathProcess",
              "algolabel": "BirthDeathProcess",
              "language": "Java",
              "submitted_at": "2015-10-19T21:52:34.000Z",
              "doc_url": "https://algorithmia.com/algorithms/jagiella/BirthDeathProcess",
              "api_url": "https://api.algorithmia.com/v1/algo/jagiella/BirthDeathProcess"
            },
            {
              "username": "thatguy2048",
              "algoname": "SimpleKNN",
              "algolabel": "SimpleKNN",
              "language": "Java",
              "card_line": "This is a simple KNN classifier which accepts a given number of training data points, classes for those points and sample points to evaluate.",
              "submitted_at": "2015-10-19T21:35:10.000Z",
              "doc_url": "https://algorithmia.com/algorithms/thatguy2048/SimpleKNN",
              "api_url": "https://api.algorithmia.com/v1/algo/thatguy2048/SimpleKNN"
            },
            {
              "username": "PetiteProgrammer",
              "algoname": "AutoComplete",
              "algolabel": "AutoComplete (Auto Complete, Next Word Prediction)",
              "language": "Python 3.x",
              "card_line": "Completes sentences based on user input ",
              "doc_url": "https://algorithmia.com/algorithms/PetiteProgrammer/AutoComplete",
              "api_url": "https://api.algorithmia.com/v1/algo/PetiteProgrammer/AutoComplete"
            },
            {
              "username": "imageclassification",
              "algoname": "ImageClassificationTrainer",
              "algolabel": "Image Classification Trainer",
              "language": "Python 3.x",
              "card_line": " Train fine-tuned image classifiers with transfer learning. ",
              "doc_url": "https://algorithmia.com/algorithms/imageclassification/ImageClassificationTrainer",
              "api_url": "https://api.algorithmia.com/v1/algo/imageclassification/ImageClassificationTrainer"
            },
            {
              "username": "buliginleo",
              "algoname": "NudityCheck",
              "algolabel": "NudityCheck",
              "language": "Python 3.x",
              "card_line": "Free neural network for check nudity by link",
              "doc_url": "https://algorithmia.com/algorithms/buliginleo/NudityCheck",
              "api_url": "https://api.algorithmia.com/v1/algo/buliginleo/NudityCheck"
            },
            {
              "username": "ml",
              "algoname": "LearnHMM",
              "algolabel": "LearnHMM",
              "language": "Java",
              "card_line": "Learns a Hidden Markov Model (HMM) based on a series of example state transitions.",
              "submitted_at": "2015-10-19T21:17:18.000Z",
              "doc_url": "https://algorithmia.com/algorithms/ml/LearnHMM",
              "api_url": "https://api.algorithmia.com/v1/algo/ml/LearnHMM"
            },
            {
              "username": "sklearn",
              "algoname": "GeographicOutlierDetection",
              "algolabel": "Geographic Outlier Detection",
              "language": "Python 2.x",
              "card_line": "This algorithm finds the most unexpected events in a set of geographic events relative to some reference set of events.",
              "submitted_at": "2015-05-04T20:16:28.000Z",
              "doc_url": "https://algorithmia.com/algorithms/sklearn/GeographicOutlierDetection",
              "api_url": "https://api.algorithmia.com/v1/algo/sklearn/GeographicOutlierDetection"
            },
            {
              "username": "poze",
              "algoname": "poseEstimation_v2",
              "algolabel": "Pose Estimation",
              "language": "Python 3.x",
              "card_line": " Detect body pose for multiple people on image.",
              "doc_url": "https://algorithmia.com/algorithms/poze/poseEstimation_v2",
              "api_url": "https://api.algorithmia.com/v1/algo/poze/poseEstimation_v2"
            },
            {
              "username": "weka",
              "algoname": "CsvToArff",
              "algolabel": "CsvToArff",
              "language": "Java",
              "card_line": "Converts .csv",
              "submitted_at": "2015-10-04T06:26:04.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/CsvToArff",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/CsvToArff"
            },
            {
              "username": "jtbandes",
              "algoname": "LinearRegression",
              "algolabel": "LinearRegression",
              "language": "Java",
              "card_line": "Performs a least-squares regression with one independent variable.",
              "submitted_at": "2015-10-19T21:19:41.000Z",
              "doc_url": "https://algorithmia.com/algorithms/jtbandes/LinearRegression",
              "api_url": "https://api.algorithmia.com/v1/algo/jtbandes/LinearRegression"
            },
            {
              "username": "ml",
              "algoname": "ClickStreamTransitions",
              "algolabel": "Click Stream Transitions",
              "language": "Java",
              "card_line": "Returns the top 5 most \"interesting\" transitions learned by the Hidden Markov Model.",
              "submitted_at": "2015-10-19T21:17:26.000Z",
              "doc_url": "https://algorithmia.com/algorithms/ml/ClickStreamTransitions",
              "api_url": "https://api.algorithmia.com/v1/algo/ml/ClickStreamTransitions"
            },
            {
              "username": "weka",
              "algoname": "KStar",
              "algolabel": "KStar",
              "language": "Java",
              "card_line": "This is the KStar classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/lazy/KStar.html",
              "submitted_at": "2015-05-01T01:30:46.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/KStar",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/KStar"
            },
            {
              "username": "weka",
              "algoname": "BayesianLogisticRegression",
              "algolabel": "BayesianLogisticRegression",
              "language": "Java",
              "card_line": "This is the BayesianLogisticRegression classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/bayes/BayesianLogisticRegression.html",
              "submitted_at": "2015-05-01T01:33:01.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/BayesianLogisticRegression",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/BayesianLogisticRegression"
            },
            {
              "username": "weka",
              "algoname": "NaiveBayesSimple",
              "algolabel": "NaiveBayesSimple",
              "language": "Java",
              "card_line": "This is the NaiveBayesSimple classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/bayes/NaiveBayesSimple.html",
              "submitted_at": "2015-05-01T01:32:25.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/NaiveBayesSimple",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/NaiveBayesSimple"
            },
            {
              "username": "weka",
              "algoname": "ZeroR",
              "algolabel": "ZeroR",
              "language": "Java",
              "card_line": "This is the ZeroR classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/rules/ZeroR.html",
              "submitted_at": "2015-05-01T01:16:48.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/ZeroR",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/ZeroR"
            },
            {
              "username": "mahout",
              "algoname": "RandomForestTrain",
              "algolabel": "Random Forest Train",
              "language": "Java",
              "card_line": "Trains a Mahout random forest classifier.",
              "submitted_at": "2015-03-11T21:09:01.000Z",
              "doc_url": "https://algorithmia.com/algorithms/mahout/RandomForestTrain",
              "api_url": "https://api.algorithmia.com/v1/algo/mahout/RandomForestTrain"
            },
            {
              "username": "weka",
              "algoname": "LogitBoost",
              "algolabel": "Logit Boost",
              "language": "Java",
              "card_line": "This is the LogitBoost classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/meta/LogitBoost.html",
              "submitted_at": "2015-10-02T19:03:17.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/LogitBoost",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/LogitBoost"
            },
            {
              "username": "opencv",
              "algoname": "SVM",
              "algolabel": "SVM",
              "language": "Java",
              "card_line": "A basic interface to OpenCV's SVM, as explained in http://docs.opencv.org/java/org/opencv/ml/CvSVM.html .",
              "submitted_at": "2015-05-01T01:58:46.000Z",
              "doc_url": "https://algorithmia.com/algorithms/opencv/SVM",
              "api_url": "https://api.algorithmia.com/v1/algo/opencv/SVM"
            },
            {
              "username": "mlolson",
              "algoname": "LinearRegression",
              "algolabel": "LinearRegression",
              "language": "Java",
              "submitted_at": "2015-10-19T21:17:10.000Z",
              "doc_url": "https://algorithmia.com/algorithms/mlolson/LinearRegression",
              "api_url": "https://api.algorithmia.com/v1/algo/mlolson/LinearRegression"
            },
            {
              "username": "weka",
              "algoname": "SimpleKMeansClusterer",
              "algolabel": "SimpleKMeansClusterer",
              "language": "Java",
              "card_line": "Uses SimpleKMeans clusterer, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/clusterers/SimpleKMeans.html",
              "submitted_at": "2015-06-29T21:55:45.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/SimpleKMeansClusterer",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/SimpleKMeansClusterer"
            },
            {
              "username": "paranoia",
              "algoname": "OrdinaryLeastSquares",
              "algolabel": "OrdinaryLeastSquares",
              "language": "Java",
              "submitted_at": "2015-10-19T21:15:20.000Z",
              "doc_url": "https://algorithmia.com/algorithms/paranoia/OrdinaryLeastSquares",
              "api_url": "https://api.algorithmia.com/v1/algo/paranoia/OrdinaryLeastSquares"
            },
            {
              "username": "weka",
              "algoname": "StringToWordVector",
              "algolabel": "StringToWordVector",
              "language": "Java",
              "card_line": "This is the StringToWordVector filter, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/filters/unsupervised/attribute/StringToWordVector.html",
              "submitted_at": "2015-05-01T01:05:42.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/StringToWordVector",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/StringToWordVector"
            },
            {
              "username": "weka",
              "algoname": "JRip",
              "algolabel": "JRip",
              "language": "Java",
              "card_line": "This is the JRip classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/rules/JRip.html",
              "submitted_at": "2015-05-01T01:17:19.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/JRip",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/JRip"
            },
            {
              "username": "o12827402",
              "algoname": "fjcut_v1",
              "algolabel": "fjcut_v1",
              "language": "Python 2.x",
              "card_line": "Overview Provide a short overview of your algorithm.",
              "doc_url": "https://algorithmia.com/algorithms/o12827402/fjcut_v1",
              "api_url": "https://api.algorithmia.com/v1/algo/o12827402/fjcut_v1"
            },
            {
              "username": "weka",
              "algoname": "J48",
              "algolabel": "J48",
              "language": "Java",
              "card_line": "This is the J48 classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/trees/J48.html",
              "submitted_at": "2015-05-01T01:16:31.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/J48",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/J48"
            },
            {
              "username": "weka",
              "algoname": "DecisionTable",
              "algolabel": "DecisionTable",
              "language": "Java",
              "card_line": "This is the DecisionTable classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/rules/DecisionTable.html",
              "submitted_at": "2015-05-01T01:17:23.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/DecisionTable",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/DecisionTable"
            },
            {
              "username": "weka",
              "algoname": "SMOTE",
              "algolabel": "SMOTE",
              "language": "Java",
              "card_line": "This is the SMOTE filter, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/filters/supervised/instance/SMOTE.html",
              "submitted_at": "2015-05-01T01:04:53.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/SMOTE",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/SMOTE"
            },
            {
              "username": "weka",
              "algoname": "NBTree",
              "algolabel": "NBTree",
              "language": "Java",
              "card_line": "This is the NBTree classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/trees/NBTree.html",
              "submitted_at": "2015-05-01T01:13:47.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/NBTree",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/NBTree"
            },
            {
              "username": "opencv",
              "algoname": "RTrees",
              "algolabel": "RTrees",
              "language": "Java",
              "card_line": "A basic interface to OpenCV's RTrees, as explained in http://docs.opencv.org/java/org/opencv/ml/CvRTrees.html.",
              "submitted_at": "2015-05-01T01:58:49.000Z",
              "doc_url": "https://algorithmia.com/algorithms/opencv/RTrees",
              "api_url": "https://api.algorithmia.com/v1/algo/opencv/RTrees"
            },
            {
              "username": "weka",
              "algoname": "PART",
              "algolabel": "PART",
              "language": "Java",
              "card_line": "This is the PART classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/rules/PART.html",
              "submitted_at": "2015-05-01T01:16:57.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/PART",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/PART"
            },
            {
              "username": "weka",
              "algoname": "LibLINEAR",
              "algolabel": "LibLINEAR",
              "language": "Java",
              "card_line": "This is the LibLINEAR classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/functions/LibLINEAR.html",
              "submitted_at": "2015-05-01T01:32:01.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/LibLINEAR",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/LibLINEAR"
            },
            {
              "username": "weka",
              "algoname": "LinearRegression",
              "algolabel": "LinearRegression",
              "language": "Java",
              "card_line": "This is the LinearRegression classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/functions/LinearRegression.html",
              "submitted_at": "2015-05-01T01:31:56.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/LinearRegression",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/LinearRegression"
            },
            {
              "username": "weka",
              "algoname": "Id3",
              "algolabel": "Id3",
              "language": "Java",
              "card_line": "This is the Id3 classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/trees/Id3.html",
              "submitted_at": "2015-05-01T01:16:30.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/Id3",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/Id3"
            },
            {
              "username": "weka",
              "algoname": "MathExpression",
              "algolabel": "MathExpression",
              "language": "Java",
              "card_line": "This is the MathExpression filter, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/filters/unsupervised/attribute/MathExpression.html",
              "submitted_at": "2015-05-01T01:11:02.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/MathExpression",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/MathExpression"
            },
            {
              "username": "weka",
              "algoname": "TimeSeriesDelta",
              "algolabel": "TimeSeriesDelta",
              "language": "Java",
              "card_line": "This is the TimeSeriesDelta filter, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/filters/unsupervised/attribute/TimeSeriesDelta.html",
              "submitted_at": "2015-05-01T01:05:36.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/TimeSeriesDelta",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/TimeSeriesDelta"
            },
            {
              "username": "opencv",
              "algoname": "NormalBayesClassifier",
              "algolabel": "Normal Bayes Classifier",
              "language": "Java",
              "card_line": "A basic interface to OpenCV's DTree, as explained in http://docs.opencv.org/java/org/opencv/ml/CvNormalBayesClassifier.html .",
              "submitted_at": "2015-05-01T01:58:44.000Z",
              "doc_url": "https://algorithmia.com/algorithms/opencv/NormalBayesClassifier",
              "api_url": "https://api.algorithmia.com/v1/algo/opencv/NormalBayesClassifier"
            },
            {
              "username": "weka",
              "algoname": "ClassificationViaClustering",
              "algolabel": "ClassificationViaClustering",
              "language": "Java",
              "card_line": "This is the ClassificationViaClustering classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/meta/ClassificationViaClustering.html",
              "submitted_at": "2015-05-01T01:27:47.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/ClassificationViaClustering",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/ClassificationViaClustering"
            },
            {
              "username": "weka",
              "algoname": "M5P",
              "algolabel": "M5P",
              "language": "Java",
              "card_line": "This is the M5P classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/trees/M5P.html",
              "submitted_at": "2015-05-01T01:13:49.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/M5P",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/M5P"
            },
            {
              "username": "weka",
              "algoname": "REPTree",
              "algolabel": "REPTree",
              "language": "Java",
              "card_line": "This is the REPTree classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/trees/REPTree.html",
              "submitted_at": "2015-05-01T01:13:45.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/REPTree",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/REPTree"
            },
            {
              "username": "weka",
              "algoname": "AODE",
              "algolabel": "AODE",
              "language": "Java",
              "card_line": "This is the AODE classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/bayes/AODE.html",
              "submitted_at": "2015-05-01T01:33:12.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/AODE",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/AODE"
            },
            {
              "username": "weka",
              "algoname": "GaussianProcesses",
              "algolabel": "GaussianProcesses",
              "language": "Java",
              "card_line": "This is the GaussianProcesses classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/functions/GaussianProcesses.html",
              "submitted_at": "2015-05-01T01:32:15.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/GaussianProcesses",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/GaussianProcesses"
            },
            {
              "username": "weka",
              "algoname": "XMeansClusterer",
              "algolabel": "XMeansClusterer",
              "language": "Java",
              "card_line": "Uses XMeans clusterer, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/clusterers/XMeans.html",
              "submitted_at": "2015-06-29T21:54:59.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/XMeansClusterer",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/XMeansClusterer"
            },
            {
              "username": "weka",
              "algoname": "LibSVM",
              "algolabel": "LibSVM",
              "language": "Java",
              "card_line": "This is the LibSVM classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/functions/LibSVM.html",
              "submitted_at": "2015-05-01T01:31:58.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/LibSVM",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/LibSVM"
            },
            {
              "username": "weka",
              "algoname": "WekaHierarchicalClusterer",
              "algolabel": "WekaHierarchicalClusterer",
              "language": "Java",
              "card_line": "Uses Hierarchical clusterer, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/clusterers/HierarchicalClusterer.html",
              "submitted_at": "2015-06-29T21:41:31.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/WekaHierarchicalClusterer",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/WekaHierarchicalClusterer"
            },
            {
              "username": "weka",
              "algoname": "PaceRegression",
              "algolabel": "PaceRegression",
              "language": "Java",
              "card_line": "This is the PaceRegression classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/functions/PaceRegression.html",
              "submitted_at": "2015-05-01T01:31:37.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/PaceRegression",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/PaceRegression"
            },
            {
              "username": "weka",
              "algoname": "NNge",
              "algolabel": "NNge",
              "language": "Java",
              "card_line": "This is the NNge classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/rules/NNge.html",
              "submitted_at": "2015-05-01T01:16:59.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/NNge",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/NNge"
            },
            {
              "username": "weka",
              "algoname": "NaiveBayesUpdateable",
              "algolabel": "NaiveBayesUpdateable",
              "language": "Java",
              "card_line": "This is the NaiveBayesUpdateable classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/bayes/NaiveBayesUpdateable.html",
              "submitted_at": "2015-05-01T01:32:23.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/NaiveBayesUpdateable",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/NaiveBayesUpdateable"
            },
            {
              "username": "weka",
              "algoname": "SimpleLogistic",
              "algolabel": "SimpleLogistic",
              "language": "Java",
              "card_line": "This is the SimpleLogistic classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/functions/SimpleLogistic.html",
              "submitted_at": "2015-05-01T01:31:27.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/SimpleLogistic",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/SimpleLogistic"
            },
            {
              "username": "opencv",
              "algoname": "KNearest",
              "algolabel": "KNearest",
              "language": "Java",
              "card_line": "An interface to OpenCV's K nearest neighbor, as explained in http://docs.opencv.org/java/org/opencv/ml/CvKNearest.html .",
              "submitted_at": "2015-05-01T01:58:42.000Z",
              "doc_url": "https://algorithmia.com/algorithms/opencv/KNearest",
              "api_url": "https://api.algorithmia.com/v1/algo/opencv/KNearest"
            },
            {
              "username": "weka",
              "algoname": "Logistic",
              "algolabel": "Logistic",
              "language": "Java",
              "card_line": "This is the Logistic classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/functions/Logistic.html",
              "submitted_at": "2015-05-01T01:31:51.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/Logistic",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/Logistic"
            }
          ]
        }
      },
      {
        "request": {
          "url": "/meta/algorithms",
          "method": "GET",
          "headers": {
            "host": "algorithmia.com",
            "connection": "keep-alive",
            "pragma": "no-cache",
            "cache-control": "no-cache",
            "accept": "application/json, text/plain, */*",
            "dnt": "1",
            "x-xsrf-token": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "cors",
            "referer": "https://algorithmia.com/algorithms",
            "accept-encoding": "gzip, deflate, br",
            "accept-language": "en-US,en;q=0.9",
            "cookie": "ajs_group_id=null; ajs_anonymous_id=%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22; _ga=GA1.2.1872580011.1571235636; _fbp=fb.1.1571235636317.604574724; intercom-id-c9fj6354=01941621-342b-4320-ad75-53826b5a002c; hubspotutk=105fad8a9b12bfed67330a0dbfe12c61; _gid=GA1.2.1843278152.1572282100; __zlcmid=uzie5dAUbB300Y; __hstc=69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3; __hssrc=1; fs_intercom=4655074328608768:4513847218700288; XSRF-TOKEN=0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da; referrer=www.google.com; landing_page=https://algorithmia.com/; signup_session=true; ajs_user_id=%22acunniffe%22; fs_uid=rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636; new-algo-language=scala; __hssc=69686351.5.1572357353053; intercom-session-c9fj6354=L08zdks3K1FOZEs0NngyR2NDQjBxN3VMb1J3dE1QZ0t4N2piYXY5ZmlNWFNVMkxseFhidkxhZ0g4QStWV2hYay0tUUtjQUtFaUZvLzJIZ0drSFdnRjM0UT09--fc3e700881b2cd1507c47ce6533f5b502d54fb7c; ALGO_SESSION=ebee5e9d2f4b622441d7ec05e355f3e1b7290838-last-access=2019-10-29T14%3A07%3A05.187Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "cookies": {
            "ajs_group_id": "null",
            "ajs_anonymous_id": "%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22",
            "_ga": "GA1.2.1872580011.1571235636",
            "_fbp": "fb.1.1571235636317.604574724",
            "intercom-id-c9fj6354": "01941621-342b-4320-ad75-53826b5a002c",
            "hubspotutk": "105fad8a9b12bfed67330a0dbfe12c61",
            "_gid": "GA1.2.1843278152.1572282100",
            "__zlcmid": "uzie5dAUbB300Y",
            "__hstc": "69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3",
            "__hssrc": "1",
            "fs_intercom": "4655074328608768:4513847218700288",
            "XSRF-TOKEN": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "referrer": "www.google.com",
            "landing_page": "https://algorithmia.com/",
            "signup_session": "true",
            "ajs_user_id": "%22acunniffe%22",
            "fs_uid": "rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636",
            "new-algo-language": "scala",
            "__hssc": "69686351.5.1572357353053",
            "intercom-session-c9fj6354": "L08zdks3K1FOZEs0NngyR2NDQjBxN3VMb1J3dE1QZ0t4N2piYXY5ZmlNWFNVMkxseFhidkxhZ0g4QStWV2hYay0tUUtjQUtFaUZvLzJIZ0drSFdnRjM0UT09--fc3e700881b2cd1507c47ce6533f5b502d54fb7c",
            "ALGO_SESSION": "ebee5e9d2f4b622441d7ec05e355f3e1b7290838-last-access=2019-10-29T14%3A07%3A05.187Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "queryParameters": {
            "order": "latest",
            "tag": "machine-learning"
          }
        },
        "response": {
          "statusCode": 200,
          "headers": {
            "content-encoding": "gzip",
            "content-type": "application/json; charset=utf-8",
            "date": "Tue, 29 Oct 2019 14:07:11 GMT",
            "set-cookie": "ALGO_SESSION=92b5f0c0315c6b41fbd629567686b13831009a85-last-access=2019-10-29T14%3A07%3A11.935Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3; Max-Age=86400; Expires=Wed, 30 Oct 2019 14:07:11 GMT; Path=/; Domain=algorithmia.com; Secure; HTTPOnly",
            "strict-transport-security": "max-age=86400; includeSubDomains",
            "vary": "Accept-Encoding",
            "x-content-type-options": "nosniff",
            "x-frame-options": "DENY",
            "content-length": "5791",
            "connection": "keep-alive"
          },
          "body": [
            {
              "username": "o12827402",
              "algoname": "fjcut_v1",
              "algolabel": "fjcut_v1",
              "language": "Python 2.x",
              "card_line": "Overview Provide a short overview of your algorithm.",
              "doc_url": "https://algorithmia.com/algorithms/o12827402/fjcut_v1",
              "api_url": "https://api.algorithmia.com/v1/algo/o12827402/fjcut_v1"
            },
            {
              "username": "PetiteProgrammer",
              "algoname": "AutoComplete",
              "algolabel": "AutoComplete (Auto Complete, Next Word Prediction)",
              "language": "Python 3.x",
              "card_line": "Completes sentences based on user input ",
              "doc_url": "https://algorithmia.com/algorithms/PetiteProgrammer/AutoComplete",
              "api_url": "https://api.algorithmia.com/v1/algo/PetiteProgrammer/AutoComplete"
            },
            {
              "username": "classification",
              "algoname": "GenderByName",
              "algolabel": "Gender By Name (First, Last or Full Name) Classifier",
              "language": "Python 3.x",
              "card_line": "Fast gender classifier by name. Classification works with first and last name (order-independent); last name optional.",
              "doc_url": "https://algorithmia.com/algorithms/classification/GenderByName",
              "api_url": "https://api.algorithmia.com/v1/algo/classification/GenderByName"
            },
            {
              "username": "imageclassification",
              "algoname": "ResNetFeatureExtraction",
              "algolabel": "ResNet Feature Extraction",
              "language": "Python 3.x",
              "card_line": " Extract ResNet feature vectors from images. ",
              "doc_url": "https://algorithmia.com/algorithms/imageclassification/ResNetFeatureExtraction",
              "api_url": "https://api.algorithmia.com/v1/algo/imageclassification/ResNetFeatureExtraction"
            },
            {
              "username": "imageclassification",
              "algoname": "ResNetModelRunner",
              "algolabel": "ResNet Model Runner",
              "language": "Python 3.x",
              "card_line": " Deploy pre-trained ResNets for inference. ",
              "doc_url": "https://algorithmia.com/algorithms/imageclassification/ResNetModelRunner",
              "api_url": "https://api.algorithmia.com/v1/algo/imageclassification/ResNetModelRunner"
            },
            {
              "username": "imageclassification",
              "algoname": "ImageClassificationTrainer",
              "algolabel": "Image Classification Trainer",
              "language": "Python 3.x",
              "card_line": " Train fine-tuned image classifiers with transfer learning. ",
              "doc_url": "https://algorithmia.com/algorithms/imageclassification/ImageClassificationTrainer",
              "api_url": "https://api.algorithmia.com/v1/algo/imageclassification/ImageClassificationTrainer"
            },
            {
              "username": "poze",
              "algoname": "poseEstimation_v2",
              "algolabel": "Pose Estimation",
              "language": "Python 3.x",
              "card_line": " Detect body pose for multiple people on image.",
              "doc_url": "https://algorithmia.com/algorithms/poze/poseEstimation_v2",
              "api_url": "https://api.algorithmia.com/v1/algo/poze/poseEstimation_v2"
            },
            {
              "username": "PetiteProgrammer",
              "algoname": "NaturalLanguageUnderstanding",
              "algolabel": "Natural Language Understanding",
              "language": "Python 3.x",
              "card_line": "Understand intents, time, etc. from natural language ",
              "doc_url": "https://algorithmia.com/algorithms/PetiteProgrammer/NaturalLanguageUnderstanding",
              "api_url": "https://api.algorithmia.com/v1/algo/PetiteProgrammer/NaturalLanguageUnderstanding"
            },
            {
              "username": "PetiteProgrammer",
              "algoname": "NamedEntityRecognition",
              "algolabel": "Named Entity Recognition (Detection of Persons, Dates, Locations and much more)",
              "language": "Python 3.x",
              "card_line": "Extracts entities out of text such as persons and organizations, with high precision. ",
              "doc_url": "https://algorithmia.com/algorithms/PetiteProgrammer/NamedEntityRecognition",
              "api_url": "https://api.algorithmia.com/v1/algo/PetiteProgrammer/NamedEntityRecognition"
            },
            {
              "username": "guardlogic",
              "algoname": "AdultImageClassifier",
              "algolabel": "AdultImageClassifier",
              "language": "Python 2.x",
              "card_line": "  Assesses if an image contains \"Adult\" content where the term \"Adult\" is defined as \"sexually explicit\".",
              "doc_url": "https://algorithmia.com/algorithms/guardlogic/AdultImageClassifier",
              "api_url": "https://api.algorithmia.com/v1/algo/guardlogic/AdultImageClassifier"
            },
            {
              "username": "dbgannon",
              "algoname": "SciDocClassifier",
              "algolabel": "SciDocClassifier",
              "language": "Python 3.x",
              "card_line": "Overview SciDocClassifier uses a ML Model created by Gensim Doc2vec to classify scientific abstracts into five...",
              "doc_url": "https://algorithmia.com/algorithms/dbgannon/SciDocClassifier",
              "api_url": "https://api.algorithmia.com/v1/algo/dbgannon/SciDocClassifier"
            },
            {
              "username": "wuhuikai",
              "algoname": "A2RL_online",
              "algolabel": "A2RL: Auto Image Cropping",
              "language": "Python 3.x",
              "card_line": "Auto-crop given image to improve the aesthetic.",
              "doc_url": "https://algorithmia.com/algorithms/wuhuikai/A2RL_online",
              "api_url": "https://api.algorithmia.com/v1/algo/wuhuikai/A2RL_online"
            },
            {
              "username": "pappacena",
              "algoname": "kmeans",
              "algolabel": "k-means",
              "language": "Python 3.x",
              "card_line": "Simple k-means algorithm implementation",
              "doc_url": "https://algorithmia.com/algorithms/pappacena/kmeans",
              "api_url": "https://api.algorithmia.com/v1/algo/pappacena/kmeans"
            },
            {
              "username": "wuhuikai",
              "algoname": "A2RL",
              "algolabel": "A2RL: Auto Image Cropping",
              "language": "Python 3.x",
              "card_line": "Auto-crop given image to improve the aesthetic.",
              "doc_url": "https://algorithmia.com/algorithms/wuhuikai/A2RL",
              "api_url": "https://api.algorithmia.com/v1/algo/wuhuikai/A2RL"
            },
            {
              "username": "virtualman",
              "algoname": "Hello",
              "algolabel": "Hello World",
              "language": "Java",
              "card_line": "A simple \"Hello World\" algorithm, which returns \"Hello \" + the algorithm input.",
              "doc_url": "https://algorithmia.com/algorithms/virtualman/Hello",
              "api_url": "https://api.algorithmia.com/v1/algo/virtualman/Hello"
            },
            {
              "username": "deeplearning",
              "algoname": "ObjectDetectionCOCO",
              "algolabel": "ObjectDetection - COCO",
              "language": "Python 3.x",
              "card_line": "Detecting Objects in complex scenes",
              "doc_url": "https://algorithmia.com/algorithms/deeplearning/ObjectDetectionCOCO",
              "api_url": "https://api.algorithmia.com/v1/algo/deeplearning/ObjectDetectionCOCO"
            },
            {
              "username": "character_recognition",
              "algoname": "SmartTextExtraction",
              "algolabel": "Smart Text Extraction",
              "language": "Scala",
              "card_line": "Extract text the smart way",
              "doc_url": "https://algorithmia.com/algorithms/character_recognition/SmartTextExtraction",
              "api_url": "https://api.algorithmia.com/v1/algo/character_recognition/SmartTextExtraction"
            },
            {
              "username": "character_recognition",
              "algoname": "TextDetectionCTPN",
              "algolabel": "Text Detection (CTPN)",
              "language": "Python 2.x",
              "card_line": "detect text or words in any kind of image including both scanned documents and natural images.",
              "doc_url": "https://algorithmia.com/algorithms/character_recognition/TextDetectionCTPN",
              "api_url": "https://api.algorithmia.com/v1/algo/character_recognition/TextDetectionCTPN"
            },
            {
              "username": "character_recognition",
              "algoname": "NaturalTextNet",
              "algolabel": "Natural Text Net",
              "language": "Python 3.x",
              "card_line": "Extracts text from natural scene images",
              "doc_url": "https://algorithmia.com/algorithms/character_recognition/NaturalTextNet",
              "api_url": "https://api.algorithmia.com/v1/algo/character_recognition/NaturalTextNet"
            },
            {
              "username": "berlius",
              "algoname": "colorize",
              "algolabel": "colorize",
              "language": "Python 2.x",
              "card_line": "Colorize black and white images with Berkeley model",
              "doc_url": "https://algorithmia.com/algorithms/berlius/colorize",
              "api_url": "https://api.algorithmia.com/v1/algo/berlius/colorize"
            },
            {
              "username": "character_recognition",
              "algoname": "tesseract",
              "algolabel": "tesseract",
              "language": "Python 2.x",
              "card_line": "extracts text with deep learning",
              "doc_url": "https://algorithmia.com/algorithms/character_recognition/tesseract",
              "api_url": "https://api.algorithmia.com/v1/algo/character_recognition/tesseract"
            },
            {
              "username": "PetiteProgrammer",
              "algoname": "ImageClassifier",
              "algolabel": "Image Classifier",
              "language": "Python 3.x",
              "card_line": "Highly Accurate Image Classifier",
              "doc_url": "https://algorithmia.com/algorithms/PetiteProgrammer/ImageClassifier",
              "api_url": "https://api.algorithmia.com/v1/algo/PetiteProgrammer/ImageClassifier"
            },
            {
              "username": "PetiteProgrammer",
              "algoname": "DateExtractor",
              "algolabel": "DateExtractor",
              "language": "Python 3.x",
              "card_line": "Extracts dates from raw text",
              "doc_url": "https://algorithmia.com/algorithms/PetiteProgrammer/DateExtractor",
              "api_url": "https://api.algorithmia.com/v1/algo/PetiteProgrammer/DateExtractor"
            },
            {
              "username": "PetiteProgrammer",
              "algoname": "NumberExtractor",
              "algolabel": "NumberExtractor",
              "language": "Python 3.x",
              "card_line": "Extracts numbers (positive, negative and floats) from raw text.",
              "doc_url": "https://algorithmia.com/algorithms/PetiteProgrammer/NumberExtractor",
              "api_url": "https://api.algorithmia.com/v1/algo/PetiteProgrammer/NumberExtractor"
            },
            {
              "username": "Wolverine",
              "algoname": "FastAnomalydetection",
              "algolabel": "Fast Anomaly Detection",
              "language": "Python 3.x",
              "card_line": "A fast Anomaly detection algorithm best used for IoT, Fraud detection and IT Ops",
              "doc_url": "https://algorithmia.com/algorithms/Wolverine/FastAnomalydetection",
              "api_url": "https://api.algorithmia.com/v1/algo/Wolverine/FastAnomalydetection"
            },
            {
              "username": "cv",
              "algoname": "FaceRecognition",
              "algolabel": "Face Recognition",
              "language": "Python 2.x",
              "card_line": "Train and recognize human faces",
              "doc_url": "https://algorithmia.com/algorithms/cv/FaceRecognition",
              "api_url": "https://api.algorithmia.com/v1/algo/cv/FaceRecognition"
            },
            {
              "username": "buliginleo",
              "algoname": "NudityCheck",
              "algolabel": "NudityCheck",
              "language": "Python 3.x",
              "card_line": "Free neural network for check nudity by link",
              "doc_url": "https://algorithmia.com/algorithms/buliginleo/NudityCheck",
              "api_url": "https://api.algorithmia.com/v1/algo/buliginleo/NudityCheck"
            },
            {
              "username": "dlib",
              "algoname": "FaceDetection",
              "algolabel": "Face Detection",
              "language": "Python 2.x",
              "card_line": "This algorithm detects human faces in given images.",
              "doc_url": "https://algorithmia.com/algorithms/dlib/FaceDetection",
              "api_url": "https://api.algorithmia.com/v1/algo/dlib/FaceDetection"
            },
            {
              "username": "media",
              "algoname": "ContentAwareResize",
              "algolabel": "Content Aware Resize",
              "language": "Python 2.x",
              "card_line": "Resize images automatically, without removing important features such as faces",
              "doc_url": "https://algorithmia.com/algorithms/media/ContentAwareResize",
              "api_url": "https://api.algorithmia.com/v1/algo/media/ContentAwareResize"
            },
            {
              "username": "bkyan",
              "algoname": "StyleThief",
              "algolabel": "StyleThief (Open Source)",
              "language": "Python 2.x",
              "card_line": "Anish Athalye's Neural Style Transfer Using TensorFlow",
              "doc_url": "https://algorithmia.com/algorithms/bkyan/StyleThief",
              "api_url": "https://api.algorithmia.com/v1/algo/bkyan/StyleThief"
            },
            {
              "username": "web",
              "algoname": "MaliciousDomainClassifier",
              "algolabel": "Malicious Domain Classifier",
              "language": "Java",
              "card_line": "Determine whether a domain name is safe or malicious",
              "doc_url": "https://algorithmia.com/algorithms/web/MaliciousDomainClassifier",
              "api_url": "https://api.algorithmia.com/v1/algo/web/MaliciousDomainClassifier"
            },
            {
              "username": "sfw",
              "algoname": "VideoNudityDetection",
              "algolabel": "Video Nudity Detection",
              "language": "Python 2.x",
              "card_line": "Detect Nudity in Video",
              "doc_url": "https://algorithmia.com/algorithms/sfw/VideoNudityDetection",
              "api_url": "https://api.algorithmia.com/v1/algo/sfw/VideoNudityDetection"
            },
            {
              "username": "nlp",
              "algoname": "DocumentClassifier",
              "algolabel": "Document Classifier",
              "language": "Scala",
              "card_line": "Classify or Recommend documents with ease",
              "doc_url": "https://algorithmia.com/algorithms/nlp/DocumentClassifier",
              "api_url": "https://api.algorithmia.com/v1/algo/nlp/DocumentClassifier"
            },
            {
              "username": "lucianosantabrigida",
              "algoname": "ptwiki2vec",
              "algolabel": "ptwiki2vec",
              "language": "Python 3.x",
              "card_line": "[WIP] portuguese wikipedia vectors",
              "doc_url": "https://algorithmia.com/algorithms/lucianosantabrigida/ptwiki2vec",
              "api_url": "https://api.algorithmia.com/v1/algo/lucianosantabrigida/ptwiki2vec"
            },
            {
              "username": "nlp",
              "algoname": "Doc2Vec",
              "algolabel": "Doc2Vec",
              "language": "Python 2.x",
              "card_line": "Vectorize documents of arbitrary length",
              "doc_url": "https://algorithmia.com/algorithms/nlp/Doc2Vec",
              "api_url": "https://api.algorithmia.com/v1/algo/nlp/Doc2Vec"
            },
            {
              "username": "PetiteProgrammer",
              "algoname": "TextSimilarity",
              "algolabel": "Text Similarity",
              "language": "Python 3.x",
              "card_line": "Find the most similar text files within a collection of documents",
              "doc_url": "https://algorithmia.com/algorithms/PetiteProgrammer/TextSimilarity",
              "api_url": "https://api.algorithmia.com/v1/algo/PetiteProgrammer/TextSimilarity"
            },
            {
              "username": "PetiteProgrammer",
              "algoname": "pythoncodeprediction",
              "algolabel": "Python Code Prediction",
              "language": "Python 3.x",
              "card_line": "Next word/sequence prediction for Python code",
              "doc_url": "https://algorithmia.com/algorithms/PetiteProgrammer/pythoncodeprediction",
              "api_url": "https://api.algorithmia.com/v1/algo/PetiteProgrammer/pythoncodeprediction"
            },
            {
              "username": "PetiteProgrammer",
              "algoname": "ProgrammingLanguageIdentification",
              "algolabel": "Programming Language Identification",
              "language": "Python 3.x",
              "card_line": "Detect the programming language of source code",
              "doc_url": "https://algorithmia.com/algorithms/PetiteProgrammer/ProgrammingLanguageIdentification",
              "api_url": "https://api.algorithmia.com/v1/algo/PetiteProgrammer/ProgrammingLanguageIdentification"
            },
            {
              "username": "deeplearning",
              "algoname": "Parsey",
              "algolabel": "Parsey McParseface",
              "language": "Scala",
              "card_line": "Parse sentences with ease.",
              "doc_url": "https://algorithmia.com/algorithms/deeplearning/Parsey",
              "api_url": "https://api.algorithmia.com/v1/algo/deeplearning/Parsey"
            },
            {
              "username": "ryval",
              "algoname": "LogisticRegression",
              "algolabel": "LogisticRegression",
              "language": "Python 2.x",
              "card_line": "Train a Logistic Regression model and use it to predict unknown classifiers.",
              "submitted_at": "2015-08-20T23:24:10.000Z",
              "doc_url": "https://algorithmia.com/algorithms/ryval/LogisticRegression",
              "api_url": "https://api.algorithmia.com/v1/algo/ryval/LogisticRegression"
            },
            {
              "username": "mheimann",
              "algoname": "RecognizeFaces",
              "algolabel": "Recognize Faces",
              "language": "Python 2.x",
              "card_line": "Uses a trained face recognizer to identify faces.",
              "submitted_at": "2015-10-06T00:50:11.000Z",
              "doc_url": "https://algorithmia.com/algorithms/mheimann/RecognizeFaces",
              "api_url": "https://api.algorithmia.com/v1/algo/mheimann/RecognizeFaces"
            },
            {
              "username": "mheimann",
              "algoname": "TrainFaceRecognizer",
              "algolabel": "Train Face Recognizer",
              "language": "Python 2.x",
              "card_line": "Trains a face recognizer from a labeled set of faces.",
              "submitted_at": "2015-08-08T00:03:29.000Z",
              "doc_url": "https://algorithmia.com/algorithms/mheimann/TrainFaceRecognizer",
              "api_url": "https://api.algorithmia.com/v1/algo/mheimann/TrainFaceRecognizer"
            },
            {
              "username": "sklearn",
              "algoname": "GeographicOutlierDetection",
              "algolabel": "Geographic Outlier Detection",
              "language": "Python 2.x",
              "card_line": "This algorithm finds the most unexpected events in a set of geographic events relative to some reference set of events.",
              "submitted_at": "2015-05-04T20:16:28.000Z",
              "doc_url": "https://algorithmia.com/algorithms/sklearn/GeographicOutlierDetection",
              "api_url": "https://api.algorithmia.com/v1/algo/sklearn/GeographicOutlierDetection"
            },
            {
              "username": "sklearn",
              "algoname": "GeographicSpectralClustering",
              "algolabel": "Geographic Spectral Clustering",
              "language": "Python 2.x",
              "card_line": "Spectral clustering for geographic (lat/long) data.",
              "submitted_at": "2015-05-01T01:02:21.000Z",
              "doc_url": "https://algorithmia.com/algorithms/sklearn/GeographicSpectralClustering",
              "api_url": "https://api.algorithmia.com/v1/algo/sklearn/GeographicSpectralClustering"
            },
            {
              "username": "conctest",
              "algoname": "DigitRecognition",
              "algolabel": "Digit Recognition",
              "language": "Python 2.x",
              "card_line": "Recognizes handwritten digits using a pre trained  Convolutional Neural Network .",
              "submitted_at": "2015-06-22T15:39:45.000Z",
              "doc_url": "https://algorithmia.com/algorithms/conctest/DigitRecognition",
              "api_url": "https://api.algorithmia.com/v1/algo/conctest/DigitRecognition"
            },
            {
              "username": "cmartines",
              "algoname": "Chartie",
              "algolabel": "Chartie",
              "language": "Java",
              "card_line": "See beyond the numbers The new free web API that finds the  trend event  from your  numerical arrays For more detail : w...",
              "submitted_at": "2015-03-15T15:24:44.000Z",
              "doc_url": "https://algorithmia.com/algorithms/cmartines/Chartie",
              "api_url": "https://api.algorithmia.com/v1/algo/cmartines/Chartie"
            },
            {
              "username": "paranoia",
              "algoname": "FpGrowth",
              "algolabel": "FpGrowth",
              "language": "Java",
              "card_line": "A scalable method for finding frequent patterns within large datasets",
              "submitted_at": "2015-12-07T00:08:45.000Z",
              "doc_url": "https://algorithmia.com/algorithms/paranoia/FpGrowth",
              "api_url": "https://api.algorithmia.com/v1/algo/paranoia/FpGrowth"
            },
            {
              "username": "Aluxian",
              "algoname": "AffinityAnalysisFPGrowth",
              "algolabel": "Affinity Analysis for Market Basket Recommendation (FP-Growth)",
              "language": "Java",
              "card_line": "Affinity analysis is an analytical technique that aims to discover relationships between activities and preferences that pertain to specific individuals.",
              "submitted_at": "2015-10-20T21:44:38.000Z",
              "doc_url": "https://algorithmia.com/algorithms/Aluxian/AffinityAnalysisFPGrowth",
              "api_url": "https://api.algorithmia.com/v1/algo/Aluxian/AffinityAnalysisFPGrowth"
            },
            {
              "username": "thatguy2048",
              "algoname": "SimpleKNN",
              "algolabel": "SimpleKNN",
              "language": "Java",
              "card_line": "This is a simple KNN classifier which accepts a given number of training data points, classes for those points and sample points to evaluate.",
              "submitted_at": "2015-10-19T21:35:10.000Z",
              "doc_url": "https://algorithmia.com/algorithms/thatguy2048/SimpleKNN",
              "api_url": "https://api.algorithmia.com/v1/algo/thatguy2048/SimpleKNN"
            },
            {
              "username": "weka",
              "algoname": "DigitRecognition",
              "algolabel": "Digit Recognition",
              "language": "Java",
              "card_line": "The Digit Recognition algorithm that uses a Random Forest model trained on 50000 samples obtained from the MNIST digits dataset.",
              "submitted_at": "2015-05-01T01:23:58.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/DigitRecognition",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/DigitRecognition"
            },
            {
              "username": "jagiella",
              "algoname": "BirthDeathProcess",
              "algolabel": "BirthDeathProcess",
              "language": "Java",
              "submitted_at": "2015-10-19T21:52:34.000Z",
              "doc_url": "https://algorithmia.com/algorithms/jagiella/BirthDeathProcess",
              "api_url": "https://api.algorithmia.com/v1/algo/jagiella/BirthDeathProcess"
            },
            {
              "username": "opencv",
              "algoname": "SVM",
              "algolabel": "SVM",
              "language": "Java",
              "card_line": "A basic interface to OpenCV's SVM, as explained in http://docs.opencv.org/java/org/opencv/ml/CvSVM.html .",
              "submitted_at": "2015-05-01T01:58:46.000Z",
              "doc_url": "https://algorithmia.com/algorithms/opencv/SVM",
              "api_url": "https://api.algorithmia.com/v1/algo/opencv/SVM"
            },
            {
              "username": "opencv",
              "algoname": "RTrees",
              "algolabel": "RTrees",
              "language": "Java",
              "card_line": "A basic interface to OpenCV's RTrees, as explained in http://docs.opencv.org/java/org/opencv/ml/CvRTrees.html.",
              "submitted_at": "2015-05-01T01:58:49.000Z",
              "doc_url": "https://algorithmia.com/algorithms/opencv/RTrees",
              "api_url": "https://api.algorithmia.com/v1/algo/opencv/RTrees"
            },
            {
              "username": "opencv",
              "algoname": "NormalBayesClassifier",
              "algolabel": "Normal Bayes Classifier",
              "language": "Java",
              "card_line": "A basic interface to OpenCV's DTree, as explained in http://docs.opencv.org/java/org/opencv/ml/CvNormalBayesClassifier.html .",
              "submitted_at": "2015-05-01T01:58:44.000Z",
              "doc_url": "https://algorithmia.com/algorithms/opencv/NormalBayesClassifier",
              "api_url": "https://api.algorithmia.com/v1/algo/opencv/NormalBayesClassifier"
            },
            {
              "username": "opencv",
              "algoname": "KNearest",
              "algolabel": "KNearest",
              "language": "Java",
              "card_line": "An interface to OpenCV's K nearest neighbor, as explained in http://docs.opencv.org/java/org/opencv/ml/CvKNearest.html .",
              "submitted_at": "2015-05-01T01:58:42.000Z",
              "doc_url": "https://algorithmia.com/algorithms/opencv/KNearest",
              "api_url": "https://api.algorithmia.com/v1/algo/opencv/KNearest"
            },
            {
              "username": "opencv",
              "algoname": "GBTrees",
              "algolabel": "GBTrees",
              "language": "Java",
              "card_line": "A basic interface to OpenCV's DTree, as explained in http://docs.opencv.org/java/org/opencv/ml/CvGBTrees.html .",
              "submitted_at": "2015-05-01T01:58:21.000Z",
              "doc_url": "https://algorithmia.com/algorithms/opencv/GBTrees",
              "api_url": "https://api.algorithmia.com/v1/algo/opencv/GBTrees"
            },
            {
              "username": "opencv",
              "algoname": "ERTrees",
              "algolabel": "ERTrees",
              "language": "Java",
              "card_line": "A basic interface to OpenCV's ERTrees, as explained in http://docs.opencv.org/java/org/opencv/ml/CvERTrees.html.",
              "submitted_at": "2015-05-01T01:58:47.000Z",
              "doc_url": "https://algorithmia.com/algorithms/opencv/ERTrees",
              "api_url": "https://api.algorithmia.com/v1/algo/opencv/ERTrees"
            },
            {
              "username": "opencv",
              "algoname": "DTree",
              "algolabel": "DTree",
              "language": "Java",
              "card_line": "A basic interface to OpenCV's DTree, as explained in http://docs.opencv.org/java/org/opencv/ml/CvDTree.html.",
              "submitted_at": "2015-05-01T01:58:46.000Z",
              "doc_url": "https://algorithmia.com/algorithms/opencv/DTree",
              "api_url": "https://api.algorithmia.com/v1/algo/opencv/DTree"
            },
            {
              "username": "opencv",
              "algoname": "Boost",
              "algolabel": "Boost",
              "language": "Java",
              "card_line": "A basic interface to OpenCV's Boost, as explained in http://docs.opencv.org/java/org/opencv/ml/CvBoost.html .",
              "submitted_at": "2015-05-01T01:58:23.000Z",
              "doc_url": "https://algorithmia.com/algorithms/opencv/Boost",
              "api_url": "https://api.algorithmia.com/v1/algo/opencv/Boost"
            },
            {
              "username": "opencv",
              "algoname": "MLP",
              "algolabel": "MLP",
              "language": "Java",
              "card_line": "An interface to OpenCV's ANN_MLP, as explained in http://docs.opencv.org/java/org/opencv/ml/CvANN_MLP.html .",
              "submitted_at": "2015-05-01T01:58:23.000Z",
              "doc_url": "https://algorithmia.com/algorithms/opencv/MLP",
              "api_url": "https://api.algorithmia.com/v1/algo/opencv/MLP"
            },
            {
              "username": "mlolson",
              "algoname": "LinearRegression",
              "algolabel": "LinearRegression",
              "language": "Java",
              "submitted_at": "2015-10-19T21:17:10.000Z",
              "doc_url": "https://algorithmia.com/algorithms/mlolson/LinearRegression",
              "api_url": "https://api.algorithmia.com/v1/algo/mlolson/LinearRegression"
            },
            {
              "username": "ml",
              "algoname": "ClickStreamTransitions",
              "algolabel": "Click Stream Transitions",
              "language": "Java",
              "card_line": "Returns the top 5 most \"interesting\" transitions learned by the Hidden Markov Model.",
              "submitted_at": "2015-10-19T21:17:26.000Z",
              "doc_url": "https://algorithmia.com/algorithms/ml/ClickStreamTransitions",
              "api_url": "https://api.algorithmia.com/v1/algo/ml/ClickStreamTransitions"
            },
            {
              "username": "mahout",
              "algoname": "Recommendation",
              "algolabel": "Recommendation",
              "language": "Java",
              "card_line": "Overview Eventually we will expand this to allow different parameters and options for neighborhood and similarity functi...",
              "submitted_at": "2015-06-29T21:29:16.000Z",
              "doc_url": "https://algorithmia.com/algorithms/mahout/Recommendation",
              "api_url": "https://api.algorithmia.com/v1/algo/mahout/Recommendation"
            },
            {
              "username": "mahout",
              "algoname": "RandomForestTrain",
              "algolabel": "Random Forest Train",
              "language": "Java",
              "card_line": "Trains a Mahout random forest classifier.",
              "submitted_at": "2015-03-11T21:09:01.000Z",
              "doc_url": "https://algorithmia.com/algorithms/mahout/RandomForestTrain",
              "api_url": "https://api.algorithmia.com/v1/algo/mahout/RandomForestTrain"
            },
            {
              "username": "mahout",
              "algoname": "RandomForestApply",
              "algolabel": "Random Forest Apply",
              "language": "Java",
              "card_line": "Apply trained Mahout Random Forest Classifier to data",
              "submitted_at": "2015-03-11T21:13:18.000Z",
              "doc_url": "https://algorithmia.com/algorithms/mahout/RandomForestApply",
              "api_url": "https://api.algorithmia.com/v1/algo/mahout/RandomForestApply"
            },
            {
              "username": "mahout",
              "algoname": "DigitRecognizer",
              "algolabel": "Digit Recognizer",
              "language": "Java",
              "card_line": "Applies a random forest model trained on the MNIST handwritten digit dataset to a 28 by 28 grayscale pixel grid, which is input as a double array of length 784.",
              "submitted_at": "2015-03-11T22:41:52.000Z",
              "doc_url": "https://algorithmia.com/algorithms/mahout/DigitRecognizer",
              "api_url": "https://api.algorithmia.com/v1/algo/mahout/DigitRecognizer"
            },
            {
              "username": "weka",
              "algoname": "CsvToArff",
              "algolabel": "CsvToArff",
              "language": "Java",
              "card_line": "Converts .csv",
              "submitted_at": "2015-10-04T06:26:04.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/CsvToArff",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/CsvToArff"
            },
            {
              "username": "weka",
              "algoname": "CobwebClusterer",
              "algolabel": "CobwebClusterer",
              "language": "Java",
              "card_line": "Uses Cobweb clusterer, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/clusterers/Cobweb.html",
              "submitted_at": "2015-06-29T21:38:19.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/CobwebClusterer",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/CobwebClusterer"
            },
            {
              "username": "weka",
              "algoname": "CLOPEClusterer",
              "algolabel": "CLOPEClusterer",
              "language": "Java",
              "card_line": "Uses CLOPE clusterer, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/clusterers/CLOPE.html",
              "submitted_at": "2015-06-29T21:36:19.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/CLOPEClusterer",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/CLOPEClusterer"
            },
            {
              "username": "weka",
              "algoname": "EMClusterer",
              "algolabel": "EMClusterer",
              "language": "Java",
              "card_line": "Uses EM clusterer, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/clusterers/EM.html",
              "submitted_at": "2015-06-29T21:38:54.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/EMClusterer",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/EMClusterer"
            },
            {
              "username": "weka",
              "algoname": "FarthestFirstClusterer",
              "algolabel": "FarthestFirstClusterer",
              "language": "Java",
              "card_line": "Uses Farthest First clusterer, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/clusterers/FarthestFirst.html",
              "submitted_at": "2015-06-29T21:39:53.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/FarthestFirstClusterer",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/FarthestFirstClusterer"
            },
            {
              "username": "weka",
              "algoname": "WekaFilteredClusterer",
              "algolabel": "WekaFilteredClusterer",
              "language": "Java",
              "card_line": "Uses Filtered clusterer, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/clusterers/FilteredClusterer.html",
              "submitted_at": "2015-06-29T21:40:46.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/WekaFilteredClusterer",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/WekaFilteredClusterer"
            },
            {
              "username": "weka",
              "algoname": "WekaHierarchicalClusterer",
              "algolabel": "WekaHierarchicalClusterer",
              "language": "Java",
              "card_line": "Uses Hierarchical clusterer, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/clusterers/HierarchicalClusterer.html",
              "submitted_at": "2015-06-29T21:41:31.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/WekaHierarchicalClusterer",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/WekaHierarchicalClusterer"
            },
            {
              "username": "weka",
              "algoname": "WekaMakeDensityBasedClusterer",
              "algolabel": "WekaMakeDensityBasedClusterer",
              "language": "Java",
              "card_line": "Uses MakeDensityBasedClusterer, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/clusterers/MakeDensityBasedClusterer.html",
              "submitted_at": "2015-06-29T21:52:03.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/WekaMakeDensityBasedClusterer",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/WekaMakeDensityBasedClusterer"
            },
            {
              "username": "weka",
              "algoname": "sIBClusterer",
              "algolabel": "sIBClusterer",
              "language": "Java",
              "card_line": "Uses sIB clusterer, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/clusterers/sIB.html",
              "submitted_at": "2015-06-29T21:53:29.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/sIBClusterer",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/sIBClusterer"
            },
            {
              "username": "weka",
              "algoname": "XMeansClusterer",
              "algolabel": "XMeansClusterer",
              "language": "Java",
              "card_line": "Uses XMeans clusterer, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/clusterers/XMeans.html",
              "submitted_at": "2015-06-29T21:54:59.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/XMeansClusterer",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/XMeansClusterer"
            },
            {
              "username": "weka",
              "algoname": "SimpleKMeansClusterer",
              "algolabel": "SimpleKMeansClusterer",
              "language": "Java",
              "card_line": "Uses SimpleKMeans clusterer, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/clusterers/SimpleKMeans.html",
              "submitted_at": "2015-06-29T21:55:45.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/SimpleKMeansClusterer",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/SimpleKMeansClusterer"
            },
            {
              "username": "weka",
              "algoname": "SubsetByExpression",
              "algolabel": "SubsetByExpression",
              "language": "Java",
              "card_line": "This is the SubsetByExpression filter, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/filters/unsupervised/instance/SubsetByExpression.html",
              "submitted_at": "2015-05-01T00:56:54.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/SubsetByExpression",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/SubsetByExpression"
            },
            {
              "username": "weka",
              "algoname": "SparseToNonSparse",
              "algolabel": "SparseToNonSparse",
              "language": "Java",
              "card_line": "This is the SparseToNonSparse filter, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/filters/unsupervised/instance/SparseToNonSparse.html",
              "submitted_at": "2015-05-01T00:56:47.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/SparseToNonSparse",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/SparseToNonSparse"
            },
            {
              "username": "weka",
              "algoname": "ReservoirSample",
              "algolabel": "ReservoirSample",
              "language": "Java",
              "card_line": "This is the ReservoirSample filter, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/filters/unsupervised/instance/ReservoirSample.html",
              "submitted_at": "2015-05-01T00:56:40.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/ReservoirSample",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/ReservoirSample"
            },
            {
              "username": "weka",
              "algoname": "RemoveWithValues",
              "algolabel": "RemoveWithValues",
              "language": "Java",
              "card_line": "This is the RemoveWithValues filter, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/filters/unsupervised/instance/RemoveWithValues.html",
              "submitted_at": "2015-05-01T00:56:39.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/RemoveWithValues",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/RemoveWithValues"
            },
            {
              "username": "weka",
              "algoname": "RemoveRange",
              "algolabel": "RemoveRange",
              "language": "Java",
              "card_line": "This is the RemoveRange filter, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/filters/unsupervised/instance/RemoveRange.html",
              "submitted_at": "2015-05-01T00:56:38.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/RemoveRange",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/RemoveRange"
            },
            {
              "username": "weka",
              "algoname": "RemovePercentage",
              "algolabel": "RemovePercentage",
              "language": "Java",
              "card_line": "This is the RemovePercentage filter, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/filters/unsupervised/instance/RemovePercentage.html",
              "submitted_at": "2015-05-01T00:56:35.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/RemovePercentage",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/RemovePercentage"
            },
            {
              "username": "weka",
              "algoname": "RemoveMisclassified",
              "algolabel": "RemoveMisclassified",
              "language": "Java",
              "card_line": "This is the RemoveMisclassified filter, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/filters/unsupervised/instance/RemoveMisclassified.html",
              "submitted_at": "2015-05-01T00:56:34.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/RemoveMisclassified",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/RemoveMisclassified"
            },
            {
              "username": "weka",
              "algoname": "RemoveFrequentValues",
              "algolabel": "RemoveFrequentValues",
              "language": "Java",
              "card_line": "This is the RemoveFrequentValues filter, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/filters/unsupervised/instance/RemoveFrequentValues.html",
              "submitted_at": "2015-05-01T00:56:32.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/RemoveFrequentValues",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/RemoveFrequentValues"
            },
            {
              "username": "weka",
              "algoname": "RemoveFolds",
              "algolabel": "RemoveFolds",
              "language": "Java",
              "card_line": "This is the RemoveFolds filter, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/filters/unsupervised/instance/RemoveFolds.html",
              "submitted_at": "2015-05-01T00:56:29.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/RemoveFolds",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/RemoveFolds"
            },
            {
              "username": "weka",
              "algoname": "Randomize",
              "algolabel": "Randomize",
              "language": "Java",
              "card_line": "This is the Randomize filter, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/filters/unsupervised/instance/Randomize.html",
              "submitted_at": "2015-05-01T01:04:47.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/Randomize",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/Randomize"
            },
            {
              "username": "weka",
              "algoname": "NonSparseToSparse",
              "algolabel": "NonSparseToSparse",
              "language": "Java",
              "card_line": "This is the NonSparseToSparse filter, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/filters/unsupervised/instance/NonSparseToSparse.html",
              "submitted_at": "2015-05-01T01:04:49.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/NonSparseToSparse",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/NonSparseToSparse"
            },
            {
              "username": "weka",
              "algoname": "StratifiedRemoveFolds",
              "algolabel": "StratifiedRemoveFolds",
              "language": "Java",
              "card_line": "This is the StratifiedRemoveFolds filter, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/filters/supervised/instance/StratifiedRemoveFolds.html",
              "submitted_at": "2015-05-01T01:04:51.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/StratifiedRemoveFolds",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/StratifiedRemoveFolds"
            },
            {
              "username": "weka",
              "algoname": "SpreadSubsample",
              "algolabel": "SpreadSubsample",
              "language": "Java",
              "card_line": "This is the SpreadSubsample filter, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/filters/supervised/instance/SpreadSubsample.html",
              "submitted_at": "2015-05-01T01:04:52.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/SpreadSubsample",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/SpreadSubsample"
            },
            {
              "username": "weka",
              "algoname": "SMOTE",
              "algolabel": "SMOTE",
              "language": "Java",
              "card_line": "This is the SMOTE filter, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/filters/supervised/instance/SMOTE.html",
              "submitted_at": "2015-05-01T01:04:53.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/SMOTE",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/SMOTE"
            },
            {
              "username": "weka",
              "algoname": "Resample",
              "algolabel": "Resample",
              "language": "Java",
              "card_line": "This is the Resample filter, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/filters/supervised/instance/Resample.html",
              "submitted_at": "2015-05-01T01:04:54.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/Resample",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/Resample"
            },
            {
              "username": "weka",
              "algoname": "PLSFilter",
              "algolabel": "PLSFilter",
              "language": "Java",
              "card_line": "This is the PLSFilter filter, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/filters/supervised/attribute/PLSFilter.html",
              "submitted_at": "2015-05-01T01:04:55.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/PLSFilter",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/PLSFilter"
            },
            {
              "username": "weka",
              "algoname": "Discretize",
              "algolabel": "Discretize",
              "language": "Java",
              "card_line": "This is the Discretize filter, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/filters/supervised/attribute/Discretize.html",
              "submitted_at": "2015-05-01T01:05:11.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/Discretize",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/Discretize"
            },
            {
              "username": "weka",
              "algoname": "ClassOrder",
              "algolabel": "ClassOrder",
              "language": "Java",
              "card_line": "This is the ClassOrder filter, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/filters/supervised/attribute/ClassOrder.html",
              "submitted_at": "2015-05-01T01:05:16.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/ClassOrder",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/ClassOrder"
            },
            {
              "username": "weka",
              "algoname": "AttributeSelection",
              "algolabel": "AttributeSelection",
              "language": "Java",
              "card_line": "This is the AttributeSelection filter, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/filters/supervised/attribute/AttributeSelection.html",
              "submitted_at": "2015-05-01T01:05:17.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/AttributeSelection",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/AttributeSelection"
            },
            {
              "username": "weka",
              "algoname": "AddClassification",
              "algolabel": "AddClassification",
              "language": "Java",
              "card_line": "This is the AddClassification filter, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/filters/supervised/attribute/AddClassification.html",
              "submitted_at": "2015-05-01T01:05:17.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/AddClassification",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/AddClassification"
            },
            {
              "username": "weka",
              "algoname": "Wavelet",
              "algolabel": "Wavelet",
              "language": "Java",
              "card_line": "This is the Wavelet filter, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/filters/unsupervised/attribute/Wavelet.html",
              "submitted_at": "2015-05-01T01:05:18.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/Wavelet",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/Wavelet"
            },
            {
              "username": "weka",
              "algoname": "TimeSeriesTranslate",
              "algolabel": "TimeSeriesTranslate",
              "language": "Java",
              "card_line": "This is the TimeSeriesTranslate filter, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/filters/unsupervised/attribute/TimeSeriesTranslate.html",
              "submitted_at": "2015-05-01T01:05:20.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/TimeSeriesTranslate",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/TimeSeriesTranslate"
            },
            {
              "username": "weka",
              "algoname": "TimeSeriesDelta",
              "algolabel": "TimeSeriesDelta",
              "language": "Java",
              "card_line": "This is the TimeSeriesDelta filter, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/filters/unsupervised/attribute/TimeSeriesDelta.html",
              "submitted_at": "2015-05-01T01:05:36.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/TimeSeriesDelta",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/TimeSeriesDelta"
            }
          ]
        }
      },
      {
        "request": {
          "url": "/meta/algorithms",
          "method": "GET",
          "headers": {
            "host": "algorithmia.com",
            "connection": "keep-alive",
            "pragma": "no-cache",
            "cache-control": "no-cache",
            "accept": "application/json, text/plain, */*",
            "dnt": "1",
            "x-xsrf-token": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "cors",
            "referer": "https://algorithmia.com/algorithms",
            "accept-encoding": "gzip, deflate, br",
            "accept-language": "en-US,en;q=0.9",
            "cookie": "ajs_group_id=null; ajs_anonymous_id=%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22; _ga=GA1.2.1872580011.1571235636; _fbp=fb.1.1571235636317.604574724; intercom-id-c9fj6354=01941621-342b-4320-ad75-53826b5a002c; hubspotutk=105fad8a9b12bfed67330a0dbfe12c61; _gid=GA1.2.1843278152.1572282100; __zlcmid=uzie5dAUbB300Y; __hstc=69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3; __hssrc=1; fs_intercom=4655074328608768:4513847218700288; XSRF-TOKEN=0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da; referrer=www.google.com; landing_page=https://algorithmia.com/; signup_session=true; ajs_user_id=%22acunniffe%22; fs_uid=rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636; new-algo-language=scala; __hssc=69686351.5.1572357353053; intercom-session-c9fj6354=L08zdks3K1FOZEs0NngyR2NDQjBxN3VMb1J3dE1QZ0t4N2piYXY5ZmlNWFNVMkxseFhidkxhZ0g4QStWV2hYay0tUUtjQUtFaUZvLzJIZ0drSFdnRjM0UT09--fc3e700881b2cd1507c47ce6533f5b502d54fb7c; ALGO_SESSION=ebee5e9d2f4b622441d7ec05e355f3e1b7290838-last-access=2019-10-29T14%3A07%3A05.187Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "cookies": {
            "ajs_group_id": "null",
            "ajs_anonymous_id": "%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22",
            "_ga": "GA1.2.1872580011.1571235636",
            "_fbp": "fb.1.1571235636317.604574724",
            "intercom-id-c9fj6354": "01941621-342b-4320-ad75-53826b5a002c",
            "hubspotutk": "105fad8a9b12bfed67330a0dbfe12c61",
            "_gid": "GA1.2.1843278152.1572282100",
            "__zlcmid": "uzie5dAUbB300Y",
            "__hstc": "69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3",
            "__hssrc": "1",
            "fs_intercom": "4655074328608768:4513847218700288",
            "XSRF-TOKEN": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "referrer": "www.google.com",
            "landing_page": "https://algorithmia.com/",
            "signup_session": "true",
            "ajs_user_id": "%22acunniffe%22",
            "fs_uid": "rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636",
            "new-algo-language": "scala",
            "__hssc": "69686351.5.1572357353053",
            "intercom-session-c9fj6354": "L08zdks3K1FOZEs0NngyR2NDQjBxN3VMb1J3dE1QZ0t4N2piYXY5ZmlNWFNVMkxseFhidkxhZ0g4QStWV2hYay0tUUtjQUtFaUZvLzJIZ0drSFdnRjM0UT09--fc3e700881b2cd1507c47ce6533f5b502d54fb7c",
            "ALGO_SESSION": "ebee5e9d2f4b622441d7ec05e355f3e1b7290838-last-access=2019-10-29T14%3A07%3A05.187Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "queryParameters": {
            "order": "starred",
            "tag": "machine-learning"
          }
        },
        "response": {
          "statusCode": 200,
          "headers": {
            "content-encoding": "gzip",
            "content-type": "application/json; charset=utf-8",
            "date": "Tue, 29 Oct 2019 14:07:11 GMT",
            "set-cookie": "ALGO_SESSION=6e5718c7d58d8739213e31a6a41bcf7b1d15cd6b-last-access=2019-10-29T14%3A07%3A11.938Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3; Max-Age=86400; Expires=Wed, 30 Oct 2019 14:07:11 GMT; Path=/; Domain=algorithmia.com; Secure; HTTPOnly",
            "strict-transport-security": "max-age=86400; includeSubDomains",
            "vary": "Accept-Encoding",
            "x-content-type-options": "nosniff",
            "x-frame-options": "DENY",
            "content-length": "6107",
            "connection": "keep-alive"
          },
          "body": [
            {
              "username": "deeplearning",
              "algoname": "Parsey",
              "algolabel": "Parsey McParseface",
              "language": "Scala",
              "card_line": "Parse sentences with ease.",
              "doc_url": "https://algorithmia.com/algorithms/deeplearning/Parsey",
              "api_url": "https://api.algorithmia.com/v1/algo/deeplearning/Parsey"
            },
            {
              "username": "PetiteProgrammer",
              "algoname": "ProgrammingLanguageIdentification",
              "algolabel": "Programming Language Identification",
              "language": "Python 3.x",
              "card_line": "Detect the programming language of source code",
              "doc_url": "https://algorithmia.com/algorithms/PetiteProgrammer/ProgrammingLanguageIdentification",
              "api_url": "https://api.algorithmia.com/v1/algo/PetiteProgrammer/ProgrammingLanguageIdentification"
            },
            {
              "username": "paranoia",
              "algoname": "FpGrowth",
              "algolabel": "FpGrowth",
              "language": "Java",
              "card_line": "A scalable method for finding frequent patterns within large datasets",
              "submitted_at": "2015-12-07T00:08:45.000Z",
              "doc_url": "https://algorithmia.com/algorithms/paranoia/FpGrowth",
              "api_url": "https://api.algorithmia.com/v1/algo/paranoia/FpGrowth"
            },
            {
              "username": "PetiteProgrammer",
              "algoname": "TextSimilarity",
              "algolabel": "Text Similarity",
              "language": "Python 3.x",
              "card_line": "Find the most similar text files within a collection of documents",
              "doc_url": "https://algorithmia.com/algorithms/PetiteProgrammer/TextSimilarity",
              "api_url": "https://api.algorithmia.com/v1/algo/PetiteProgrammer/TextSimilarity"
            },
            {
              "username": "Aluxian",
              "algoname": "AffinityAnalysisFPGrowth",
              "algolabel": "Affinity Analysis for Market Basket Recommendation (FP-Growth)",
              "language": "Java",
              "card_line": "Affinity analysis is an analytical technique that aims to discover relationships between activities and preferences that pertain to specific individuals.",
              "submitted_at": "2015-10-20T21:44:38.000Z",
              "doc_url": "https://algorithmia.com/algorithms/Aluxian/AffinityAnalysisFPGrowth",
              "api_url": "https://api.algorithmia.com/v1/algo/Aluxian/AffinityAnalysisFPGrowth"
            },
            {
              "username": "character_recognition",
              "algoname": "SmartTextExtraction",
              "algolabel": "Smart Text Extraction",
              "language": "Scala",
              "card_line": "Extract text the smart way",
              "doc_url": "https://algorithmia.com/algorithms/character_recognition/SmartTextExtraction",
              "api_url": "https://api.algorithmia.com/v1/algo/character_recognition/SmartTextExtraction"
            },
            {
              "username": "nlp",
              "algoname": "DocumentClassifier",
              "algolabel": "Document Classifier",
              "language": "Scala",
              "card_line": "Classify or Recommend documents with ease",
              "doc_url": "https://algorithmia.com/algorithms/nlp/DocumentClassifier",
              "api_url": "https://api.algorithmia.com/v1/algo/nlp/DocumentClassifier"
            },
            {
              "username": "bkyan",
              "algoname": "StyleThief",
              "algolabel": "StyleThief (Open Source)",
              "language": "Python 2.x",
              "card_line": "Anish Athalye's Neural Style Transfer Using TensorFlow",
              "doc_url": "https://algorithmia.com/algorithms/bkyan/StyleThief",
              "api_url": "https://api.algorithmia.com/v1/algo/bkyan/StyleThief"
            },
            {
              "username": "sklearn",
              "algoname": "GeographicSpectralClustering",
              "algolabel": "Geographic Spectral Clustering",
              "language": "Python 2.x",
              "card_line": "Spectral clustering for geographic (lat/long) data.",
              "submitted_at": "2015-05-01T01:02:21.000Z",
              "doc_url": "https://algorithmia.com/algorithms/sklearn/GeographicSpectralClustering",
              "api_url": "https://api.algorithmia.com/v1/algo/sklearn/GeographicSpectralClustering"
            },
            {
              "username": "deeplearning",
              "algoname": "ObjectDetectionCOCO",
              "algolabel": "ObjectDetection - COCO",
              "language": "Python 3.x",
              "card_line": "Detecting Objects in complex scenes",
              "doc_url": "https://algorithmia.com/algorithms/deeplearning/ObjectDetectionCOCO",
              "api_url": "https://api.algorithmia.com/v1/algo/deeplearning/ObjectDetectionCOCO"
            },
            {
              "username": "PetiteProgrammer",
              "algoname": "pythoncodeprediction",
              "algolabel": "Python Code Prediction",
              "language": "Python 3.x",
              "card_line": "Next word/sequence prediction for Python code",
              "doc_url": "https://algorithmia.com/algorithms/PetiteProgrammer/pythoncodeprediction",
              "api_url": "https://api.algorithmia.com/v1/algo/PetiteProgrammer/pythoncodeprediction"
            },
            {
              "username": "mheimann",
              "algoname": "RecognizeFaces",
              "algolabel": "Recognize Faces",
              "language": "Python 2.x",
              "card_line": "Uses a trained face recognizer to identify faces.",
              "submitted_at": "2015-10-06T00:50:11.000Z",
              "doc_url": "https://algorithmia.com/algorithms/mheimann/RecognizeFaces",
              "api_url": "https://api.algorithmia.com/v1/algo/mheimann/RecognizeFaces"
            },
            {
              "username": "cv",
              "algoname": "FaceRecognition",
              "algolabel": "Face Recognition",
              "language": "Python 2.x",
              "card_line": "Train and recognize human faces",
              "doc_url": "https://algorithmia.com/algorithms/cv/FaceRecognition",
              "api_url": "https://api.algorithmia.com/v1/algo/cv/FaceRecognition"
            },
            {
              "username": "mahout",
              "algoname": "Recommendation",
              "algolabel": "Recommendation",
              "language": "Java",
              "card_line": "Overview Eventually we will expand this to allow different parameters and options for neighborhood and similarity functi...",
              "submitted_at": "2015-06-29T21:29:16.000Z",
              "doc_url": "https://algorithmia.com/algorithms/mahout/Recommendation",
              "api_url": "https://api.algorithmia.com/v1/algo/mahout/Recommendation"
            },
            {
              "username": "PetiteProgrammer",
              "algoname": "ImageClassifier",
              "algolabel": "Image Classifier",
              "language": "Python 3.x",
              "card_line": "Highly Accurate Image Classifier",
              "doc_url": "https://algorithmia.com/algorithms/PetiteProgrammer/ImageClassifier",
              "api_url": "https://api.algorithmia.com/v1/algo/PetiteProgrammer/ImageClassifier"
            },
            {
              "username": "wuhuikai",
              "algoname": "A2RL_online",
              "algolabel": "A2RL: Auto Image Cropping",
              "language": "Python 3.x",
              "card_line": "Auto-crop given image to improve the aesthetic.",
              "doc_url": "https://algorithmia.com/algorithms/wuhuikai/A2RL_online",
              "api_url": "https://api.algorithmia.com/v1/algo/wuhuikai/A2RL_online"
            },
            {
              "username": "nlp",
              "algoname": "Doc2Vec",
              "algolabel": "Doc2Vec",
              "language": "Python 2.x",
              "card_line": "Vectorize documents of arbitrary length",
              "doc_url": "https://algorithmia.com/algorithms/nlp/Doc2Vec",
              "api_url": "https://api.algorithmia.com/v1/algo/nlp/Doc2Vec"
            },
            {
              "username": "dlib",
              "algoname": "FaceDetection",
              "algolabel": "Face Detection",
              "language": "Python 2.x",
              "card_line": "This algorithm detects human faces in given images.",
              "doc_url": "https://algorithmia.com/algorithms/dlib/FaceDetection",
              "api_url": "https://api.algorithmia.com/v1/algo/dlib/FaceDetection"
            },
            {
              "username": "cmartines",
              "algoname": "Chartie",
              "algolabel": "Chartie",
              "language": "Java",
              "card_line": "See beyond the numbers The new free web API that finds the  trend event  from your  numerical arrays For more detail : w...",
              "submitted_at": "2015-03-15T15:24:44.000Z",
              "doc_url": "https://algorithmia.com/algorithms/cmartines/Chartie",
              "api_url": "https://api.algorithmia.com/v1/algo/cmartines/Chartie"
            },
            {
              "username": "poze",
              "algoname": "poseEstimation_v2",
              "algolabel": "Pose Estimation",
              "language": "Python 3.x",
              "card_line": " Detect body pose for multiple people on image.",
              "doc_url": "https://algorithmia.com/algorithms/poze/poseEstimation_v2",
              "api_url": "https://api.algorithmia.com/v1/algo/poze/poseEstimation_v2"
            },
            {
              "username": "tags",
              "algoname": "RecommendGithub",
              "algolabel": "Recommend Github",
              "language": "Java",
              "card_line": "Recommend a github repos based on a given one",
              "submitted_at": "2016-02-02T23:35:11.000Z",
              "doc_url": "https://algorithmia.com/algorithms/tags/RecommendGithub",
              "api_url": "https://api.algorithmia.com/v1/algo/tags/RecommendGithub"
            },
            {
              "username": "weka",
              "algoname": "RandomForest",
              "algolabel": "RandomForest",
              "language": "Java",
              "card_line": "This is the RandomForest classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/trees/RandomForest.html",
              "submitted_at": "2015-05-01T01:13:46.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/RandomForest",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/RandomForest"
            },
            {
              "username": "PetiteProgrammer",
              "algoname": "DateExtractor",
              "algolabel": "DateExtractor",
              "language": "Python 3.x",
              "card_line": "Extracts dates from raw text",
              "doc_url": "https://algorithmia.com/algorithms/PetiteProgrammer/DateExtractor",
              "api_url": "https://api.algorithmia.com/v1/algo/PetiteProgrammer/DateExtractor"
            },
            {
              "username": "PetiteProgrammer",
              "algoname": "NamedEntityRecognition",
              "algolabel": "Named Entity Recognition (Detection of Persons, Dates, Locations and much more)",
              "language": "Python 3.x",
              "card_line": "Extracts entities out of text such as persons and organizations, with high precision. ",
              "doc_url": "https://algorithmia.com/algorithms/PetiteProgrammer/NamedEntityRecognition",
              "api_url": "https://api.algorithmia.com/v1/algo/PetiteProgrammer/NamedEntityRecognition"
            },
            {
              "username": "character_recognition",
              "algoname": "TextDetectionCTPN",
              "algolabel": "Text Detection (CTPN)",
              "language": "Python 2.x",
              "card_line": "detect text or words in any kind of image including both scanned documents and natural images.",
              "doc_url": "https://algorithmia.com/algorithms/character_recognition/TextDetectionCTPN",
              "api_url": "https://api.algorithmia.com/v1/algo/character_recognition/TextDetectionCTPN"
            },
            {
              "username": "berlius",
              "algoname": "colorize",
              "algolabel": "colorize",
              "language": "Python 2.x",
              "card_line": "Colorize black and white images with Berkeley model",
              "doc_url": "https://algorithmia.com/algorithms/berlius/colorize",
              "api_url": "https://api.algorithmia.com/v1/algo/berlius/colorize"
            },
            {
              "username": "media",
              "algoname": "ContentAwareResize",
              "algolabel": "Content Aware Resize",
              "language": "Python 2.x",
              "card_line": "Resize images automatically, without removing important features such as faces",
              "doc_url": "https://algorithmia.com/algorithms/media/ContentAwareResize",
              "api_url": "https://api.algorithmia.com/v1/algo/media/ContentAwareResize"
            },
            {
              "username": "character_recognition",
              "algoname": "tesseract",
              "algolabel": "tesseract",
              "language": "Python 2.x",
              "card_line": "extracts text with deep learning",
              "doc_url": "https://algorithmia.com/algorithms/character_recognition/tesseract",
              "api_url": "https://api.algorithmia.com/v1/algo/character_recognition/tesseract"
            },
            {
              "username": "weka",
              "algoname": "WekaClassification",
              "algolabel": "Weka Classification",
              "language": "Java",
              "card_line": "This is the main algorithm that all of the Weka classification algorithms call.",
              "submitted_at": "2015-10-02T20:39:49.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/WekaClassification",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/WekaClassification"
            },
            {
              "username": "ryval",
              "algoname": "LogisticRegression",
              "algolabel": "LogisticRegression",
              "language": "Python 2.x",
              "card_line": "Train a Logistic Regression model and use it to predict unknown classifiers.",
              "submitted_at": "2015-08-20T23:24:10.000Z",
              "doc_url": "https://algorithmia.com/algorithms/ryval/LogisticRegression",
              "api_url": "https://api.algorithmia.com/v1/algo/ryval/LogisticRegression"
            },
            {
              "username": "Wolverine",
              "algoname": "FastAnomalydetection",
              "algolabel": "Fast Anomaly Detection",
              "language": "Python 3.x",
              "card_line": "A fast Anomaly detection algorithm best used for IoT, Fraud detection and IT Ops",
              "doc_url": "https://algorithmia.com/algorithms/Wolverine/FastAnomalydetection",
              "api_url": "https://api.algorithmia.com/v1/algo/Wolverine/FastAnomalydetection"
            },
            {
              "username": "character_recognition",
              "algoname": "NaturalTextNet",
              "algolabel": "Natural Text Net",
              "language": "Python 3.x",
              "card_line": "Extracts text from natural scene images",
              "doc_url": "https://algorithmia.com/algorithms/character_recognition/NaturalTextNet",
              "api_url": "https://api.algorithmia.com/v1/algo/character_recognition/NaturalTextNet"
            },
            {
              "username": "mgomezm",
              "algoname": "AccelerometerClassifier",
              "algolabel": "AccelerometerClassifier",
              "language": "Java",
              "card_line": "Given x,y,z accelerometer readings, will determine whther the user is Stationary, Walking, or Running.",
              "submitted_at": "2015-10-19T21:17:41.000Z",
              "doc_url": "https://algorithmia.com/algorithms/mgomezm/AccelerometerClassifier",
              "api_url": "https://api.algorithmia.com/v1/algo/mgomezm/AccelerometerClassifier"
            },
            {
              "username": "wuhuikai",
              "algoname": "A2RL",
              "algolabel": "A2RL: Auto Image Cropping",
              "language": "Python 3.x",
              "card_line": "Auto-crop given image to improve the aesthetic.",
              "doc_url": "https://algorithmia.com/algorithms/wuhuikai/A2RL",
              "api_url": "https://api.algorithmia.com/v1/algo/wuhuikai/A2RL"
            },
            {
              "username": "PetiteProgrammer",
              "algoname": "NaturalLanguageUnderstanding",
              "algolabel": "Natural Language Understanding",
              "language": "Python 3.x",
              "card_line": "Understand intents, time, etc. from natural language ",
              "doc_url": "https://algorithmia.com/algorithms/PetiteProgrammer/NaturalLanguageUnderstanding",
              "api_url": "https://api.algorithmia.com/v1/algo/PetiteProgrammer/NaturalLanguageUnderstanding"
            },
            {
              "username": "ml",
              "algoname": "LearnHMM",
              "algolabel": "LearnHMM",
              "language": "Java",
              "card_line": "Learns a Hidden Markov Model (HMM) based on a series of example state transitions.",
              "submitted_at": "2015-10-19T21:17:18.000Z",
              "doc_url": "https://algorithmia.com/algorithms/ml/LearnHMM",
              "api_url": "https://api.algorithmia.com/v1/algo/ml/LearnHMM"
            },
            {
              "username": "sklearn",
              "algoname": "GeographicOutlierDetection",
              "algolabel": "Geographic Outlier Detection",
              "language": "Python 2.x",
              "card_line": "This algorithm finds the most unexpected events in a set of geographic events relative to some reference set of events.",
              "submitted_at": "2015-05-04T20:16:28.000Z",
              "doc_url": "https://algorithmia.com/algorithms/sklearn/GeographicOutlierDetection",
              "api_url": "https://api.algorithmia.com/v1/algo/sklearn/GeographicOutlierDetection"
            },
            {
              "username": "guardlogic",
              "algoname": "AdultImageClassifier",
              "algolabel": "AdultImageClassifier",
              "language": "Python 2.x",
              "card_line": "  Assesses if an image contains \"Adult\" content where the term \"Adult\" is defined as \"sexually explicit\".",
              "doc_url": "https://algorithmia.com/algorithms/guardlogic/AdultImageClassifier",
              "api_url": "https://api.algorithmia.com/v1/algo/guardlogic/AdultImageClassifier"
            },
            {
              "username": "classification",
              "algoname": "GenderByName",
              "algolabel": "Gender By Name (First, Last or Full Name) Classifier",
              "language": "Python 3.x",
              "card_line": "Fast gender classifier by name. Classification works with first and last name (order-independent); last name optional.",
              "doc_url": "https://algorithmia.com/algorithms/classification/GenderByName",
              "api_url": "https://api.algorithmia.com/v1/algo/classification/GenderByName"
            },
            {
              "username": "imageclassification",
              "algoname": "ResNetFeatureExtraction",
              "algolabel": "ResNet Feature Extraction",
              "language": "Python 3.x",
              "card_line": " Extract ResNet feature vectors from images. ",
              "doc_url": "https://algorithmia.com/algorithms/imageclassification/ResNetFeatureExtraction",
              "api_url": "https://api.algorithmia.com/v1/algo/imageclassification/ResNetFeatureExtraction"
            },
            {
              "username": "sfw",
              "algoname": "VideoNudityDetection",
              "algolabel": "Video Nudity Detection",
              "language": "Python 2.x",
              "card_line": "Detect Nudity in Video",
              "doc_url": "https://algorithmia.com/algorithms/sfw/VideoNudityDetection",
              "api_url": "https://api.algorithmia.com/v1/algo/sfw/VideoNudityDetection"
            },
            {
              "username": "ml",
              "algoname": "ClickStreamTransitions",
              "algolabel": "Click Stream Transitions",
              "language": "Java",
              "card_line": "Returns the top 5 most \"interesting\" transitions learned by the Hidden Markov Model.",
              "submitted_at": "2015-10-19T21:17:26.000Z",
              "doc_url": "https://algorithmia.com/algorithms/ml/ClickStreamTransitions",
              "api_url": "https://api.algorithmia.com/v1/algo/ml/ClickStreamTransitions"
            },
            {
              "username": "mheimann",
              "algoname": "TrainFaceRecognizer",
              "algolabel": "Train Face Recognizer",
              "language": "Python 2.x",
              "card_line": "Trains a face recognizer from a labeled set of faces.",
              "submitted_at": "2015-08-08T00:03:29.000Z",
              "doc_url": "https://algorithmia.com/algorithms/mheimann/TrainFaceRecognizer",
              "api_url": "https://api.algorithmia.com/v1/algo/mheimann/TrainFaceRecognizer"
            },
            {
              "username": "weka",
              "algoname": "WekaHierarchicalClusterer",
              "algolabel": "WekaHierarchicalClusterer",
              "language": "Java",
              "card_line": "Uses Hierarchical clusterer, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/clusterers/HierarchicalClusterer.html",
              "submitted_at": "2015-06-29T21:41:31.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/WekaHierarchicalClusterer",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/WekaHierarchicalClusterer"
            },
            {
              "username": "conctest",
              "algoname": "DigitRecognition",
              "algolabel": "Digit Recognition",
              "language": "Python 2.x",
              "card_line": "Recognizes handwritten digits using a pre trained  Convolutional Neural Network .",
              "submitted_at": "2015-06-22T15:39:45.000Z",
              "doc_url": "https://algorithmia.com/algorithms/conctest/DigitRecognition",
              "api_url": "https://api.algorithmia.com/v1/algo/conctest/DigitRecognition"
            },
            {
              "username": "kenny",
              "algoname": "WekaCluster",
              "algolabel": "Weka Cluster",
              "language": "Java",
              "card_line": "k-means clustering using the Weka machine learning library.",
              "submitted_at": "2015-04-22T01:40:46.000Z",
              "doc_url": "https://algorithmia.com/algorithms/kenny/WekaCluster",
              "api_url": "https://api.algorithmia.com/v1/algo/kenny/WekaCluster"
            },
            {
              "username": "imageclassification",
              "algoname": "ImageClassificationTrainer",
              "algolabel": "Image Classification Trainer",
              "language": "Python 3.x",
              "card_line": " Train fine-tuned image classifiers with transfer learning. ",
              "doc_url": "https://algorithmia.com/algorithms/imageclassification/ImageClassificationTrainer",
              "api_url": "https://api.algorithmia.com/v1/algo/imageclassification/ImageClassificationTrainer"
            },
            {
              "username": "buliginleo",
              "algoname": "NudityCheck",
              "algolabel": "NudityCheck",
              "language": "Python 3.x",
              "card_line": "Free neural network for check nudity by link",
              "doc_url": "https://algorithmia.com/algorithms/buliginleo/NudityCheck",
              "api_url": "https://api.algorithmia.com/v1/algo/buliginleo/NudityCheck"
            },
            {
              "username": "imageclassification",
              "algoname": "ResNetModelRunner",
              "algolabel": "ResNet Model Runner",
              "language": "Python 3.x",
              "card_line": " Deploy pre-trained ResNets for inference. ",
              "doc_url": "https://algorithmia.com/algorithms/imageclassification/ResNetModelRunner",
              "api_url": "https://api.algorithmia.com/v1/algo/imageclassification/ResNetModelRunner"
            },
            {
              "username": "thatguy2048",
              "algoname": "SimpleKNN",
              "algolabel": "SimpleKNN",
              "language": "Java",
              "card_line": "This is a simple KNN classifier which accepts a given number of training data points, classes for those points and sample points to evaluate.",
              "submitted_at": "2015-10-19T21:35:10.000Z",
              "doc_url": "https://algorithmia.com/algorithms/thatguy2048/SimpleKNN",
              "api_url": "https://api.algorithmia.com/v1/algo/thatguy2048/SimpleKNN"
            },
            {
              "username": "jtbandes",
              "algoname": "LinearRegression",
              "algolabel": "LinearRegression",
              "language": "Java",
              "card_line": "Performs a least-squares regression with one independent variable.",
              "submitted_at": "2015-10-19T21:19:41.000Z",
              "doc_url": "https://algorithmia.com/algorithms/jtbandes/LinearRegression",
              "api_url": "https://api.algorithmia.com/v1/algo/jtbandes/LinearRegression"
            },
            {
              "username": "mlolson",
              "algoname": "LinearRegression",
              "algolabel": "LinearRegression",
              "language": "Java",
              "submitted_at": "2015-10-19T21:17:10.000Z",
              "doc_url": "https://algorithmia.com/algorithms/mlolson/LinearRegression",
              "api_url": "https://api.algorithmia.com/v1/algo/mlolson/LinearRegression"
            },
            {
              "username": "weka",
              "algoname": "CsvToArff",
              "algolabel": "CsvToArff",
              "language": "Java",
              "card_line": "Converts .csv",
              "submitted_at": "2015-10-04T06:26:04.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/CsvToArff",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/CsvToArff"
            },
            {
              "username": "opencv",
              "algoname": "RTrees",
              "algolabel": "RTrees",
              "language": "Java",
              "card_line": "A basic interface to OpenCV's RTrees, as explained in http://docs.opencv.org/java/org/opencv/ml/CvRTrees.html.",
              "submitted_at": "2015-05-01T01:58:49.000Z",
              "doc_url": "https://algorithmia.com/algorithms/opencv/RTrees",
              "api_url": "https://api.algorithmia.com/v1/algo/opencv/RTrees"
            },
            {
              "username": "weka",
              "algoname": "BayesianLogisticRegression",
              "algolabel": "BayesianLogisticRegression",
              "language": "Java",
              "card_line": "This is the BayesianLogisticRegression classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/bayes/BayesianLogisticRegression.html",
              "submitted_at": "2015-05-01T01:33:01.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/BayesianLogisticRegression",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/BayesianLogisticRegression"
            },
            {
              "username": "weka",
              "algoname": "BayesNet",
              "algolabel": "BayesNet",
              "language": "Java",
              "card_line": "This is the BayesNet classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/bayes/BayesNet.html",
              "submitted_at": "2015-05-01T01:32:53.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/BayesNet",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/BayesNet"
            },
            {
              "username": "weka",
              "algoname": "NaiveBayes",
              "algolabel": "NaiveBayes",
              "language": "Java",
              "card_line": "This is the NaiveBayes classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/bayes/NaiveBayes.html",
              "submitted_at": "2015-05-01T01:32:40.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/NaiveBayes",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/NaiveBayes"
            },
            {
              "username": "weka",
              "algoname": "NaiveBayesSimple",
              "algolabel": "NaiveBayesSimple",
              "language": "Java",
              "card_line": "This is the NaiveBayesSimple classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/bayes/NaiveBayesSimple.html",
              "submitted_at": "2015-05-01T01:32:25.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/NaiveBayesSimple",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/NaiveBayesSimple"
            },
            {
              "username": "weka",
              "algoname": "MultilayerPerceptron",
              "algolabel": "MultilayerPerceptron",
              "language": "Java",
              "card_line": "This is the MultilayerPerceptron classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/functions/MultilayerPerceptron.html",
              "submitted_at": "2015-05-01T01:31:48.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/MultilayerPerceptron",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/MultilayerPerceptron"
            },
            {
              "username": "weka",
              "algoname": "SimpleLogistic",
              "algolabel": "SimpleLogistic",
              "language": "Java",
              "card_line": "This is the SimpleLogistic classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/functions/SimpleLogistic.html",
              "submitted_at": "2015-05-01T01:31:27.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/SimpleLogistic",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/SimpleLogistic"
            },
            {
              "username": "weka",
              "algoname": "DigitRecognition",
              "algolabel": "Digit Recognition",
              "language": "Java",
              "card_line": "The Digit Recognition algorithm that uses a Random Forest model trained on 50000 samples obtained from the MNIST digits dataset.",
              "submitted_at": "2015-05-01T01:23:58.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/DigitRecognition",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/DigitRecognition"
            },
            {
              "username": "weka",
              "algoname": "JRip",
              "algolabel": "JRip",
              "language": "Java",
              "card_line": "This is the JRip classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/rules/JRip.html",
              "submitted_at": "2015-05-01T01:17:19.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/JRip",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/JRip"
            },
            {
              "username": "weka",
              "algoname": "PART",
              "algolabel": "PART",
              "language": "Java",
              "card_line": "This is the PART classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/rules/PART.html",
              "submitted_at": "2015-05-01T01:16:57.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/PART",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/PART"
            },
            {
              "username": "weka",
              "algoname": "J48graft",
              "algolabel": "J48graft",
              "language": "Java",
              "card_line": "This is the J48graft classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/trees/J48graft.html",
              "submitted_at": "2015-05-01T01:14:08.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/J48graft",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/J48graft"
            },
            {
              "username": "weka",
              "algoname": "MathExpression",
              "algolabel": "MathExpression",
              "language": "Java",
              "card_line": "This is the MathExpression filter, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/filters/unsupervised/attribute/MathExpression.html",
              "submitted_at": "2015-05-01T01:11:02.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/MathExpression",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/MathExpression"
            },
            {
              "username": "weka",
              "algoname": "TimeSeriesDelta",
              "algolabel": "TimeSeriesDelta",
              "language": "Java",
              "card_line": "This is the TimeSeriesDelta filter, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/filters/unsupervised/attribute/TimeSeriesDelta.html",
              "submitted_at": "2015-05-01T01:05:36.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/TimeSeriesDelta",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/TimeSeriesDelta"
            },
            {
              "username": "weka",
              "algoname": "SMOTE",
              "algolabel": "SMOTE",
              "language": "Java",
              "card_line": "This is the SMOTE filter, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/filters/supervised/instance/SMOTE.html",
              "submitted_at": "2015-05-01T01:04:53.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/SMOTE",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/SMOTE"
            },
            {
              "username": "mahout",
              "algoname": "DigitRecognizer",
              "algolabel": "Digit Recognizer",
              "language": "Java",
              "card_line": "Applies a random forest model trained on the MNIST handwritten digit dataset to a 28 by 28 grayscale pixel grid, which is input as a double array of length 784.",
              "submitted_at": "2015-03-11T22:41:52.000Z",
              "doc_url": "https://algorithmia.com/algorithms/mahout/DigitRecognizer",
              "api_url": "https://api.algorithmia.com/v1/algo/mahout/DigitRecognizer"
            },
            {
              "username": "PetiteProgrammer",
              "algoname": "AutoComplete",
              "algolabel": "AutoComplete (Auto Complete, Next Word Prediction)",
              "language": "Python 3.x",
              "card_line": "Completes sentences based on user input ",
              "doc_url": "https://algorithmia.com/algorithms/PetiteProgrammer/AutoComplete",
              "api_url": "https://api.algorithmia.com/v1/algo/PetiteProgrammer/AutoComplete"
            },
            {
              "username": "o12827402",
              "algoname": "fjcut_v1",
              "algolabel": "fjcut_v1",
              "language": "Python 2.x",
              "card_line": "Overview Provide a short overview of your algorithm.",
              "doc_url": "https://algorithmia.com/algorithms/o12827402/fjcut_v1",
              "api_url": "https://api.algorithmia.com/v1/algo/o12827402/fjcut_v1"
            },
            {
              "username": "pappacena",
              "algoname": "kmeans",
              "algolabel": "k-means",
              "language": "Python 3.x",
              "card_line": "Simple k-means algorithm implementation",
              "doc_url": "https://algorithmia.com/algorithms/pappacena/kmeans",
              "api_url": "https://api.algorithmia.com/v1/algo/pappacena/kmeans"
            },
            {
              "username": "web",
              "algoname": "MaliciousDomainClassifier",
              "algolabel": "Malicious Domain Classifier",
              "language": "Java",
              "card_line": "Determine whether a domain name is safe or malicious",
              "doc_url": "https://algorithmia.com/algorithms/web/MaliciousDomainClassifier",
              "api_url": "https://api.algorithmia.com/v1/algo/web/MaliciousDomainClassifier"
            },
            {
              "username": "PetiteProgrammer",
              "algoname": "NumberExtractor",
              "algolabel": "NumberExtractor",
              "language": "Python 3.x",
              "card_line": "Extracts numbers (positive, negative and floats) from raw text.",
              "doc_url": "https://algorithmia.com/algorithms/PetiteProgrammer/NumberExtractor",
              "api_url": "https://api.algorithmia.com/v1/algo/PetiteProgrammer/NumberExtractor"
            },
            {
              "username": "lucianosantabrigida",
              "algoname": "ptwiki2vec",
              "algolabel": "ptwiki2vec",
              "language": "Python 3.x",
              "card_line": "[WIP] portuguese wikipedia vectors",
              "doc_url": "https://algorithmia.com/algorithms/lucianosantabrigida/ptwiki2vec",
              "api_url": "https://api.algorithmia.com/v1/algo/lucianosantabrigida/ptwiki2vec"
            },
            {
              "username": "dbgannon",
              "algoname": "SciDocClassifier",
              "algolabel": "SciDocClassifier",
              "language": "Python 3.x",
              "card_line": "Overview SciDocClassifier uses a ML Model created by Gensim Doc2vec to classify scientific abstracts into five...",
              "doc_url": "https://algorithmia.com/algorithms/dbgannon/SciDocClassifier",
              "api_url": "https://api.algorithmia.com/v1/algo/dbgannon/SciDocClassifier"
            },
            {
              "username": "jagiella",
              "algoname": "BirthDeathProcess",
              "algolabel": "BirthDeathProcess",
              "language": "Java",
              "submitted_at": "2015-10-19T21:52:34.000Z",
              "doc_url": "https://algorithmia.com/algorithms/jagiella/BirthDeathProcess",
              "api_url": "https://api.algorithmia.com/v1/algo/jagiella/BirthDeathProcess"
            },
            {
              "username": "paranoia",
              "algoname": "OrdinaryLeastSquares",
              "algolabel": "OrdinaryLeastSquares",
              "language": "Java",
              "submitted_at": "2015-10-19T21:15:20.000Z",
              "doc_url": "https://algorithmia.com/algorithms/paranoia/OrdinaryLeastSquares",
              "api_url": "https://api.algorithmia.com/v1/algo/paranoia/OrdinaryLeastSquares"
            },
            {
              "username": "weka",
              "algoname": "LogitBoost",
              "algolabel": "Logit Boost",
              "language": "Java",
              "card_line": "This is the LogitBoost classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/meta/LogitBoost.html",
              "submitted_at": "2015-10-02T19:03:17.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/LogitBoost",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/LogitBoost"
            },
            {
              "username": "weka",
              "algoname": "SimpleKMeansClusterer",
              "algolabel": "SimpleKMeansClusterer",
              "language": "Java",
              "card_line": "Uses SimpleKMeans clusterer, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/clusterers/SimpleKMeans.html",
              "submitted_at": "2015-06-29T21:55:45.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/SimpleKMeansClusterer",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/SimpleKMeansClusterer"
            },
            {
              "username": "weka",
              "algoname": "XMeansClusterer",
              "algolabel": "XMeansClusterer",
              "language": "Java",
              "card_line": "Uses XMeans clusterer, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/clusterers/XMeans.html",
              "submitted_at": "2015-06-29T21:54:59.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/XMeansClusterer",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/XMeansClusterer"
            },
            {
              "username": "weka",
              "algoname": "sIBClusterer",
              "algolabel": "sIBClusterer",
              "language": "Java",
              "card_line": "Uses sIB clusterer, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/clusterers/sIB.html",
              "submitted_at": "2015-06-29T21:53:29.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/sIBClusterer",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/sIBClusterer"
            },
            {
              "username": "weka",
              "algoname": "WekaMakeDensityBasedClusterer",
              "algolabel": "WekaMakeDensityBasedClusterer",
              "language": "Java",
              "card_line": "Uses MakeDensityBasedClusterer, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/clusterers/MakeDensityBasedClusterer.html",
              "submitted_at": "2015-06-29T21:52:03.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/WekaMakeDensityBasedClusterer",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/WekaMakeDensityBasedClusterer"
            },
            {
              "username": "weka",
              "algoname": "WekaFilteredClusterer",
              "algolabel": "WekaFilteredClusterer",
              "language": "Java",
              "card_line": "Uses Filtered clusterer, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/clusterers/FilteredClusterer.html",
              "submitted_at": "2015-06-29T21:40:46.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/WekaFilteredClusterer",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/WekaFilteredClusterer"
            },
            {
              "username": "weka",
              "algoname": "FarthestFirstClusterer",
              "algolabel": "FarthestFirstClusterer",
              "language": "Java",
              "card_line": "Uses Farthest First clusterer, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/clusterers/FarthestFirst.html",
              "submitted_at": "2015-06-29T21:39:53.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/FarthestFirstClusterer",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/FarthestFirstClusterer"
            },
            {
              "username": "weka",
              "algoname": "EMClusterer",
              "algolabel": "EMClusterer",
              "language": "Java",
              "card_line": "Uses EM clusterer, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/clusterers/EM.html",
              "submitted_at": "2015-06-29T21:38:54.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/EMClusterer",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/EMClusterer"
            },
            {
              "username": "weka",
              "algoname": "CobwebClusterer",
              "algolabel": "CobwebClusterer",
              "language": "Java",
              "card_line": "Uses Cobweb clusterer, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/clusterers/Cobweb.html",
              "submitted_at": "2015-06-29T21:38:19.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/CobwebClusterer",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/CobwebClusterer"
            },
            {
              "username": "weka",
              "algoname": "CLOPEClusterer",
              "algolabel": "CLOPEClusterer",
              "language": "Java",
              "card_line": "Uses CLOPE clusterer, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/clusterers/CLOPE.html",
              "submitted_at": "2015-06-29T21:36:19.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/CLOPEClusterer",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/CLOPEClusterer"
            },
            {
              "username": "opencv",
              "algoname": "ERTrees",
              "algolabel": "ERTrees",
              "language": "Java",
              "card_line": "A basic interface to OpenCV's ERTrees, as explained in http://docs.opencv.org/java/org/opencv/ml/CvERTrees.html.",
              "submitted_at": "2015-05-01T01:58:47.000Z",
              "doc_url": "https://algorithmia.com/algorithms/opencv/ERTrees",
              "api_url": "https://api.algorithmia.com/v1/algo/opencv/ERTrees"
            },
            {
              "username": "opencv",
              "algoname": "DTree",
              "algolabel": "DTree",
              "language": "Java",
              "card_line": "A basic interface to OpenCV's DTree, as explained in http://docs.opencv.org/java/org/opencv/ml/CvDTree.html.",
              "submitted_at": "2015-05-01T01:58:46.000Z",
              "doc_url": "https://algorithmia.com/algorithms/opencv/DTree",
              "api_url": "https://api.algorithmia.com/v1/algo/opencv/DTree"
            },
            {
              "username": "opencv",
              "algoname": "SVM",
              "algolabel": "SVM",
              "language": "Java",
              "card_line": "A basic interface to OpenCV's SVM, as explained in http://docs.opencv.org/java/org/opencv/ml/CvSVM.html .",
              "submitted_at": "2015-05-01T01:58:46.000Z",
              "doc_url": "https://algorithmia.com/algorithms/opencv/SVM",
              "api_url": "https://api.algorithmia.com/v1/algo/opencv/SVM"
            },
            {
              "username": "opencv",
              "algoname": "NormalBayesClassifier",
              "algolabel": "Normal Bayes Classifier",
              "language": "Java",
              "card_line": "A basic interface to OpenCV's DTree, as explained in http://docs.opencv.org/java/org/opencv/ml/CvNormalBayesClassifier.html .",
              "submitted_at": "2015-05-01T01:58:44.000Z",
              "doc_url": "https://algorithmia.com/algorithms/opencv/NormalBayesClassifier",
              "api_url": "https://api.algorithmia.com/v1/algo/opencv/NormalBayesClassifier"
            },
            {
              "username": "opencv",
              "algoname": "KNearest",
              "algolabel": "KNearest",
              "language": "Java",
              "card_line": "An interface to OpenCV's K nearest neighbor, as explained in http://docs.opencv.org/java/org/opencv/ml/CvKNearest.html .",
              "submitted_at": "2015-05-01T01:58:42.000Z",
              "doc_url": "https://algorithmia.com/algorithms/opencv/KNearest",
              "api_url": "https://api.algorithmia.com/v1/algo/opencv/KNearest"
            },
            {
              "username": "opencv",
              "algoname": "Boost",
              "algolabel": "Boost",
              "language": "Java",
              "card_line": "A basic interface to OpenCV's Boost, as explained in http://docs.opencv.org/java/org/opencv/ml/CvBoost.html .",
              "submitted_at": "2015-05-01T01:58:23.000Z",
              "doc_url": "https://algorithmia.com/algorithms/opencv/Boost",
              "api_url": "https://api.algorithmia.com/v1/algo/opencv/Boost"
            },
            {
              "username": "opencv",
              "algoname": "MLP",
              "algolabel": "MLP",
              "language": "Java",
              "card_line": "An interface to OpenCV's ANN_MLP, as explained in http://docs.opencv.org/java/org/opencv/ml/CvANN_MLP.html .",
              "submitted_at": "2015-05-01T01:58:23.000Z",
              "doc_url": "https://algorithmia.com/algorithms/opencv/MLP",
              "api_url": "https://api.algorithmia.com/v1/algo/opencv/MLP"
            },
            {
              "username": "opencv",
              "algoname": "GBTrees",
              "algolabel": "GBTrees",
              "language": "Java",
              "card_line": "A basic interface to OpenCV's DTree, as explained in http://docs.opencv.org/java/org/opencv/ml/CvGBTrees.html .",
              "submitted_at": "2015-05-01T01:58:21.000Z",
              "doc_url": "https://algorithmia.com/algorithms/opencv/GBTrees",
              "api_url": "https://api.algorithmia.com/v1/algo/opencv/GBTrees"
            },
            {
              "username": "weka",
              "algoname": "AODE",
              "algolabel": "AODE",
              "language": "Java",
              "card_line": "This is the AODE classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/bayes/AODE.html",
              "submitted_at": "2015-05-01T01:33:12.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/AODE",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/AODE"
            },
            {
              "username": "weka",
              "algoname": "AODEsr",
              "algolabel": "AODEsr",
              "language": "Java",
              "card_line": "This is the AODEsr classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/bayes/AODEsr.html",
              "submitted_at": "2015-05-01T01:33:05.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/AODEsr",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/AODEsr"
            },
            {
              "username": "weka",
              "algoname": "ComplementNaiveBayes",
              "algolabel": "ComplementNaiveBayes",
              "language": "Java",
              "card_line": "This is the ComplementNaiveBayes classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/bayes/ComplementNaiveBayes.html",
              "submitted_at": "2015-05-01T01:32:51.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/ComplementNaiveBayes",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/ComplementNaiveBayes"
            },
            {
              "username": "weka",
              "algoname": "DMNBtext",
              "algolabel": "DMNBtext",
              "language": "Java",
              "card_line": "This is the DMNBtext classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/bayes/DMNBtext.html",
              "submitted_at": "2015-05-01T01:32:49.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/DMNBtext",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/DMNBtext"
            },
            {
              "username": "weka",
              "algoname": "HNB",
              "algolabel": "HNB",
              "language": "Java",
              "card_line": "This is the HNB classifier, as implemented in Weka: http://weka.sourceforge.net/doc.stable/weka/classifiers/bayes/HNB.html",
              "submitted_at": "2015-05-01T01:32:47.000Z",
              "doc_url": "https://algorithmia.com/algorithms/weka/HNB",
              "api_url": "https://api.algorithmia.com/v1/algo/weka/HNB"
            }
          ]
        }
      },
      {
        "request": {
          "url": "/webapi/algorithms/classification/GenderByName",
          "method": "GET",
          "headers": {
            "host": "algorithmia.com",
            "connection": "keep-alive",
            "pragma": "no-cache",
            "cache-control": "no-cache",
            "accept": "application/json, text/plain, */*",
            "dnt": "1",
            "x-xsrf-token": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "cors",
            "referer": "https://algorithmia.com/tags/machine-learning?tab=recent",
            "accept-encoding": "gzip, deflate, br",
            "accept-language": "en-US,en;q=0.9",
            "cookie": "ajs_group_id=null; ajs_anonymous_id=%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22; _ga=GA1.2.1872580011.1571235636; _fbp=fb.1.1571235636317.604574724; intercom-id-c9fj6354=01941621-342b-4320-ad75-53826b5a002c; hubspotutk=105fad8a9b12bfed67330a0dbfe12c61; _gid=GA1.2.1843278152.1572282100; __zlcmid=uzie5dAUbB300Y; __hstc=69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3; __hssrc=1; fs_intercom=4655074328608768:4513847218700288; XSRF-TOKEN=0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da; referrer=www.google.com; landing_page=https://algorithmia.com/; signup_session=true; ajs_user_id=%22acunniffe%22; fs_uid=rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636; new-algo-language=scala; __hssc=69686351.5.1572357353053; intercom-session-c9fj6354=L08zdks3K1FOZEs0NngyR2NDQjBxN3VMb1J3dE1QZ0t4N2piYXY5ZmlNWFNVMkxseFhidkxhZ0g4QStWV2hYay0tUUtjQUtFaUZvLzJIZ0drSFdnRjM0UT09--fc3e700881b2cd1507c47ce6533f5b502d54fb7c; ALGO_SESSION=6e5718c7d58d8739213e31a6a41bcf7b1d15cd6b-last-access=2019-10-29T14%3A07%3A11.938Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "cookies": {
            "ajs_group_id": "null",
            "ajs_anonymous_id": "%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22",
            "_ga": "GA1.2.1872580011.1571235636",
            "_fbp": "fb.1.1571235636317.604574724",
            "intercom-id-c9fj6354": "01941621-342b-4320-ad75-53826b5a002c",
            "hubspotutk": "105fad8a9b12bfed67330a0dbfe12c61",
            "_gid": "GA1.2.1843278152.1572282100",
            "__zlcmid": "uzie5dAUbB300Y",
            "__hstc": "69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3",
            "__hssrc": "1",
            "fs_intercom": "4655074328608768:4513847218700288",
            "XSRF-TOKEN": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "referrer": "www.google.com",
            "landing_page": "https://algorithmia.com/",
            "signup_session": "true",
            "ajs_user_id": "%22acunniffe%22",
            "fs_uid": "rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636",
            "new-algo-language": "scala",
            "__hssc": "69686351.5.1572357353053",
            "intercom-session-c9fj6354": "L08zdks3K1FOZEs0NngyR2NDQjBxN3VMb1J3dE1QZ0t4N2piYXY5ZmlNWFNVMkxseFhidkxhZ0g4QStWV2hYay0tUUtjQUtFaUZvLzJIZ0drSFdnRjM0UT09--fc3e700881b2cd1507c47ce6533f5b502d54fb7c",
            "ALGO_SESSION": "6e5718c7d58d8739213e31a6a41bcf7b1d15cd6b-last-access=2019-10-29T14%3A07%3A11.938Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "queryParameters": {}
        },
        "response": {
          "statusCode": 200,
          "headers": {
            "content-encoding": "gzip",
            "content-type": "application/json; charset=utf-8",
            "date": "Tue, 29 Oct 2019 14:07:18 GMT",
            "set-cookie": "ALGO_SESSION=2269b0d0d22f724f13501df9fba4680aa6796765-last-access=2019-10-29T14%3A07%3A18.724Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3; Max-Age=86400; Expires=Wed, 30 Oct 2019 14:07:18 GMT; Path=/; Domain=algorithmia.com; Secure; HTTPOnly",
            "strict-transport-security": "max-age=86400; includeSubDomains",
            "vary": "Accept-Encoding",
            "x-content-type-options": "nosniff",
            "x-frame-options": "DENY",
            "content-length": "1048",
            "connection": "keep-alive"
          },
          "body": {
            "algorithm": {
              "algo_id": 105747,
              "object_id": "algo-a075cbaa-61a8-4ce7-a6e1-27e26c38cade",
              "username": "classification",
              "algoname": "GenderByName",
              "algolabel": "Gender By Name (First, Last or Full Name) Classifier",
              "language": "python3-1",
              "tag_line": "Fast gender classifier by name. Classification works with first and last name (order-independent); last name optional.",
              "card_line": "Fast gender classifier by name. Classification works with first and last name (order-independent); last name optional.",
              "summary": "<h2>Overview</h2>\n<p><em>Provide a short overview of your algorithm.</em></p>\n<h3>Applicable Scenarios and Problems</h3>\n<ul>\n<li>Know if the user who signed up on your website is female or male.</li>\n</ul>\n<h2>Usage</h2>\n<h3>Input</h3>\n<p><em>Describe the input fields for your algorithm. For example:</em></p>\n<table>\n<thead>\n<tr><th>Parameter</th><th>Description</th></tr>\n</thead>\n<tbody>\n<tr><td>name</td><td>The name of the person. Can be first, last or full name. Order of first and last name doesn't matter.</td></tr>\n</tbody>\n</table>\n<p><em>What data pre-processing would be great to perform on the input before calling this algorithm?</em></p>\n<h3>Output</h3>\n<p><em>Describe the output fields for your algorithm. For example:</em></p>\n<table>\n<thead>\n<tr><th>Parameter</th><th>Description</th></tr>\n</thead>\n<tbody>\n<tr><td>field</td><td>Description of field</td></tr>\n</tbody>\n</table>\n<h2>Examples</h2>\n<p><em>Provide and explain examples of input and output for your algorithm.</em></p>\n",
              "discoverable_world": true,
              "source_world": false,
              "license": "apl",
              "tags": [
                "classification",
                "classifier",
                "gender",
                "machine learning",
                "name"
              ],
              "stats": {
                "duration_avg": 1,
                "total_calls": 162456,
                "follower_count": 3,
                "vote_count": 3
              },
              "latest_version": {
                "version": "0.1.0",
                "version_hash": "341078476a23010355c82f6cf97cca2f13fcb314",
                "callable_world": true,
                "has_internet": false,
                "can_recurse": false,
                "cost": 0,
                "runner_image_name": "algorithmia/langserver-single",
                "runner_image_tag": "latest",
                "worker_type": "CPU",
                "requires_gpu": false
              },
              "sample": {
                "sample_input": "{\n  \"name\": \"John Smith\"\n}",
                "sample_output": "{\"gender\":{\"female\":0.0415,\"male\":0.9585},\"name\":\"John Smith\"}"
              },
              "current_user": {
                "is_member": false,
                "is_owner": false,
                "is_follower": false,
                "is_voter": false
              },
              "latestCommit": "341078476a23010355c82f6cf97cca2f13fcb314"
            }
          }
        }
      },
      {
        "request": {
          "url": "/webapi/users/acunniffe",
          "method": "GET",
          "headers": {
            "host": "algorithmia.com",
            "connection": "keep-alive",
            "pragma": "no-cache",
            "cache-control": "no-cache",
            "accept": "application/json, text/plain, */*",
            "dnt": "1",
            "x-xsrf-token": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "cors",
            "referer": "https://algorithmia.com/users/acunniffe/credentials/new",
            "accept-encoding": "gzip, deflate, br",
            "accept-language": "en-US,en;q=0.9",
            "cookie": "ajs_group_id=null; ajs_anonymous_id=%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22; _ga=GA1.2.1872580011.1571235636; _fbp=fb.1.1571235636317.604574724; intercom-id-c9fj6354=01941621-342b-4320-ad75-53826b5a002c; hubspotutk=105fad8a9b12bfed67330a0dbfe12c61; _gid=GA1.2.1843278152.1572282100; __zlcmid=uzie5dAUbB300Y; __hstc=69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3; __hssrc=1; fs_intercom=4655074328608768:4513847218700288; XSRF-TOKEN=0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da; referrer=www.google.com; landing_page=https://algorithmia.com/; signup_session=true; ajs_user_id=%22acunniffe%22; fs_uid=rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636; new-algo-language=scala; __hssc=69686351.5.1572357353053; intercom-session-c9fj6354=L08zdks3K1FOZEs0NngyR2NDQjBxN3VMb1J3dE1QZ0t4N2piYXY5ZmlNWFNVMkxseFhidkxhZ0g4QStWV2hYay0tUUtjQUtFaUZvLzJIZ0drSFdnRjM0UT09--fc3e700881b2cd1507c47ce6533f5b502d54fb7c; ALGO_SESSION=f8a319fc12c6d3628558497438fb223a7c2da4bb-last-access=2019-10-29T14%3A07%3A29.608Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "cookies": {
            "ajs_group_id": "null",
            "ajs_anonymous_id": "%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22",
            "_ga": "GA1.2.1872580011.1571235636",
            "_fbp": "fb.1.1571235636317.604574724",
            "intercom-id-c9fj6354": "01941621-342b-4320-ad75-53826b5a002c",
            "hubspotutk": "105fad8a9b12bfed67330a0dbfe12c61",
            "_gid": "GA1.2.1843278152.1572282100",
            "__zlcmid": "uzie5dAUbB300Y",
            "__hstc": "69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3",
            "__hssrc": "1",
            "fs_intercom": "4655074328608768:4513847218700288",
            "XSRF-TOKEN": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "referrer": "www.google.com",
            "landing_page": "https://algorithmia.com/",
            "signup_session": "true",
            "ajs_user_id": "%22acunniffe%22",
            "fs_uid": "rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636",
            "new-algo-language": "scala",
            "__hssc": "69686351.5.1572357353053",
            "intercom-session-c9fj6354": "L08zdks3K1FOZEs0NngyR2NDQjBxN3VMb1J3dE1QZ0t4N2piYXY5ZmlNWFNVMkxseFhidkxhZ0g4QStWV2hYay0tUUtjQUtFaUZvLzJIZ0drSFdnRjM0UT09--fc3e700881b2cd1507c47ce6533f5b502d54fb7c",
            "ALGO_SESSION": "f8a319fc12c6d3628558497438fb223a7c2da4bb-last-access=2019-10-29T14%3A07%3A29.608Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "queryParameters": {}
        },
        "response": {
          "statusCode": 200,
          "headers": {
            "cache-control": "no-cache, no-store",
            "content-encoding": "gzip",
            "content-type": "application/json; charset=utf-8",
            "date": "Tue, 29 Oct 2019 14:07:29 GMT",
            "set-cookie": "ALGO_SESSION=64879bc62bee014d9be7ea93ba0c333e1d856e99-last-access=2019-10-29T14%3A07%3A29.712Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3; Max-Age=86400; Expires=Wed, 30 Oct 2019 14:07:29 GMT; Path=/; Domain=algorithmia.com; Secure; HTTPOnly",
            "strict-transport-security": "max-age=86400; includeSubDomains",
            "vary": "Accept-Encoding",
            "x-content-type-options": "nosniff",
            "x-frame-options": "DENY",
            "content-length": "303",
            "connection": "keep-alive"
          },
          "body": {
            "user": {
              "username": "acunniffe",
              "fullName": "Aidan C",
              "registered": 1572357682000,
              "company_role": "engineer",
              "email": "acunniffe@gmail.com",
              "emailNotifications": true,
              "orgs": [
                {
                  "org_name": "aidan_org",
                  "org_label": "Aidan Org"
                }
              ],
              "default_api_key": "simjV77+6NjYPpPduWXrFKgWJp01",
              "invite_code": "",
              "account_balance": {
                "available_credits": 54782,
                "earned_credits": 0,
                "subscription_credits": 4782
              },
              "total_calls": 0,
              "reputation": 10,
              "requested_count": 0
            }
          }
        }
      },
      {
        "request": {
          "url": "/webapi/users/acunniffe/keys/simple",
          "method": "GET",
          "headers": {
            "host": "algorithmia.com",
            "connection": "keep-alive",
            "pragma": "no-cache",
            "cache-control": "no-cache",
            "accept": "application/json, text/plain, */*",
            "dnt": "1",
            "x-xsrf-token": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "cors",
            "referer": "https://algorithmia.com/users/acunniffe/credentials?showRecentlyCreatedKey=true",
            "accept-encoding": "gzip, deflate, br",
            "accept-language": "en-US,en;q=0.9",
            "cookie": "ajs_group_id=null; ajs_anonymous_id=%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22; _ga=GA1.2.1872580011.1571235636; _fbp=fb.1.1571235636317.604574724; intercom-id-c9fj6354=01941621-342b-4320-ad75-53826b5a002c; hubspotutk=105fad8a9b12bfed67330a0dbfe12c61; _gid=GA1.2.1843278152.1572282100; __zlcmid=uzie5dAUbB300Y; __hstc=69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3; __hssrc=1; fs_intercom=4655074328608768:4513847218700288; XSRF-TOKEN=0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da; referrer=www.google.com; landing_page=https://algorithmia.com/; signup_session=true; ajs_user_id=%22acunniffe%22; fs_uid=rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636; new-algo-language=scala; __hssc=69686351.5.1572357353053; intercom-session-c9fj6354=L08zdks3K1FOZEs0NngyR2NDQjBxN3VMb1J3dE1QZ0t4N2piYXY5ZmlNWFNVMkxseFhidkxhZ0g4QStWV2hYay0tUUtjQUtFaUZvLzJIZ0drSFdnRjM0UT09--fc3e700881b2cd1507c47ce6533f5b502d54fb7c; ALGO_SESSION=64879bc62bee014d9be7ea93ba0c333e1d856e99-last-access=2019-10-29T14%3A07%3A29.712Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "cookies": {
            "ajs_group_id": "null",
            "ajs_anonymous_id": "%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22",
            "_ga": "GA1.2.1872580011.1571235636",
            "_fbp": "fb.1.1571235636317.604574724",
            "intercom-id-c9fj6354": "01941621-342b-4320-ad75-53826b5a002c",
            "hubspotutk": "105fad8a9b12bfed67330a0dbfe12c61",
            "_gid": "GA1.2.1843278152.1572282100",
            "__zlcmid": "uzie5dAUbB300Y",
            "__hstc": "69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3",
            "__hssrc": "1",
            "fs_intercom": "4655074328608768:4513847218700288",
            "XSRF-TOKEN": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "referrer": "www.google.com",
            "landing_page": "https://algorithmia.com/",
            "signup_session": "true",
            "ajs_user_id": "%22acunniffe%22",
            "fs_uid": "rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636",
            "new-algo-language": "scala",
            "__hssc": "69686351.5.1572357353053",
            "intercom-session-c9fj6354": "L08zdks3K1FOZEs0NngyR2NDQjBxN3VMb1J3dE1QZ0t4N2piYXY5ZmlNWFNVMkxseFhidkxhZ0g4QStWV2hYay0tUUtjQUtFaUZvLzJIZ0drSFdnRjM0UT09--fc3e700881b2cd1507c47ce6533f5b502d54fb7c",
            "ALGO_SESSION": "64879bc62bee014d9be7ea93ba0c333e1d856e99-last-access=2019-10-29T14%3A07%3A29.712Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "queryParameters": {}
        },
        "response": {
          "statusCode": 200,
          "headers": {
            "cache-control": "no-cache, no-store",
            "content-encoding": "gzip",
            "content-type": "application/json; charset=utf-8",
            "date": "Tue, 29 Oct 2019 14:07:29 GMT",
            "set-cookie": "ALGO_SESSION=91eb1fd33e7a8d6d5ee6ac5ca1cd591f138122be-last-access=2019-10-29T14%3A07%3A29.778Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3; Max-Age=86400; Expires=Wed, 30 Oct 2019 14:07:29 GMT; Path=/; Domain=algorithmia.com; Secure; HTTPOnly",
            "strict-transport-security": "max-age=86400; includeSubDomains",
            "vary": "Accept-Encoding",
            "x-content-type-options": "nosniff",
            "x-frame-options": "DENY",
            "content-length": "304",
            "connection": "keep-alive"
          },
          "body": {
            "keys": [
              {
                "username": "acunniffe",
                "key_label": "fdsfsd",
                "created_at": 1572358050000,
                "permissions": {
                  "allow_data": false,
                  "allow_data_write": false,
                  "allow_algo": true,
                  "allow_web_algo": false,
                  "algo_acl": [
                    "algo://*"
                  ],
                  "allow_algo_management": false
                },
                "api_key_mask": "simgbG/9M",
                "key_type": "AlgorithmKey"
              },
              {
                "username": "acunniffe",
                "key_label": "default-key",
                "created_at": 1572357682000,
                "permissions": {
                  "allow_data": true,
                  "allow_data_write": true,
                  "allow_algo": true,
                  "allow_web_algo": true,
                  "algo_acl": [
                    "algo://*"
                  ],
                  "allow_algo_management": true
                },
                "api_key_mask": "simjV77+6",
                "api_key": "simjV77+6NjYPpPduWXrFKgWJp01",
                "key_type": "AlgorithmKey"
              },
              {
                "username": "acunniffe",
                "key_label": "aidankey",
                "created_at": 1572357899000,
                "permissions": {
                  "allow_data": false,
                  "allow_data_write": false,
                  "allow_algo": true,
                  "allow_web_algo": false,
                  "algo_acl": [
                    "algo://*"
                  ],
                  "allow_algo_management": false
                },
                "api_key_mask": "simdUXxIh",
                "key_type": "AlgorithmKey"
              }
            ]
          }
        }
      },
      {
        "request": {
          "url": "/v1/algo/classification/GenderByName/0.1.0",
          "method": "POST",
          "headers": {
            "host": "algorithmia.com",
            "connection": "keep-alive",
            "content-length": "21",
            "pragma": "no-cache",
            "cache-control": "no-cache",
            "accept": "application/json, text/javascript",
            "origin": "https://algorithmia.com",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36",
            "dnt": "1",
            "content-type": "application/json",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "cors",
            "referer": "https://algorithmia.com/algorithms/classification/GenderByName",
            "accept-encoding": "gzip, deflate, br",
            "accept-language": "en-US,en;q=0.9",
            "cookie": "ajs_group_id=null; ajs_anonymous_id=%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22; _ga=GA1.2.1872580011.1571235636; _fbp=fb.1.1571235636317.604574724; intercom-id-c9fj6354=01941621-342b-4320-ad75-53826b5a002c; hubspotutk=105fad8a9b12bfed67330a0dbfe12c61; _gid=GA1.2.1843278152.1572282100; __zlcmid=uzie5dAUbB300Y; __hstc=69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3; __hssrc=1; fs_intercom=4655074328608768:4513847218700288; XSRF-TOKEN=0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da; referrer=www.google.com; landing_page=https://algorithmia.com/; signup_session=true; ajs_user_id=%22acunniffe%22; fs_uid=rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636; new-algo-language=scala; __hssc=69686351.5.1572357353053; intercom-session-c9fj6354=L08zdks3K1FOZEs0NngyR2NDQjBxN3VMb1J3dE1QZ0t4N2piYXY5ZmlNWFNVMkxseFhidkxhZ0g4QStWV2hYay0tUUtjQUtFaUZvLzJIZ0drSFdnRjM0UT09--fc3e700881b2cd1507c47ce6533f5b502d54fb7c; ALGO_SESSION=2269b0d0d22f724f13501df9fba4680aa6796765-last-access=2019-10-29T14%3A07%3A18.724Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "cookies": {
            "ajs_group_id": "null",
            "ajs_anonymous_id": "%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22",
            "_ga": "GA1.2.1872580011.1571235636",
            "_fbp": "fb.1.1571235636317.604574724",
            "intercom-id-c9fj6354": "01941621-342b-4320-ad75-53826b5a002c",
            "hubspotutk": "105fad8a9b12bfed67330a0dbfe12c61",
            "_gid": "GA1.2.1843278152.1572282100",
            "__zlcmid": "uzie5dAUbB300Y",
            "__hstc": "69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3",
            "__hssrc": "1",
            "fs_intercom": "4655074328608768:4513847218700288",
            "XSRF-TOKEN": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "referrer": "www.google.com",
            "landing_page": "https://algorithmia.com/",
            "signup_session": "true",
            "ajs_user_id": "%22acunniffe%22",
            "fs_uid": "rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636",
            "new-algo-language": "scala",
            "__hssc": "69686351.5.1572357353053",
            "intercom-session-c9fj6354": "L08zdks3K1FOZEs0NngyR2NDQjBxN3VMb1J3dE1QZ0t4N2piYXY5ZmlNWFNVMkxseFhidkxhZ0g4QStWV2hYay0tUUtjQUtFaUZvLzJIZ0drSFdnRjM0UT09--fc3e700881b2cd1507c47ce6533f5b502d54fb7c",
            "ALGO_SESSION": "2269b0d0d22f724f13501df9fba4680aa6796765-last-access=2019-10-29T14%3A07%3A18.724Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "queryParameters": {},
          "body": {
            "name": "John Smith"
          }
        },
        "response": {
          "statusCode": 200,
          "headers": {
            "content-encoding": "gzip",
            "content-type": "application/json; charset=utf-8",
            "date": "Tue, 29 Oct 2019 14:07:31 GMT",
            "strict-transport-security": "max-age=86400; includeSubDomains",
            "vary": "Accept-Encoding",
            "x-content-type-options": "nosniff",
            "x-frame-options": "DENY",
            "content-length": "130",
            "connection": "keep-alive"
          },
          "body": {
            "result": {
              "gender": {
                "female": 0.0415,
                "male": 0.9585
              },
              "name": "John Smith"
            },
            "metadata": {
              "content_type": "json",
              "duration": 0.001366435
            }
          }
        }
      },
      {
        "request": {
          "url": "/webapi/users/acunniffe/keys/simple",
          "method": "GET",
          "headers": {
            "host": "algorithmia.com",
            "connection": "keep-alive",
            "pragma": "no-cache",
            "cache-control": "no-cache",
            "accept": "application/json, text/plain, */*",
            "dnt": "1",
            "x-xsrf-token": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "cors",
            "referer": "https://algorithmia.com/users/acunniffe/credentials?showRecentlyCreatedKey=true",
            "accept-encoding": "gzip, deflate, br",
            "accept-language": "en-US,en;q=0.9",
            "cookie": "ajs_group_id=null; ajs_anonymous_id=%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22; _ga=GA1.2.1872580011.1571235636; _fbp=fb.1.1571235636317.604574724; intercom-id-c9fj6354=01941621-342b-4320-ad75-53826b5a002c; hubspotutk=105fad8a9b12bfed67330a0dbfe12c61; _gid=GA1.2.1843278152.1572282100; __zlcmid=uzie5dAUbB300Y; __hstc=69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3; __hssrc=1; fs_intercom=4655074328608768:4513847218700288; XSRF-TOKEN=0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da; referrer=www.google.com; landing_page=https://algorithmia.com/; signup_session=true; ajs_user_id=%22acunniffe%22; fs_uid=rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636; new-algo-language=scala; __hssc=69686351.5.1572357353053; intercom-session-c9fj6354=L08zdks3K1FOZEs0NngyR2NDQjBxN3VMb1J3dE1QZ0t4N2piYXY5ZmlNWFNVMkxseFhidkxhZ0g4QStWV2hYay0tUUtjQUtFaUZvLzJIZ0drSFdnRjM0UT09--fc3e700881b2cd1507c47ce6533f5b502d54fb7c; ALGO_SESSION=28e5a6b69eac1ae91d65190e1a358f16d34002c8-last-access=2019-10-29T14%3A07%3A36.127Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "cookies": {
            "ajs_group_id": "null",
            "ajs_anonymous_id": "%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22",
            "_ga": "GA1.2.1872580011.1571235636",
            "_fbp": "fb.1.1571235636317.604574724",
            "intercom-id-c9fj6354": "01941621-342b-4320-ad75-53826b5a002c",
            "hubspotutk": "105fad8a9b12bfed67330a0dbfe12c61",
            "_gid": "GA1.2.1843278152.1572282100",
            "__zlcmid": "uzie5dAUbB300Y",
            "__hstc": "69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3",
            "__hssrc": "1",
            "fs_intercom": "4655074328608768:4513847218700288",
            "XSRF-TOKEN": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "referrer": "www.google.com",
            "landing_page": "https://algorithmia.com/",
            "signup_session": "true",
            "ajs_user_id": "%22acunniffe%22",
            "fs_uid": "rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636",
            "new-algo-language": "scala",
            "__hssc": "69686351.5.1572357353053",
            "intercom-session-c9fj6354": "L08zdks3K1FOZEs0NngyR2NDQjBxN3VMb1J3dE1QZ0t4N2piYXY5ZmlNWFNVMkxseFhidkxhZ0g4QStWV2hYay0tUUtjQUtFaUZvLzJIZ0drSFdnRjM0UT09--fc3e700881b2cd1507c47ce6533f5b502d54fb7c",
            "ALGO_SESSION": "28e5a6b69eac1ae91d65190e1a358f16d34002c8-last-access=2019-10-29T14%3A07%3A36.127Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "queryParameters": {}
        },
        "response": {
          "statusCode": 200,
          "headers": {
            "cache-control": "no-cache, no-store",
            "content-encoding": "gzip",
            "content-type": "application/json; charset=utf-8",
            "date": "Tue, 29 Oct 2019 14:07:36 GMT",
            "set-cookie": "ALGO_SESSION=ffac66b30439e5dafce790aeb1539578c35e997b-last-access=2019-10-29T14%3A07%3A36.212Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3; Max-Age=86400; Expires=Wed, 30 Oct 2019 14:07:36 GMT; Path=/; Domain=algorithmia.com; Secure; HTTPOnly",
            "strict-transport-security": "max-age=86400; includeSubDomains",
            "vary": "Accept-Encoding",
            "x-content-type-options": "nosniff",
            "x-frame-options": "DENY",
            "content-length": "320",
            "connection": "keep-alive"
          },
          "body": {
            "keys": [
              {
                "username": "acunniffe",
                "key_label": "fdsfsd",
                "created_at": 1572358050000,
                "permissions": {
                  "allow_data": false,
                  "allow_data_write": false,
                  "allow_algo": true,
                  "allow_web_algo": false,
                  "algo_acl": [
                    "algo://*"
                  ],
                  "allow_algo_management": false
                },
                "api_key_mask": "simgbG/9M",
                "key_type": "AlgorithmKey"
              },
              {
                "username": "acunniffe",
                "key_label": "",
                "created_at": 1572358056000,
                "permissions": {
                  "allow_data": true,
                  "allow_data_write": true,
                  "allow_algo": true,
                  "allow_web_algo": false,
                  "algo_acl": [
                    "algo://*"
                  ],
                  "allow_algo_management": false
                },
                "api_key_mask": "simaMET8O",
                "key_type": "AlgorithmKey"
              },
              {
                "username": "acunniffe",
                "key_label": "default-key",
                "created_at": 1572357682000,
                "permissions": {
                  "allow_data": true,
                  "allow_data_write": true,
                  "allow_algo": true,
                  "allow_web_algo": true,
                  "algo_acl": [
                    "algo://*"
                  ],
                  "allow_algo_management": true
                },
                "api_key_mask": "simjV77+6",
                "api_key": "simjV77+6NjYPpPduWXrFKgWJp01",
                "key_type": "AlgorithmKey"
              },
              {
                "username": "acunniffe",
                "key_label": "aidankey",
                "created_at": 1572357899000,
                "permissions": {
                  "allow_data": false,
                  "allow_data_write": false,
                  "allow_algo": true,
                  "allow_web_algo": false,
                  "algo_acl": [
                    "algo://*"
                  ],
                  "allow_algo_management": false
                },
                "api_key_mask": "simdUXxIh",
                "key_type": "AlgorithmKey"
              }
            ]
          }
        }
      },
      {
        "request": {
          "url": "/v1/algorithms/acunniffe",
          "method": "POST",
          "headers": {
            "host": "algorithmia.com",
            "connection": "keep-alive",
            "content-length": "232",
            "pragma": "no-cache",
            "cache-control": "no-cache",
            "accept": "application/json, text/plain, */*",
            "origin": "https://algorithmia.com",
            "x-xsrf-token": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36",
            "dnt": "1",
            "content-type": "application/json;charset=UTF-8",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "cors",
            "referer": "https://algorithmia.com/users/acunniffe/credentials",
            "accept-encoding": "gzip, deflate, br",
            "accept-language": "en-US,en;q=0.9",
            "cookie": "ajs_group_id=null; ajs_anonymous_id=%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22; _ga=GA1.2.1872580011.1571235636; _fbp=fb.1.1571235636317.604574724; intercom-id-c9fj6354=01941621-342b-4320-ad75-53826b5a002c; hubspotutk=105fad8a9b12bfed67330a0dbfe12c61; _gid=GA1.2.1843278152.1572282100; __zlcmid=uzie5dAUbB300Y; __hstc=69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3; __hssrc=1; fs_intercom=4655074328608768:4513847218700288; XSRF-TOKEN=0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da; referrer=www.google.com; landing_page=https://algorithmia.com/; signup_session=true; ajs_user_id=%22acunniffe%22; fs_uid=rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636; new-algo-language=scala; __hssc=69686351.5.1572357353053; intercom-session-c9fj6354=L08zdks3K1FOZEs0NngyR2NDQjBxN3VMb1J3dE1QZ0t4N2piYXY5ZmlNWFNVMkxseFhidkxhZ0g4QStWV2hYay0tUUtjQUtFaUZvLzJIZ0drSFdnRjM0UT09--fc3e700881b2cd1507c47ce6533f5b502d54fb7c; ALGO_SESSION=ffac66b30439e5dafce790aeb1539578c35e997b-last-access=2019-10-29T14%3A07%3A36.212Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "cookies": {
            "ajs_group_id": "null",
            "ajs_anonymous_id": "%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22",
            "_ga": "GA1.2.1872580011.1571235636",
            "_fbp": "fb.1.1571235636317.604574724",
            "intercom-id-c9fj6354": "01941621-342b-4320-ad75-53826b5a002c",
            "hubspotutk": "105fad8a9b12bfed67330a0dbfe12c61",
            "_gid": "GA1.2.1843278152.1572282100",
            "__zlcmid": "uzie5dAUbB300Y",
            "__hstc": "69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3",
            "__hssrc": "1",
            "fs_intercom": "4655074328608768:4513847218700288",
            "XSRF-TOKEN": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "referrer": "www.google.com",
            "landing_page": "https://algorithmia.com/",
            "signup_session": "true",
            "ajs_user_id": "%22acunniffe%22",
            "fs_uid": "rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636",
            "new-algo-language": "scala",
            "__hssc": "69686351.5.1572357353053",
            "intercom-session-c9fj6354": "L08zdks3K1FOZEs0NngyR2NDQjBxN3VMb1J3dE1QZ0t4N2piYXY5ZmlNWFNVMkxseFhidkxhZ0g4QStWV2hYay0tUUtjQUtFaUZvLzJIZ0drSFdnRjM0UT09--fc3e700881b2cd1507c47ce6533f5b502d54fb7c",
            "ALGO_SESSION": "ffac66b30439e5dafce790aeb1539578c35e997b-last-access=2019-10-29T14%3A07%3A36.212Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "queryParameters": {},
          "body": {
            "details": {
              "tagline": "",
              "label": "abc"
            },
            "name": "abc",
            "settings": {
              "algorithm_callability": "private",
              "source_visibility": "closed",
              "language": "scala",
              "license": "apl",
              "network_access": "full",
              "pipeline_enabled": true,
              "environment": "cpu"
            }
          }
        },
        "response": {
          "statusCode": 201,
          "headers": {
            "content-encoding": "gzip",
            "content-type": "application/json; charset=utf-8",
            "date": "Tue, 29 Oct 2019 14:07:42 GMT",
            "set-cookie": "ALGO_SESSION=b86db1ce1193bad9686965bfe292a20cae315f31-last-access=2019-10-29T14%3A07%3A42.616Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3; Max-Age=86400; Expires=Wed, 30 Oct 2019 14:07:42 GMT; Path=/; Domain=algorithmia.com; Secure; HTTPOnly",
            "strict-transport-security": "max-age=86400; includeSubDomains",
            "vary": "Accept-Encoding",
            "x-content-type-options": "nosniff",
            "x-frame-options": "DENY",
            "content-length": "179",
            "connection": "keep-alive"
          },
          "body": null
        }
      },
      {
        "request": {
          "url": "/webapi/algorithms/acunniffe/abc",
          "method": "GET",
          "headers": {
            "host": "algorithmia.com",
            "connection": "keep-alive",
            "pragma": "no-cache",
            "cache-control": "no-cache",
            "accept": "application/json, text/plain, */*",
            "dnt": "1",
            "x-xsrf-token": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "cors",
            "referer": "https://algorithmia.com/algorithms/acunniffe/abc",
            "accept-encoding": "gzip, deflate, br",
            "accept-language": "en-US,en;q=0.9",
            "cookie": "ajs_group_id=null; ajs_anonymous_id=%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22; _ga=GA1.2.1872580011.1571235636; _fbp=fb.1.1571235636317.604574724; intercom-id-c9fj6354=01941621-342b-4320-ad75-53826b5a002c; hubspotutk=105fad8a9b12bfed67330a0dbfe12c61; _gid=GA1.2.1843278152.1572282100; __zlcmid=uzie5dAUbB300Y; __hstc=69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3; __hssrc=1; fs_intercom=4655074328608768:4513847218700288; XSRF-TOKEN=0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da; referrer=www.google.com; landing_page=https://algorithmia.com/; signup_session=true; ajs_user_id=%22acunniffe%22; fs_uid=rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636; new-algo-language=scala; __hssc=69686351.5.1572357353053; intercom-session-c9fj6354=L08zdks3K1FOZEs0NngyR2NDQjBxN3VMb1J3dE1QZ0t4N2piYXY5ZmlNWFNVMkxseFhidkxhZ0g4QStWV2hYay0tUUtjQUtFaUZvLzJIZ0drSFdnRjM0UT09--fc3e700881b2cd1507c47ce6533f5b502d54fb7c; ALGO_SESSION=b86db1ce1193bad9686965bfe292a20cae315f31-last-access=2019-10-29T14%3A07%3A42.616Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3; flash_modal=#algo-created"
          },
          "cookies": {
            "ajs_group_id": "null",
            "ajs_anonymous_id": "%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22",
            "_ga": "GA1.2.1872580011.1571235636",
            "_fbp": "fb.1.1571235636317.604574724",
            "intercom-id-c9fj6354": "01941621-342b-4320-ad75-53826b5a002c",
            "hubspotutk": "105fad8a9b12bfed67330a0dbfe12c61",
            "_gid": "GA1.2.1843278152.1572282100",
            "__zlcmid": "uzie5dAUbB300Y",
            "__hstc": "69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3",
            "__hssrc": "1",
            "fs_intercom": "4655074328608768:4513847218700288",
            "XSRF-TOKEN": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "referrer": "www.google.com",
            "landing_page": "https://algorithmia.com/",
            "signup_session": "true",
            "ajs_user_id": "%22acunniffe%22",
            "fs_uid": "rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636",
            "new-algo-language": "scala",
            "__hssc": "69686351.5.1572357353053",
            "intercom-session-c9fj6354": "L08zdks3K1FOZEs0NngyR2NDQjBxN3VMb1J3dE1QZ0t4N2piYXY5ZmlNWFNVMkxseFhidkxhZ0g4QStWV2hYay0tUUtjQUtFaUZvLzJIZ0drSFdnRjM0UT09--fc3e700881b2cd1507c47ce6533f5b502d54fb7c",
            "ALGO_SESSION": "b86db1ce1193bad9686965bfe292a20cae315f31-last-access=2019-10-29T14%3A07%3A42.616Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3",
            "flash_modal": "#algo-created"
          },
          "queryParameters": {}
        },
        "response": {
          "statusCode": 200,
          "headers": {
            "content-encoding": "gzip",
            "content-type": "application/json; charset=utf-8",
            "date": "Tue, 29 Oct 2019 14:07:43 GMT",
            "set-cookie": "ALGO_SESSION=80af101f77fe23017598d6b4db18f532c65e9ce7-last-access=2019-10-29T14%3A07%3A43.442Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3; Max-Age=86400; Expires=Wed, 30 Oct 2019 14:07:43 GMT; Path=/; Domain=algorithmia.com; Secure; HTTPOnly",
            "strict-transport-security": "max-age=86400; includeSubDomains",
            "vary": "Accept-Encoding",
            "x-content-type-options": "nosniff",
            "x-frame-options": "DENY",
            "content-length": "255",
            "connection": "keep-alive"
          },
          "body": {
            "algorithm": {
              "algo_id": 130238,
              "object_id": "algo-235955d5-d716-47a4-b9fa-a4ad372f98c6",
              "username": "acunniffe",
              "algoname": "abc",
              "algolabel": "abc",
              "language": "scala",
              "tag_line": "",
              "discoverable_world": false,
              "source_world": false,
              "license": "apl",
              "tags": [],
              "stats": {
                "total_calls": 0,
                "follower_count": 1,
                "vote_count": 0
              },
              "current_user": {
                "is_member": true,
                "is_owner": true,
                "is_follower": true,
                "is_voter": false
              }
            }
          }
        }
      },
      {
        "request": {
          "url": "/notifications",
          "method": "GET",
          "headers": {
            "host": "algorithmia.com",
            "connection": "keep-alive",
            "pragma": "no-cache",
            "cache-control": "no-cache",
            "accept": "application/json, text/plain, */*",
            "dnt": "1",
            "x-xsrf-token": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "cors",
            "referer": "https://algorithmia.com/algorithms/acunniffe/abc",
            "accept-encoding": "gzip, deflate, br",
            "accept-language": "en-US,en;q=0.9",
            "cookie": "ajs_group_id=null; ajs_anonymous_id=%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22; _ga=GA1.2.1872580011.1571235636; _fbp=fb.1.1571235636317.604574724; intercom-id-c9fj6354=01941621-342b-4320-ad75-53826b5a002c; hubspotutk=105fad8a9b12bfed67330a0dbfe12c61; _gid=GA1.2.1843278152.1572282100; __zlcmid=uzie5dAUbB300Y; __hstc=69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3; __hssrc=1; fs_intercom=4655074328608768:4513847218700288; XSRF-TOKEN=0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da; referrer=www.google.com; landing_page=https://algorithmia.com/; signup_session=true; ajs_user_id=%22acunniffe%22; fs_uid=rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636; new-algo-language=scala; __hssc=69686351.5.1572357353053; intercom-session-c9fj6354=L08zdks3K1FOZEs0NngyR2NDQjBxN3VMb1J3dE1QZ0t4N2piYXY5ZmlNWFNVMkxseFhidkxhZ0g4QStWV2hYay0tUUtjQUtFaUZvLzJIZ0drSFdnRjM0UT09--fc3e700881b2cd1507c47ce6533f5b502d54fb7c; ALGO_SESSION=80af101f77fe23017598d6b4db18f532c65e9ce7-last-access=2019-10-29T14%3A07%3A43.442Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "cookies": {
            "ajs_group_id": "null",
            "ajs_anonymous_id": "%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22",
            "_ga": "GA1.2.1872580011.1571235636",
            "_fbp": "fb.1.1571235636317.604574724",
            "intercom-id-c9fj6354": "01941621-342b-4320-ad75-53826b5a002c",
            "hubspotutk": "105fad8a9b12bfed67330a0dbfe12c61",
            "_gid": "GA1.2.1843278152.1572282100",
            "__zlcmid": "uzie5dAUbB300Y",
            "__hstc": "69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3",
            "__hssrc": "1",
            "fs_intercom": "4655074328608768:4513847218700288",
            "XSRF-TOKEN": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "referrer": "www.google.com",
            "landing_page": "https://algorithmia.com/",
            "signup_session": "true",
            "ajs_user_id": "%22acunniffe%22",
            "fs_uid": "rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636",
            "new-algo-language": "scala",
            "__hssc": "69686351.5.1572357353053",
            "intercom-session-c9fj6354": "L08zdks3K1FOZEs0NngyR2NDQjBxN3VMb1J3dE1QZ0t4N2piYXY5ZmlNWFNVMkxseFhidkxhZ0g4QStWV2hYay0tUUtjQUtFaUZvLzJIZ0drSFdnRjM0UT09--fc3e700881b2cd1507c47ce6533f5b502d54fb7c",
            "ALGO_SESSION": "80af101f77fe23017598d6b4db18f532c65e9ce7-last-access=2019-10-29T14%3A07%3A43.442Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "queryParameters": {}
        },
        "response": {
          "statusCode": 200,
          "headers": {
            "content-encoding": "gzip",
            "content-type": "application/json; charset=utf-8",
            "date": "Tue, 29 Oct 2019 14:07:43 GMT",
            "set-cookie": "ALGO_SESSION=f13e0685202e6ae5f8de34644f1786e11ef83a07-last-access=2019-10-29T14%3A07%3A43.635Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3; Max-Age=86400; Expires=Wed, 30 Oct 2019 14:07:43 GMT; Path=/; Domain=algorithmia.com; Secure; HTTPOnly",
            "strict-transport-security": "max-age=86400; includeSubDomains",
            "vary": "Accept-Encoding",
            "x-content-type-options": "nosniff",
            "x-frame-options": "DENY",
            "content-length": "243",
            "connection": "keep-alive"
          },
          "body": [
            {
              "notification_id": "notif-016e17d233b7-5c270611-8927-4efb-8743-78eec241f572",
              "to_username": "acunniffe",
              "event_type": "system",
              "event_context": {
                "message": "Welcome to Algorithmia! - We've added 50k credits to your account!",
                "url": "/users/acunniffe/account",
                "event_type": "system"
              },
              "read_at": 1572357947000,
              "created_at": 1572357682000
            }
          ]
        }
      },
      {
        "request": {
          "url": "/webapi/v1/languages",
          "method": "GET",
          "headers": {
            "host": "algorithmia.com",
            "connection": "keep-alive",
            "pragma": "no-cache",
            "cache-control": "no-cache",
            "accept": "application/json, text/plain, */*",
            "dnt": "1",
            "x-xsrf-token": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "cors",
            "referer": "https://algorithmia.com/algorithms/acunniffe/abc",
            "accept-encoding": "gzip, deflate, br",
            "accept-language": "en-US,en;q=0.9",
            "cookie": "ajs_group_id=null; ajs_anonymous_id=%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22; _ga=GA1.2.1872580011.1571235636; _fbp=fb.1.1571235636317.604574724; intercom-id-c9fj6354=01941621-342b-4320-ad75-53826b5a002c; hubspotutk=105fad8a9b12bfed67330a0dbfe12c61; _gid=GA1.2.1843278152.1572282100; __zlcmid=uzie5dAUbB300Y; __hstc=69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3; __hssrc=1; fs_intercom=4655074328608768:4513847218700288; XSRF-TOKEN=0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da; referrer=www.google.com; landing_page=https://algorithmia.com/; signup_session=true; ajs_user_id=%22acunniffe%22; fs_uid=rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636; new-algo-language=scala; __hssc=69686351.5.1572357353053; intercom-session-c9fj6354=L08zdks3K1FOZEs0NngyR2NDQjBxN3VMb1J3dE1QZ0t4N2piYXY5ZmlNWFNVMkxseFhidkxhZ0g4QStWV2hYay0tUUtjQUtFaUZvLzJIZ0drSFdnRjM0UT09--fc3e700881b2cd1507c47ce6533f5b502d54fb7c; ALGO_SESSION=80af101f77fe23017598d6b4db18f532c65e9ce7-last-access=2019-10-29T14%3A07%3A43.442Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "cookies": {
            "ajs_group_id": "null",
            "ajs_anonymous_id": "%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22",
            "_ga": "GA1.2.1872580011.1571235636",
            "_fbp": "fb.1.1571235636317.604574724",
            "intercom-id-c9fj6354": "01941621-342b-4320-ad75-53826b5a002c",
            "hubspotutk": "105fad8a9b12bfed67330a0dbfe12c61",
            "_gid": "GA1.2.1843278152.1572282100",
            "__zlcmid": "uzie5dAUbB300Y",
            "__hstc": "69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3",
            "__hssrc": "1",
            "fs_intercom": "4655074328608768:4513847218700288",
            "XSRF-TOKEN": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "referrer": "www.google.com",
            "landing_page": "https://algorithmia.com/",
            "signup_session": "true",
            "ajs_user_id": "%22acunniffe%22",
            "fs_uid": "rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636",
            "new-algo-language": "scala",
            "__hssc": "69686351.5.1572357353053",
            "intercom-session-c9fj6354": "L08zdks3K1FOZEs0NngyR2NDQjBxN3VMb1J3dE1QZ0t4N2piYXY5ZmlNWFNVMkxseFhidkxhZ0g4QStWV2hYay0tUUtjQUtFaUZvLzJIZ0drSFdnRjM0UT09--fc3e700881b2cd1507c47ce6533f5b502d54fb7c",
            "ALGO_SESSION": "80af101f77fe23017598d6b4db18f532c65e9ce7-last-access=2019-10-29T14%3A07%3A43.442Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "queryParameters": {}
        },
        "response": {
          "statusCode": 200,
          "headers": {
            "content-encoding": "gzip",
            "content-type": "application/json; charset=utf-8",
            "date": "Tue, 29 Oct 2019 14:07:43 GMT",
            "strict-transport-security": "max-age=86400; includeSubDomains",
            "vary": "Accept-Encoding",
            "x-content-type-options": "nosniff",
            "x-frame-options": "DENY",
            "content-length": "227",
            "connection": "keep-alive"
          },
          "body": {
            "results": [
              {
                "id": "java",
                "name": "Java",
                "is_deprecated": false,
                "is_experimental": false,
                "language_type": "langpack",
                "resource_type": "language"
              },
              {
                "id": "javascript",
                "name": "Javascript",
                "is_deprecated": false,
                "is_experimental": false,
                "language_type": "langpack",
                "resource_type": "language"
              },
              {
                "id": "python2-image",
                "name": "Python 2.x - Beta",
                "is_deprecated": false,
                "is_experimental": false,
                "language_type": "image",
                "resource_type": "language"
              },
              {
                "id": "python2-langpack",
                "name": "Python 2.x",
                "is_deprecated": false,
                "is_experimental": false,
                "language_type": "langpack",
                "resource_type": "language"
              },
              {
                "id": "python3-image",
                "name": "Python 3.x - Beta",
                "is_deprecated": false,
                "is_experimental": false,
                "language_type": "image",
                "resource_type": "language"
              },
              {
                "id": "python3-1",
                "name": "Python 3.x",
                "is_deprecated": false,
                "is_experimental": false,
                "language_type": "langpack",
                "resource_type": "language"
              },
              {
                "id": "r",
                "name": "R",
                "is_deprecated": false,
                "is_experimental": false,
                "language_type": "langpack",
                "resource_type": "language"
              },
              {
                "id": "ruby",
                "name": "Ruby",
                "is_deprecated": false,
                "is_experimental": false,
                "language_type": "langpack",
                "resource_type": "language"
              },
              {
                "id": "rust",
                "name": "Rust",
                "is_deprecated": false,
                "is_experimental": false,
                "language_type": "langpack",
                "resource_type": "language"
              },
              {
                "id": "scala",
                "name": "Scala",
                "is_deprecated": false,
                "is_experimental": false,
                "language_type": "langpack",
                "resource_type": "language"
              }
            ]
          }
        }
      },
      {
        "request": {
          "url": "/webapi/user",
          "method": "GET",
          "headers": {
            "host": "algorithmia.com",
            "connection": "keep-alive",
            "pragma": "no-cache",
            "cache-control": "no-cache",
            "accept": "application/json, text/plain, */*",
            "dnt": "1",
            "x-xsrf-token": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "cors",
            "referer": "https://algorithmia.com/algorithms/acunniffe/abc",
            "accept-encoding": "gzip, deflate, br",
            "accept-language": "en-US,en;q=0.9",
            "cookie": "ajs_group_id=null; ajs_anonymous_id=%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22; _ga=GA1.2.1872580011.1571235636; _fbp=fb.1.1571235636317.604574724; intercom-id-c9fj6354=01941621-342b-4320-ad75-53826b5a002c; hubspotutk=105fad8a9b12bfed67330a0dbfe12c61; _gid=GA1.2.1843278152.1572282100; __zlcmid=uzie5dAUbB300Y; __hstc=69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3; __hssrc=1; fs_intercom=4655074328608768:4513847218700288; XSRF-TOKEN=0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da; referrer=www.google.com; landing_page=https://algorithmia.com/; signup_session=true; ajs_user_id=%22acunniffe%22; fs_uid=rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636; new-algo-language=scala; __hssc=69686351.5.1572357353053; intercom-session-c9fj6354=L08zdks3K1FOZEs0NngyR2NDQjBxN3VMb1J3dE1QZ0t4N2piYXY5ZmlNWFNVMkxseFhidkxhZ0g4QStWV2hYay0tUUtjQUtFaUZvLzJIZ0drSFdnRjM0UT09--fc3e700881b2cd1507c47ce6533f5b502d54fb7c; ALGO_SESSION=80af101f77fe23017598d6b4db18f532c65e9ce7-last-access=2019-10-29T14%3A07%3A43.442Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "cookies": {
            "ajs_group_id": "null",
            "ajs_anonymous_id": "%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22",
            "_ga": "GA1.2.1872580011.1571235636",
            "_fbp": "fb.1.1571235636317.604574724",
            "intercom-id-c9fj6354": "01941621-342b-4320-ad75-53826b5a002c",
            "hubspotutk": "105fad8a9b12bfed67330a0dbfe12c61",
            "_gid": "GA1.2.1843278152.1572282100",
            "__zlcmid": "uzie5dAUbB300Y",
            "__hstc": "69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3",
            "__hssrc": "1",
            "fs_intercom": "4655074328608768:4513847218700288",
            "XSRF-TOKEN": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "referrer": "www.google.com",
            "landing_page": "https://algorithmia.com/",
            "signup_session": "true",
            "ajs_user_id": "%22acunniffe%22",
            "fs_uid": "rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636",
            "new-algo-language": "scala",
            "__hssc": "69686351.5.1572357353053",
            "intercom-session-c9fj6354": "L08zdks3K1FOZEs0NngyR2NDQjBxN3VMb1J3dE1QZ0t4N2piYXY5ZmlNWFNVMkxseFhidkxhZ0g4QStWV2hYay0tUUtjQUtFaUZvLzJIZ0drSFdnRjM0UT09--fc3e700881b2cd1507c47ce6533f5b502d54fb7c",
            "ALGO_SESSION": "80af101f77fe23017598d6b4db18f532c65e9ce7-last-access=2019-10-29T14%3A07%3A43.442Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "queryParameters": {}
        },
        "response": {
          "statusCode": 200,
          "headers": {
            "cache-control": "no-cache, no-store",
            "content-encoding": "gzip",
            "content-type": "application/json; charset=utf-8",
            "date": "Tue, 29 Oct 2019 14:07:43 GMT",
            "set-cookie": "ALGO_SESSION=7a12de995eb23dd384c6967ae68b2988538677e6-last-access=2019-10-29T14%3A07%3A43.652Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3; Max-Age=86400; Expires=Wed, 30 Oct 2019 14:07:43 GMT; Path=/; Domain=algorithmia.com; Secure; HTTPOnly",
            "strict-transport-security": "max-age=86400; includeSubDomains",
            "vary": "Accept-Encoding",
            "x-content-type-options": "nosniff",
            "x-frame-options": "DENY",
            "content-length": "303",
            "connection": "keep-alive"
          },
          "body": {
            "user": {
              "username": "acunniffe",
              "fullName": "Aidan C",
              "registered": 1572357682000,
              "company_role": "engineer",
              "email": "acunniffe@gmail.com",
              "emailNotifications": true,
              "orgs": [
                {
                  "org_name": "aidan_org",
                  "org_label": "Aidan Org"
                }
              ],
              "default_api_key": "simjV77+6NjYPpPduWXrFKgWJp01",
              "invite_code": "",
              "account_balance": {
                "available_credits": 54782,
                "earned_credits": 0,
                "subscription_credits": 4782
              },
              "total_calls": 0,
              "reputation": 10,
              "requested_count": 0
            }
          }
        }
      },
      {
        "request": {
          "url": "/webapi/algorithms/acunniffe/abc",
          "method": "GET",
          "headers": {
            "host": "algorithmia.com",
            "connection": "keep-alive",
            "pragma": "no-cache",
            "cache-control": "no-cache",
            "accept": "application/json, text/plain, */*",
            "dnt": "1",
            "x-xsrf-token": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "cors",
            "referer": "https://algorithmia.com/algorithms/acunniffe/abc",
            "accept-encoding": "gzip, deflate, br",
            "accept-language": "en-US,en;q=0.9",
            "cookie": "ajs_group_id=null; ajs_anonymous_id=%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22; _ga=GA1.2.1872580011.1571235636; _fbp=fb.1.1571235636317.604574724; intercom-id-c9fj6354=01941621-342b-4320-ad75-53826b5a002c; hubspotutk=105fad8a9b12bfed67330a0dbfe12c61; _gid=GA1.2.1843278152.1572282100; __zlcmid=uzie5dAUbB300Y; __hstc=69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3; __hssrc=1; fs_intercom=4655074328608768:4513847218700288; XSRF-TOKEN=0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da; referrer=www.google.com; landing_page=https://algorithmia.com/; signup_session=true; ajs_user_id=%22acunniffe%22; fs_uid=rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636; new-algo-language=scala; _gat=1; ALGO_SESSION=7a12de995eb23dd384c6967ae68b2988538677e6-last-access=2019-10-29T14%3A07%3A43.652Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3; __hssc=69686351.6.1572357353053; intercom-session-c9fj6354=RzJVV0NsOVQwMHIvcVR3OXVOZENmc1pWbWhMZ09zczVSbHRlRXhMMDJ3dnJQV3dnRkVJTDZTQndRQUlQcFNxZi0teWJ1VmhEd0h1M0w5b20xeFV1TkU5dz09--1aff24c8ed30f3dc8ed16e2203be5cd7657d8711"
          },
          "cookies": {
            "ajs_group_id": "null",
            "ajs_anonymous_id": "%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22",
            "_ga": "GA1.2.1872580011.1571235636",
            "_fbp": "fb.1.1571235636317.604574724",
            "intercom-id-c9fj6354": "01941621-342b-4320-ad75-53826b5a002c",
            "hubspotutk": "105fad8a9b12bfed67330a0dbfe12c61",
            "_gid": "GA1.2.1843278152.1572282100",
            "__zlcmid": "uzie5dAUbB300Y",
            "__hstc": "69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3",
            "__hssrc": "1",
            "fs_intercom": "4655074328608768:4513847218700288",
            "XSRF-TOKEN": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "referrer": "www.google.com",
            "landing_page": "https://algorithmia.com/",
            "signup_session": "true",
            "ajs_user_id": "%22acunniffe%22",
            "fs_uid": "rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636",
            "new-algo-language": "scala",
            "_gat": "1",
            "ALGO_SESSION": "7a12de995eb23dd384c6967ae68b2988538677e6-last-access=2019-10-29T14%3A07%3A43.652Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3",
            "__hssc": "69686351.6.1572357353053",
            "intercom-session-c9fj6354": "RzJVV0NsOVQwMHIvcVR3OXVOZENmc1pWbWhMZ09zczVSbHRlRXhMMDJ3dnJQV3dnRkVJTDZTQndRQUlQcFNxZi0teWJ1VmhEd0h1M0w5b20xeFV1TkU5dz09--1aff24c8ed30f3dc8ed16e2203be5cd7657d8711"
          },
          "queryParameters": {}
        },
        "response": {
          "statusCode": 200,
          "headers": {
            "content-encoding": "gzip",
            "content-type": "application/json; charset=utf-8",
            "date": "Tue, 29 Oct 2019 14:07:45 GMT",
            "set-cookie": "ALGO_SESSION=1bffb7fdf8693982b9fe0e1e76c08884aea77580-last-access=2019-10-29T14%3A07%3A45.511Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3; Max-Age=86400; Expires=Wed, 30 Oct 2019 14:07:45 GMT; Path=/; Domain=algorithmia.com; Secure; HTTPOnly",
            "strict-transport-security": "max-age=86400; includeSubDomains",
            "vary": "Accept-Encoding",
            "x-content-type-options": "nosniff",
            "x-frame-options": "DENY",
            "content-length": "255",
            "connection": "keep-alive"
          },
          "body": {
            "algorithm": {
              "algo_id": 130238,
              "object_id": "algo-235955d5-d716-47a4-b9fa-a4ad372f98c6",
              "username": "acunniffe",
              "algoname": "abc",
              "algolabel": "abc",
              "language": "scala",
              "tag_line": "",
              "discoverable_world": false,
              "source_world": false,
              "license": "apl",
              "tags": [],
              "stats": {
                "total_calls": 0,
                "follower_count": 1,
                "vote_count": 0
              },
              "current_user": {
                "is_member": true,
                "is_owner": true,
                "is_follower": true,
                "is_voter": false
              }
            }
          }
        }
      },
      {
        "request": {
          "url": "/webapi/algorithms/acunniffe/abc",
          "method": "GET",
          "headers": {
            "host": "algorithmia.com",
            "connection": "keep-alive",
            "pragma": "no-cache",
            "cache-control": "no-cache",
            "accept": "application/json, text/plain, */*",
            "dnt": "1",
            "x-xsrf-token": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "cors",
            "referer": "https://algorithmia.com/algorithms/acunniffe/abc",
            "accept-encoding": "gzip, deflate, br",
            "accept-language": "en-US,en;q=0.9",
            "cookie": "ajs_group_id=null; ajs_anonymous_id=%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22; _ga=GA1.2.1872580011.1571235636; _fbp=fb.1.1571235636317.604574724; intercom-id-c9fj6354=01941621-342b-4320-ad75-53826b5a002c; hubspotutk=105fad8a9b12bfed67330a0dbfe12c61; _gid=GA1.2.1843278152.1572282100; __zlcmid=uzie5dAUbB300Y; __hstc=69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3; __hssrc=1; fs_intercom=4655074328608768:4513847218700288; XSRF-TOKEN=0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da; referrer=www.google.com; landing_page=https://algorithmia.com/; signup_session=true; ajs_user_id=%22acunniffe%22; fs_uid=rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636; new-algo-language=scala; _gat=1; __hssc=69686351.6.1572357353053; intercom-session-c9fj6354=RzJVV0NsOVQwMHIvcVR3OXVOZENmc1pWbWhMZ09zczVSbHRlRXhMMDJ3dnJQV3dnRkVJTDZTQndRQUlQcFNxZi0teWJ1VmhEd0h1M0w5b20xeFV1TkU5dz09--1aff24c8ed30f3dc8ed16e2203be5cd7657d8711; ALGO_SESSION=1bffb7fdf8693982b9fe0e1e76c08884aea77580-last-access=2019-10-29T14%3A07%3A45.511Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "cookies": {
            "ajs_group_id": "null",
            "ajs_anonymous_id": "%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22",
            "_ga": "GA1.2.1872580011.1571235636",
            "_fbp": "fb.1.1571235636317.604574724",
            "intercom-id-c9fj6354": "01941621-342b-4320-ad75-53826b5a002c",
            "hubspotutk": "105fad8a9b12bfed67330a0dbfe12c61",
            "_gid": "GA1.2.1843278152.1572282100",
            "__zlcmid": "uzie5dAUbB300Y",
            "__hstc": "69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3",
            "__hssrc": "1",
            "fs_intercom": "4655074328608768:4513847218700288",
            "XSRF-TOKEN": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "referrer": "www.google.com",
            "landing_page": "https://algorithmia.com/",
            "signup_session": "true",
            "ajs_user_id": "%22acunniffe%22",
            "fs_uid": "rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636",
            "new-algo-language": "scala",
            "_gat": "1",
            "__hssc": "69686351.6.1572357353053",
            "intercom-session-c9fj6354": "RzJVV0NsOVQwMHIvcVR3OXVOZENmc1pWbWhMZ09zczVSbHRlRXhMMDJ3dnJQV3dnRkVJTDZTQndRQUlQcFNxZi0teWJ1VmhEd0h1M0w5b20xeFV1TkU5dz09--1aff24c8ed30f3dc8ed16e2203be5cd7657d8711",
            "ALGO_SESSION": "1bffb7fdf8693982b9fe0e1e76c08884aea77580-last-access=2019-10-29T14%3A07%3A45.511Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "queryParameters": {}
        },
        "response": {
          "statusCode": 200,
          "headers": {
            "content-encoding": "gzip",
            "content-type": "application/json; charset=utf-8",
            "date": "Tue, 29 Oct 2019 14:07:47 GMT",
            "set-cookie": "ALGO_SESSION=cb5ebcd417a073b0afa6c88dbcdb89fbb3d29c99-last-access=2019-10-29T14%3A07%3A47.291Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3; Max-Age=86400; Expires=Wed, 30 Oct 2019 14:07:47 GMT; Path=/; Domain=algorithmia.com; Secure; HTTPOnly",
            "strict-transport-security": "max-age=86400; includeSubDomains",
            "vary": "Accept-Encoding",
            "x-content-type-options": "nosniff",
            "x-frame-options": "DENY",
            "content-length": "255",
            "connection": "keep-alive"
          },
          "body": {
            "algorithm": {
              "algo_id": 130238,
              "object_id": "algo-235955d5-d716-47a4-b9fa-a4ad372f98c6",
              "username": "acunniffe",
              "algoname": "abc",
              "algolabel": "abc",
              "language": "scala",
              "tag_line": "",
              "discoverable_world": false,
              "source_world": false,
              "license": "apl",
              "tags": [],
              "stats": {
                "total_calls": 0,
                "follower_count": 1,
                "vote_count": 0
              },
              "current_user": {
                "is_member": true,
                "is_owner": true,
                "is_follower": true,
                "is_voter": false
              }
            }
          }
        }
      },
      {
        "request": {
          "url": "/webapi/algorithms/acunniffe/abc/versions/latest",
          "method": "GET",
          "headers": {
            "host": "algorithmia.com",
            "connection": "keep-alive",
            "pragma": "no-cache",
            "cache-control": "no-cache",
            "accept": "application/json, text/plain, */*",
            "dnt": "1",
            "x-xsrf-token": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "cors",
            "referer": "https://algorithmia.com/algorithms/acunniffe/abc",
            "accept-encoding": "gzip, deflate, br",
            "accept-language": "en-US,en;q=0.9",
            "cookie": "ajs_group_id=null; ajs_anonymous_id=%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22; _ga=GA1.2.1872580011.1571235636; _fbp=fb.1.1571235636317.604574724; intercom-id-c9fj6354=01941621-342b-4320-ad75-53826b5a002c; hubspotutk=105fad8a9b12bfed67330a0dbfe12c61; _gid=GA1.2.1843278152.1572282100; __zlcmid=uzie5dAUbB300Y; __hstc=69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3; __hssrc=1; fs_intercom=4655074328608768:4513847218700288; XSRF-TOKEN=0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da; referrer=www.google.com; landing_page=https://algorithmia.com/; signup_session=true; ajs_user_id=%22acunniffe%22; fs_uid=rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636; new-algo-language=scala; _gat=1; __hssc=69686351.6.1572357353053; intercom-session-c9fj6354=RzJVV0NsOVQwMHIvcVR3OXVOZENmc1pWbWhMZ09zczVSbHRlRXhMMDJ3dnJQV3dnRkVJTDZTQndRQUlQcFNxZi0teWJ1VmhEd0h1M0w5b20xeFV1TkU5dz09--1aff24c8ed30f3dc8ed16e2203be5cd7657d8711; ALGO_SESSION=cb5ebcd417a073b0afa6c88dbcdb89fbb3d29c99-last-access=2019-10-29T14%3A07%3A47.291Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "cookies": {
            "ajs_group_id": "null",
            "ajs_anonymous_id": "%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22",
            "_ga": "GA1.2.1872580011.1571235636",
            "_fbp": "fb.1.1571235636317.604574724",
            "intercom-id-c9fj6354": "01941621-342b-4320-ad75-53826b5a002c",
            "hubspotutk": "105fad8a9b12bfed67330a0dbfe12c61",
            "_gid": "GA1.2.1843278152.1572282100",
            "__zlcmid": "uzie5dAUbB300Y",
            "__hstc": "69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3",
            "__hssrc": "1",
            "fs_intercom": "4655074328608768:4513847218700288",
            "XSRF-TOKEN": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "referrer": "www.google.com",
            "landing_page": "https://algorithmia.com/",
            "signup_session": "true",
            "ajs_user_id": "%22acunniffe%22",
            "fs_uid": "rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636",
            "new-algo-language": "scala",
            "_gat": "1",
            "__hssc": "69686351.6.1572357353053",
            "intercom-session-c9fj6354": "RzJVV0NsOVQwMHIvcVR3OXVOZENmc1pWbWhMZ09zczVSbHRlRXhMMDJ3dnJQV3dnRkVJTDZTQndRQUlQcFNxZi0teWJ1VmhEd0h1M0w5b20xeFV1TkU5dz09--1aff24c8ed30f3dc8ed16e2203be5cd7657d8711",
            "ALGO_SESSION": "cb5ebcd417a073b0afa6c88dbcdb89fbb3d29c99-last-access=2019-10-29T14%3A07%3A47.291Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "queryParameters": {}
        },
        "response": {
          "statusCode": 200,
          "headers": {
            "content-encoding": "gzip",
            "content-type": "application/json; charset=utf-8",
            "date": "Tue, 29 Oct 2019 14:07:47 GMT",
            "set-cookie": "ALGO_SESSION=cf61120999f3ebc447c7b64c705ff04984144141-last-access=2019-10-29T14%3A07%3A47.343Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3; Max-Age=86400; Expires=Wed, 30 Oct 2019 14:07:47 GMT; Path=/; Domain=algorithmia.com; Secure; HTTPOnly",
            "strict-transport-security": "max-age=86400; includeSubDomains",
            "vary": "Accept-Encoding",
            "x-content-type-options": "nosniff",
            "x-frame-options": "DENY",
            "content-length": "43",
            "connection": "keep-alive"
          },
          "body": {
            "latest_version": null
          }
        }
      },
      {
        "request": {
          "url": "/v1/algorithms/acunniffe/abc",
          "method": "GET",
          "headers": {
            "host": "algorithmia.com",
            "connection": "keep-alive",
            "pragma": "no-cache",
            "cache-control": "no-cache",
            "accept": "application/json, text/plain, */*",
            "dnt": "1",
            "x-xsrf-token": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "cors",
            "referer": "https://algorithmia.com/algorithms/acunniffe/abc/source",
            "accept-encoding": "gzip, deflate, br",
            "accept-language": "en-US,en;q=0.9",
            "cookie": "ajs_group_id=null; ajs_anonymous_id=%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22; _ga=GA1.2.1872580011.1571235636; _fbp=fb.1.1571235636317.604574724; intercom-id-c9fj6354=01941621-342b-4320-ad75-53826b5a002c; hubspotutk=105fad8a9b12bfed67330a0dbfe12c61; _gid=GA1.2.1843278152.1572282100; __zlcmid=uzie5dAUbB300Y; __hstc=69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3; __hssrc=1; fs_intercom=4655074328608768:4513847218700288; XSRF-TOKEN=0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da; referrer=www.google.com; landing_page=https://algorithmia.com/; signup_session=true; ajs_user_id=%22acunniffe%22; fs_uid=rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636; new-algo-language=scala; _gat=1; __hssc=69686351.6.1572357353053; intercom-session-c9fj6354=RzJVV0NsOVQwMHIvcVR3OXVOZENmc1pWbWhMZ09zczVSbHRlRXhMMDJ3dnJQV3dnRkVJTDZTQndRQUlQcFNxZi0teWJ1VmhEd0h1M0w5b20xeFV1TkU5dz09--1aff24c8ed30f3dc8ed16e2203be5cd7657d8711; ALGO_SESSION=cf61120999f3ebc447c7b64c705ff04984144141-last-access=2019-10-29T14%3A07%3A47.343Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "cookies": {
            "ajs_group_id": "null",
            "ajs_anonymous_id": "%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22",
            "_ga": "GA1.2.1872580011.1571235636",
            "_fbp": "fb.1.1571235636317.604574724",
            "intercom-id-c9fj6354": "01941621-342b-4320-ad75-53826b5a002c",
            "hubspotutk": "105fad8a9b12bfed67330a0dbfe12c61",
            "_gid": "GA1.2.1843278152.1572282100",
            "__zlcmid": "uzie5dAUbB300Y",
            "__hstc": "69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3",
            "__hssrc": "1",
            "fs_intercom": "4655074328608768:4513847218700288",
            "XSRF-TOKEN": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "referrer": "www.google.com",
            "landing_page": "https://algorithmia.com/",
            "signup_session": "true",
            "ajs_user_id": "%22acunniffe%22",
            "fs_uid": "rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636",
            "new-algo-language": "scala",
            "_gat": "1",
            "__hssc": "69686351.6.1572357353053",
            "intercom-session-c9fj6354": "RzJVV0NsOVQwMHIvcVR3OXVOZENmc1pWbWhMZ09zczVSbHRlRXhMMDJ3dnJQV3dnRkVJTDZTQndRQUlQcFNxZi0teWJ1VmhEd0h1M0w5b20xeFV1TkU5dz09--1aff24c8ed30f3dc8ed16e2203be5cd7657d8711",
            "ALGO_SESSION": "cf61120999f3ebc447c7b64c705ff04984144141-last-access=2019-10-29T14%3A07%3A47.343Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "queryParameters": {}
        },
        "response": {
          "statusCode": 200,
          "headers": {
            "content-encoding": "gzip",
            "content-type": "application/json; charset=utf-8",
            "date": "Tue, 29 Oct 2019 14:07:47 GMT",
            "set-cookie": "ALGO_SESSION=bab4f2e1e10933c98049bab47f142ea5c1c372f5-last-access=2019-10-29T14%3A07%3A47.541Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3; Max-Age=86400; Expires=Wed, 30 Oct 2019 14:07:47 GMT; Path=/; Domain=algorithmia.com; Secure; HTTPOnly",
            "strict-transport-security": "max-age=86400; includeSubDomains",
            "vary": "Accept-Encoding",
            "x-content-type-options": "nosniff",
            "x-frame-options": "DENY",
            "content-length": "179",
            "connection": "keep-alive"
          },
          "body": {
            "name": "abc",
            "details": {
              "label": "abc",
              "tagline": ""
            },
            "settings": {
              "algorithm_callability": "private",
              "source_visibility": "closed",
              "language": "scala",
              "environment": "cpu",
              "license": "apl",
              "network_access": "full",
              "pipeline_enabled": true
            },
            "resource_type": "algorithm"
          }
        }
      },
      {
        "request": {
          "url": "/webapi/algorithms/acunniffe/abc",
          "method": "GET",
          "headers": {
            "host": "algorithmia.com",
            "connection": "keep-alive",
            "pragma": "no-cache",
            "cache-control": "no-cache",
            "accept": "application/json, text/plain, */*",
            "dnt": "1",
            "x-xsrf-token": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "cors",
            "referer": "https://algorithmia.com/algorithms/acunniffe/abc",
            "accept-encoding": "gzip, deflate, br",
            "accept-language": "en-US,en;q=0.9",
            "cookie": "ajs_group_id=null; ajs_anonymous_id=%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22; _ga=GA1.2.1872580011.1571235636; _fbp=fb.1.1571235636317.604574724; intercom-id-c9fj6354=01941621-342b-4320-ad75-53826b5a002c; hubspotutk=105fad8a9b12bfed67330a0dbfe12c61; _gid=GA1.2.1843278152.1572282100; __zlcmid=uzie5dAUbB300Y; __hstc=69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3; __hssrc=1; fs_intercom=4655074328608768:4513847218700288; XSRF-TOKEN=0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da; referrer=www.google.com; landing_page=https://algorithmia.com/; signup_session=true; ajs_user_id=%22acunniffe%22; fs_uid=rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636; new-algo-language=scala; _gat=1; __hssc=69686351.6.1572357353053; intercom-session-c9fj6354=RzJVV0NsOVQwMHIvcVR3OXVOZENmc1pWbWhMZ09zczVSbHRlRXhMMDJ3dnJQV3dnRkVJTDZTQndRQUlQcFNxZi0teWJ1VmhEd0h1M0w5b20xeFV1TkU5dz09--1aff24c8ed30f3dc8ed16e2203be5cd7657d8711; ALGO_SESSION=bab4f2e1e10933c98049bab47f142ea5c1c372f5-last-access=2019-10-29T14%3A07%3A47.541Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "cookies": {
            "ajs_group_id": "null",
            "ajs_anonymous_id": "%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22",
            "_ga": "GA1.2.1872580011.1571235636",
            "_fbp": "fb.1.1571235636317.604574724",
            "intercom-id-c9fj6354": "01941621-342b-4320-ad75-53826b5a002c",
            "hubspotutk": "105fad8a9b12bfed67330a0dbfe12c61",
            "_gid": "GA1.2.1843278152.1572282100",
            "__zlcmid": "uzie5dAUbB300Y",
            "__hstc": "69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3",
            "__hssrc": "1",
            "fs_intercom": "4655074328608768:4513847218700288",
            "XSRF-TOKEN": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "referrer": "www.google.com",
            "landing_page": "https://algorithmia.com/",
            "signup_session": "true",
            "ajs_user_id": "%22acunniffe%22",
            "fs_uid": "rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636",
            "new-algo-language": "scala",
            "_gat": "1",
            "__hssc": "69686351.6.1572357353053",
            "intercom-session-c9fj6354": "RzJVV0NsOVQwMHIvcVR3OXVOZENmc1pWbWhMZ09zczVSbHRlRXhMMDJ3dnJQV3dnRkVJTDZTQndRQUlQcFNxZi0teWJ1VmhEd0h1M0w5b20xeFV1TkU5dz09--1aff24c8ed30f3dc8ed16e2203be5cd7657d8711",
            "ALGO_SESSION": "bab4f2e1e10933c98049bab47f142ea5c1c372f5-last-access=2019-10-29T14%3A07%3A47.541Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "queryParameters": {}
        },
        "response": {
          "statusCode": 200,
          "headers": {
            "content-encoding": "gzip",
            "content-type": "application/json; charset=utf-8",
            "date": "Tue, 29 Oct 2019 14:07:49 GMT",
            "set-cookie": "ALGO_SESSION=2388fdf9b0549cc6d43d1134b1208e6c9a6e068c-last-access=2019-10-29T14%3A07%3A49.392Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3; Max-Age=86400; Expires=Wed, 30 Oct 2019 14:07:49 GMT; Path=/; Domain=algorithmia.com; Secure; HTTPOnly",
            "strict-transport-security": "max-age=86400; includeSubDomains",
            "vary": "Accept-Encoding",
            "x-content-type-options": "nosniff",
            "x-frame-options": "DENY",
            "content-length": "255",
            "connection": "keep-alive"
          },
          "body": {
            "algorithm": {
              "algo_id": 130238,
              "object_id": "algo-235955d5-d716-47a4-b9fa-a4ad372f98c6",
              "username": "acunniffe",
              "algoname": "abc",
              "algolabel": "abc",
              "language": "scala",
              "tag_line": "",
              "discoverable_world": false,
              "source_world": false,
              "license": "apl",
              "tags": [],
              "stats": {
                "total_calls": 0,
                "follower_count": 1,
                "vote_count": 0
              },
              "current_user": {
                "is_member": true,
                "is_owner": true,
                "is_follower": true,
                "is_voter": false
              }
            }
          }
        }
      },
      {
        "request": {
          "url": "/notifications",
          "method": "GET",
          "headers": {
            "host": "algorithmia.com",
            "connection": "keep-alive",
            "pragma": "no-cache",
            "cache-control": "no-cache",
            "accept": "application/json, text/plain, */*",
            "dnt": "1",
            "x-xsrf-token": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "cors",
            "referer": "https://algorithmia.com/algorithms/acunniffe/abc",
            "accept-encoding": "gzip, deflate, br",
            "accept-language": "en-US,en;q=0.9",
            "cookie": "ajs_group_id=null; ajs_anonymous_id=%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22; _ga=GA1.2.1872580011.1571235636; _fbp=fb.1.1571235636317.604574724; intercom-id-c9fj6354=01941621-342b-4320-ad75-53826b5a002c; hubspotutk=105fad8a9b12bfed67330a0dbfe12c61; _gid=GA1.2.1843278152.1572282100; __zlcmid=uzie5dAUbB300Y; __hstc=69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3; __hssrc=1; fs_intercom=4655074328608768:4513847218700288; XSRF-TOKEN=0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da; referrer=www.google.com; landing_page=https://algorithmia.com/; signup_session=true; ajs_user_id=%22acunniffe%22; fs_uid=rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636; new-algo-language=scala; _gat=1; __hssc=69686351.6.1572357353053; intercom-session-c9fj6354=RzJVV0NsOVQwMHIvcVR3OXVOZENmc1pWbWhMZ09zczVSbHRlRXhMMDJ3dnJQV3dnRkVJTDZTQndRQUlQcFNxZi0teWJ1VmhEd0h1M0w5b20xeFV1TkU5dz09--1aff24c8ed30f3dc8ed16e2203be5cd7657d8711; ALGO_SESSION=2388fdf9b0549cc6d43d1134b1208e6c9a6e068c-last-access=2019-10-29T14%3A07%3A49.392Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "cookies": {
            "ajs_group_id": "null",
            "ajs_anonymous_id": "%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22",
            "_ga": "GA1.2.1872580011.1571235636",
            "_fbp": "fb.1.1571235636317.604574724",
            "intercom-id-c9fj6354": "01941621-342b-4320-ad75-53826b5a002c",
            "hubspotutk": "105fad8a9b12bfed67330a0dbfe12c61",
            "_gid": "GA1.2.1843278152.1572282100",
            "__zlcmid": "uzie5dAUbB300Y",
            "__hstc": "69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3",
            "__hssrc": "1",
            "fs_intercom": "4655074328608768:4513847218700288",
            "XSRF-TOKEN": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "referrer": "www.google.com",
            "landing_page": "https://algorithmia.com/",
            "signup_session": "true",
            "ajs_user_id": "%22acunniffe%22",
            "fs_uid": "rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636",
            "new-algo-language": "scala",
            "_gat": "1",
            "__hssc": "69686351.6.1572357353053",
            "intercom-session-c9fj6354": "RzJVV0NsOVQwMHIvcVR3OXVOZENmc1pWbWhMZ09zczVSbHRlRXhMMDJ3dnJQV3dnRkVJTDZTQndRQUlQcFNxZi0teWJ1VmhEd0h1M0w5b20xeFV1TkU5dz09--1aff24c8ed30f3dc8ed16e2203be5cd7657d8711",
            "ALGO_SESSION": "2388fdf9b0549cc6d43d1134b1208e6c9a6e068c-last-access=2019-10-29T14%3A07%3A49.392Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "queryParameters": {}
        },
        "response": {
          "statusCode": 200,
          "headers": {
            "content-encoding": "gzip",
            "content-type": "application/json; charset=utf-8",
            "date": "Tue, 29 Oct 2019 14:07:49 GMT",
            "set-cookie": "ALGO_SESSION=70f0bfa6dcb0f6e733e53d5d244cfc6cacb51c59-last-access=2019-10-29T14%3A07%3A49.525Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3; Max-Age=86400; Expires=Wed, 30 Oct 2019 14:07:49 GMT; Path=/; Domain=algorithmia.com; Secure; HTTPOnly",
            "strict-transport-security": "max-age=86400; includeSubDomains",
            "vary": "Accept-Encoding",
            "x-content-type-options": "nosniff",
            "x-frame-options": "DENY",
            "content-length": "243",
            "connection": "keep-alive"
          },
          "body": [
            {
              "notification_id": "notif-016e17d233b7-5c270611-8927-4efb-8743-78eec241f572",
              "to_username": "acunniffe",
              "event_type": "system",
              "event_context": {
                "message": "Welcome to Algorithmia! - We've added 50k credits to your account!",
                "url": "/users/acunniffe/account",
                "event_type": "system"
              },
              "read_at": 1572357947000,
              "created_at": 1572357682000
            }
          ]
        }
      },
      {
        "request": {
          "url": "/comments/algo-235955d5-d716-47a4-b9fa-a4ad372f98c6",
          "method": "GET",
          "headers": {
            "host": "algorithmia.com",
            "connection": "keep-alive",
            "pragma": "no-cache",
            "cache-control": "no-cache",
            "accept": "application/json, text/plain, */*",
            "dnt": "1",
            "x-xsrf-token": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "cors",
            "referer": "https://algorithmia.com/algorithms/acunniffe/abc/discussion",
            "accept-encoding": "gzip, deflate, br",
            "accept-language": "en-US,en;q=0.9",
            "cookie": "ajs_group_id=null; ajs_anonymous_id=%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22; _ga=GA1.2.1872580011.1571235636; _fbp=fb.1.1571235636317.604574724; intercom-id-c9fj6354=01941621-342b-4320-ad75-53826b5a002c; hubspotutk=105fad8a9b12bfed67330a0dbfe12c61; _gid=GA1.2.1843278152.1572282100; __zlcmid=uzie5dAUbB300Y; __hstc=69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3; __hssrc=1; fs_intercom=4655074328608768:4513847218700288; XSRF-TOKEN=0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da; referrer=www.google.com; landing_page=https://algorithmia.com/; signup_session=true; ajs_user_id=%22acunniffe%22; fs_uid=rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636; new-algo-language=scala; _gat=1; __hssc=69686351.6.1572357353053; intercom-session-c9fj6354=RzJVV0NsOVQwMHIvcVR3OXVOZENmc1pWbWhMZ09zczVSbHRlRXhMMDJ3dnJQV3dnRkVJTDZTQndRQUlQcFNxZi0teWJ1VmhEd0h1M0w5b20xeFV1TkU5dz09--1aff24c8ed30f3dc8ed16e2203be5cd7657d8711; ALGO_SESSION=6f270f1db1e8e263c4ce8fa03d4800cd44c52f8d-last-access=2019-10-29T14%3A07%3A50.691Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "cookies": {
            "ajs_group_id": "null",
            "ajs_anonymous_id": "%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22",
            "_ga": "GA1.2.1872580011.1571235636",
            "_fbp": "fb.1.1571235636317.604574724",
            "intercom-id-c9fj6354": "01941621-342b-4320-ad75-53826b5a002c",
            "hubspotutk": "105fad8a9b12bfed67330a0dbfe12c61",
            "_gid": "GA1.2.1843278152.1572282100",
            "__zlcmid": "uzie5dAUbB300Y",
            "__hstc": "69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3",
            "__hssrc": "1",
            "fs_intercom": "4655074328608768:4513847218700288",
            "XSRF-TOKEN": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "referrer": "www.google.com",
            "landing_page": "https://algorithmia.com/",
            "signup_session": "true",
            "ajs_user_id": "%22acunniffe%22",
            "fs_uid": "rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636",
            "new-algo-language": "scala",
            "_gat": "1",
            "__hssc": "69686351.6.1572357353053",
            "intercom-session-c9fj6354": "RzJVV0NsOVQwMHIvcVR3OXVOZENmc1pWbWhMZ09zczVSbHRlRXhMMDJ3dnJQV3dnRkVJTDZTQndRQUlQcFNxZi0teWJ1VmhEd0h1M0w5b20xeFV1TkU5dz09--1aff24c8ed30f3dc8ed16e2203be5cd7657d8711",
            "ALGO_SESSION": "6f270f1db1e8e263c4ce8fa03d4800cd44c52f8d-last-access=2019-10-29T14%3A07%3A50.691Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "queryParameters": {}
        },
        "response": {
          "statusCode": 200,
          "headers": {
            "content-encoding": "gzip",
            "content-type": "application/json; charset=utf-8",
            "date": "Tue, 29 Oct 2019 14:07:51 GMT",
            "set-cookie": "ALGO_SESSION=d7a979d13e54794c240caae9910e293f7f31d076-last-access=2019-10-29T14%3A07%3A51.243Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3; Max-Age=86400; Expires=Wed, 30 Oct 2019 14:07:51 GMT; Path=/; Domain=algorithmia.com; Secure; HTTPOnly",
            "strict-transport-security": "max-age=86400; includeSubDomains",
            "vary": "Accept-Encoding",
            "x-content-type-options": "nosniff",
            "x-frame-options": "DENY",
            "content-length": "22",
            "connection": "keep-alive"
          },
          "body": []
        }
      },
      {
        "request": {
          "url": "/v1/users/acunniffe/event-listeners",
          "method": "GET",
          "headers": {
            "host": "algorithmia.com",
            "connection": "keep-alive",
            "pragma": "no-cache",
            "cache-control": "no-cache",
            "accept": "application/json, text/plain, */*",
            "dnt": "1",
            "x-xsrf-token": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "cors",
            "referer": "https://algorithmia.com/algorithms/acunniffe/abc/event-listeners",
            "accept-encoding": "gzip, deflate, br",
            "accept-language": "en-US,en;q=0.9",
            "cookie": "ajs_group_id=null; ajs_anonymous_id=%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22; _ga=GA1.2.1872580011.1571235636; _fbp=fb.1.1571235636317.604574724; intercom-id-c9fj6354=01941621-342b-4320-ad75-53826b5a002c; hubspotutk=105fad8a9b12bfed67330a0dbfe12c61; _gid=GA1.2.1843278152.1572282100; __zlcmid=uzie5dAUbB300Y; __hstc=69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3; __hssrc=1; fs_intercom=4655074328608768:4513847218700288; XSRF-TOKEN=0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da; referrer=www.google.com; landing_page=https://algorithmia.com/; signup_session=true; ajs_user_id=%22acunniffe%22; fs_uid=rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636; new-algo-language=scala; _gat=1; __hssc=69686351.6.1572357353053; intercom-session-c9fj6354=RzJVV0NsOVQwMHIvcVR3OXVOZENmc1pWbWhMZ09zczVSbHRlRXhMMDJ3dnJQV3dnRkVJTDZTQndRQUlQcFNxZi0teWJ1VmhEd0h1M0w5b20xeFV1TkU5dz09--1aff24c8ed30f3dc8ed16e2203be5cd7657d8711; ALGO_SESSION=d7a979d13e54794c240caae9910e293f7f31d076-last-access=2019-10-29T14%3A07%3A51.243Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "cookies": {
            "ajs_group_id": "null",
            "ajs_anonymous_id": "%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22",
            "_ga": "GA1.2.1872580011.1571235636",
            "_fbp": "fb.1.1571235636317.604574724",
            "intercom-id-c9fj6354": "01941621-342b-4320-ad75-53826b5a002c",
            "hubspotutk": "105fad8a9b12bfed67330a0dbfe12c61",
            "_gid": "GA1.2.1843278152.1572282100",
            "__zlcmid": "uzie5dAUbB300Y",
            "__hstc": "69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3",
            "__hssrc": "1",
            "fs_intercom": "4655074328608768:4513847218700288",
            "XSRF-TOKEN": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "referrer": "www.google.com",
            "landing_page": "https://algorithmia.com/",
            "signup_session": "true",
            "ajs_user_id": "%22acunniffe%22",
            "fs_uid": "rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636",
            "new-algo-language": "scala",
            "_gat": "1",
            "__hssc": "69686351.6.1572357353053",
            "intercom-session-c9fj6354": "RzJVV0NsOVQwMHIvcVR3OXVOZENmc1pWbWhMZ09zczVSbHRlRXhMMDJ3dnJQV3dnRkVJTDZTQndRQUlQcFNxZi0teWJ1VmhEd0h1M0w5b20xeFV1TkU5dz09--1aff24c8ed30f3dc8ed16e2203be5cd7657d8711",
            "ALGO_SESSION": "d7a979d13e54794c240caae9910e293f7f31d076-last-access=2019-10-29T14%3A07%3A51.243Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "queryParameters": {}
        },
        "response": {
          "statusCode": 200,
          "headers": {
            "content-encoding": "gzip",
            "content-type": "application/json",
            "date": "Tue, 29 Oct 2019 14:07:51 GMT",
            "referrer-policy": "origin-when-cross-origin, strict-origin-when-cross-origin",
            "set-cookie": "ALGO_SESSION=1e1420011d397ff9462ef1ad874c454495be073d-last-access=2019-10-29T14%3A07%3A51.968Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3; Max-Age=86400; Expires=Wed, 30 Oct 2019 14:07:51 GMT; Path=/; Domain=algorithmia.com; Secure; HTTPOnly",
            "strict-transport-security": "max-age=86400; includeSubDomains",
            "vary": "Accept-Encoding",
            "x-content-type-options": "nosniff",
            "x-frame-options": "DENY",
            "x-permitted-cross-domain-policies": "master-only",
            "x-xss-protection": "1; mode=block",
            "content-length": "22",
            "connection": "keep-alive"
          },
          "body": []
        }
      },
      {
        "request": {
          "url": "/v1/algorithms/acunniffe/abc/builds",
          "method": "GET",
          "headers": {
            "host": "algorithmia.com",
            "connection": "keep-alive",
            "pragma": "no-cache",
            "cache-control": "no-cache",
            "accept": "application/json, text/plain, */*",
            "dnt": "1",
            "x-xsrf-token": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "cors",
            "referer": "https://algorithmia.com/algorithms/acunniffe/abc/builds",
            "accept-encoding": "gzip, deflate, br",
            "accept-language": "en-US,en;q=0.9",
            "cookie": "ajs_group_id=null; ajs_anonymous_id=%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22; _ga=GA1.2.1872580011.1571235636; _fbp=fb.1.1571235636317.604574724; intercom-id-c9fj6354=01941621-342b-4320-ad75-53826b5a002c; hubspotutk=105fad8a9b12bfed67330a0dbfe12c61; _gid=GA1.2.1843278152.1572282100; __zlcmid=uzie5dAUbB300Y; __hstc=69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3; __hssrc=1; fs_intercom=4655074328608768:4513847218700288; XSRF-TOKEN=0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da; referrer=www.google.com; landing_page=https://algorithmia.com/; signup_session=true; ajs_user_id=%22acunniffe%22; fs_uid=rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636; new-algo-language=scala; _gat=1; __hssc=69686351.6.1572357353053; intercom-session-c9fj6354=RzJVV0NsOVQwMHIvcVR3OXVOZENmc1pWbWhMZ09zczVSbHRlRXhMMDJ3dnJQV3dnRkVJTDZTQndRQUlQcFNxZi0teWJ1VmhEd0h1M0w5b20xeFV1TkU5dz09--1aff24c8ed30f3dc8ed16e2203be5cd7657d8711; ALGO_SESSION=1e1420011d397ff9462ef1ad874c454495be073d-last-access=2019-10-29T14%3A07%3A51.968Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "cookies": {
            "ajs_group_id": "null",
            "ajs_anonymous_id": "%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22",
            "_ga": "GA1.2.1872580011.1571235636",
            "_fbp": "fb.1.1571235636317.604574724",
            "intercom-id-c9fj6354": "01941621-342b-4320-ad75-53826b5a002c",
            "hubspotutk": "105fad8a9b12bfed67330a0dbfe12c61",
            "_gid": "GA1.2.1843278152.1572282100",
            "__zlcmid": "uzie5dAUbB300Y",
            "__hstc": "69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3",
            "__hssrc": "1",
            "fs_intercom": "4655074328608768:4513847218700288",
            "XSRF-TOKEN": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "referrer": "www.google.com",
            "landing_page": "https://algorithmia.com/",
            "signup_session": "true",
            "ajs_user_id": "%22acunniffe%22",
            "fs_uid": "rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636",
            "new-algo-language": "scala",
            "_gat": "1",
            "__hssc": "69686351.6.1572357353053",
            "intercom-session-c9fj6354": "RzJVV0NsOVQwMHIvcVR3OXVOZENmc1pWbWhMZ09zczVSbHRlRXhMMDJ3dnJQV3dnRkVJTDZTQndRQUlQcFNxZi0teWJ1VmhEd0h1M0w5b20xeFV1TkU5dz09--1aff24c8ed30f3dc8ed16e2203be5cd7657d8711",
            "ALGO_SESSION": "1e1420011d397ff9462ef1ad874c454495be073d-last-access=2019-10-29T14%3A07%3A51.968Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "queryParameters": {
            "limit": "100"
          }
        },
        "response": {
          "statusCode": 200,
          "headers": {
            "content-encoding": "gzip",
            "content-type": "application/json; charset=utf-8",
            "date": "Tue, 29 Oct 2019 14:07:52 GMT",
            "set-cookie": "ALGO_SESSION=bfba7b7c9c34a5ec54b5735ffbb8d4a7d1a33390-last-access=2019-10-29T14%3A07%3A52.537Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3; Max-Age=86400; Expires=Wed, 30 Oct 2019 14:07:52 GMT; Path=/; Domain=algorithmia.com; Secure; HTTPOnly",
            "strict-transport-security": "max-age=86400; includeSubDomains",
            "vary": "Accept-Encoding",
            "x-content-type-options": "nosniff",
            "x-frame-options": "DENY",
            "content-length": "59",
            "connection": "keep-alive"
          },
          "body": {
            "marker": null,
            "next_link": null,
            "results": []
          }
        }
      },
      {
        "request": {
          "url": "/webapi/v1/languages",
          "method": "GET",
          "headers": {
            "host": "algorithmia.com",
            "connection": "keep-alive",
            "pragma": "no-cache",
            "cache-control": "no-cache",
            "accept": "application/json, text/plain, */*",
            "dnt": "1",
            "x-xsrf-token": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "cors",
            "referer": "https://algorithmia.com/algorithms/acunniffe/abc/settings",
            "accept-encoding": "gzip, deflate, br",
            "accept-language": "en-US,en;q=0.9",
            "cookie": "ajs_group_id=null; ajs_anonymous_id=%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22; _ga=GA1.2.1872580011.1571235636; _fbp=fb.1.1571235636317.604574724; intercom-id-c9fj6354=01941621-342b-4320-ad75-53826b5a002c; hubspotutk=105fad8a9b12bfed67330a0dbfe12c61; _gid=GA1.2.1843278152.1572282100; __zlcmid=uzie5dAUbB300Y; __hstc=69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3; __hssrc=1; fs_intercom=4655074328608768:4513847218700288; XSRF-TOKEN=0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da; referrer=www.google.com; landing_page=https://algorithmia.com/; signup_session=true; ajs_user_id=%22acunniffe%22; fs_uid=rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636; new-algo-language=scala; _gat=1; __hssc=69686351.6.1572357353053; intercom-session-c9fj6354=RzJVV0NsOVQwMHIvcVR3OXVOZENmc1pWbWhMZ09zczVSbHRlRXhMMDJ3dnJQV3dnRkVJTDZTQndRQUlQcFNxZi0teWJ1VmhEd0h1M0w5b20xeFV1TkU5dz09--1aff24c8ed30f3dc8ed16e2203be5cd7657d8711; ALGO_SESSION=bfba7b7c9c34a5ec54b5735ffbb8d4a7d1a33390-last-access=2019-10-29T14%3A07%3A52.537Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "cookies": {
            "ajs_group_id": "null",
            "ajs_anonymous_id": "%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22",
            "_ga": "GA1.2.1872580011.1571235636",
            "_fbp": "fb.1.1571235636317.604574724",
            "intercom-id-c9fj6354": "01941621-342b-4320-ad75-53826b5a002c",
            "hubspotutk": "105fad8a9b12bfed67330a0dbfe12c61",
            "_gid": "GA1.2.1843278152.1572282100",
            "__zlcmid": "uzie5dAUbB300Y",
            "__hstc": "69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3",
            "__hssrc": "1",
            "fs_intercom": "4655074328608768:4513847218700288",
            "XSRF-TOKEN": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "referrer": "www.google.com",
            "landing_page": "https://algorithmia.com/",
            "signup_session": "true",
            "ajs_user_id": "%22acunniffe%22",
            "fs_uid": "rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636",
            "new-algo-language": "scala",
            "_gat": "1",
            "__hssc": "69686351.6.1572357353053",
            "intercom-session-c9fj6354": "RzJVV0NsOVQwMHIvcVR3OXVOZENmc1pWbWhMZ09zczVSbHRlRXhMMDJ3dnJQV3dnRkVJTDZTQndRQUlQcFNxZi0teWJ1VmhEd0h1M0w5b20xeFV1TkU5dz09--1aff24c8ed30f3dc8ed16e2203be5cd7657d8711",
            "ALGO_SESSION": "bfba7b7c9c34a5ec54b5735ffbb8d4a7d1a33390-last-access=2019-10-29T14%3A07%3A52.537Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "queryParameters": {}
        },
        "response": {
          "statusCode": 200,
          "headers": {
            "content-encoding": "gzip",
            "content-type": "application/json; charset=utf-8",
            "date": "Tue, 29 Oct 2019 14:07:53 GMT",
            "strict-transport-security": "max-age=86400; includeSubDomains",
            "vary": "Accept-Encoding",
            "x-content-type-options": "nosniff",
            "x-frame-options": "DENY",
            "content-length": "227",
            "connection": "keep-alive"
          },
          "body": {
            "results": [
              {
                "id": "java",
                "name": "Java",
                "is_deprecated": false,
                "is_experimental": false,
                "language_type": "langpack",
                "resource_type": "language"
              },
              {
                "id": "javascript",
                "name": "Javascript",
                "is_deprecated": false,
                "is_experimental": false,
                "language_type": "langpack",
                "resource_type": "language"
              },
              {
                "id": "python2-image",
                "name": "Python 2.x - Beta",
                "is_deprecated": false,
                "is_experimental": false,
                "language_type": "image",
                "resource_type": "language"
              },
              {
                "id": "python2-langpack",
                "name": "Python 2.x",
                "is_deprecated": false,
                "is_experimental": false,
                "language_type": "langpack",
                "resource_type": "language"
              },
              {
                "id": "python3-image",
                "name": "Python 3.x - Beta",
                "is_deprecated": false,
                "is_experimental": false,
                "language_type": "image",
                "resource_type": "language"
              },
              {
                "id": "python3-1",
                "name": "Python 3.x",
                "is_deprecated": false,
                "is_experimental": false,
                "language_type": "langpack",
                "resource_type": "language"
              },
              {
                "id": "r",
                "name": "R",
                "is_deprecated": false,
                "is_experimental": false,
                "language_type": "langpack",
                "resource_type": "language"
              },
              {
                "id": "ruby",
                "name": "Ruby",
                "is_deprecated": false,
                "is_experimental": false,
                "language_type": "langpack",
                "resource_type": "language"
              },
              {
                "id": "rust",
                "name": "Rust",
                "is_deprecated": false,
                "is_experimental": false,
                "language_type": "langpack",
                "resource_type": "language"
              },
              {
                "id": "scala",
                "name": "Scala",
                "is_deprecated": false,
                "is_experimental": false,
                "language_type": "langpack",
                "resource_type": "language"
              }
            ]
          }
        }
      },
      {
        "request": {
          "url": "/webapi/algorithms/acunniffe/abc/versions/latest",
          "method": "GET",
          "headers": {
            "host": "algorithmia.com",
            "connection": "keep-alive",
            "pragma": "no-cache",
            "cache-control": "no-cache",
            "accept": "application/json, text/plain, */*",
            "dnt": "1",
            "x-xsrf-token": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "cors",
            "referer": "https://algorithmia.com/algorithms/acunniffe/abc/settings",
            "accept-encoding": "gzip, deflate, br",
            "accept-language": "en-US,en;q=0.9",
            "cookie": "ajs_group_id=null; ajs_anonymous_id=%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22; _ga=GA1.2.1872580011.1571235636; _fbp=fb.1.1571235636317.604574724; intercom-id-c9fj6354=01941621-342b-4320-ad75-53826b5a002c; hubspotutk=105fad8a9b12bfed67330a0dbfe12c61; _gid=GA1.2.1843278152.1572282100; __zlcmid=uzie5dAUbB300Y; __hstc=69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3; __hssrc=1; fs_intercom=4655074328608768:4513847218700288; XSRF-TOKEN=0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da; referrer=www.google.com; landing_page=https://algorithmia.com/; signup_session=true; ajs_user_id=%22acunniffe%22; fs_uid=rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636; new-algo-language=scala; _gat=1; __hssc=69686351.6.1572357353053; intercom-session-c9fj6354=RzJVV0NsOVQwMHIvcVR3OXVOZENmc1pWbWhMZ09zczVSbHRlRXhMMDJ3dnJQV3dnRkVJTDZTQndRQUlQcFNxZi0teWJ1VmhEd0h1M0w5b20xeFV1TkU5dz09--1aff24c8ed30f3dc8ed16e2203be5cd7657d8711; ALGO_SESSION=bfba7b7c9c34a5ec54b5735ffbb8d4a7d1a33390-last-access=2019-10-29T14%3A07%3A52.537Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "cookies": {
            "ajs_group_id": "null",
            "ajs_anonymous_id": "%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22",
            "_ga": "GA1.2.1872580011.1571235636",
            "_fbp": "fb.1.1571235636317.604574724",
            "intercom-id-c9fj6354": "01941621-342b-4320-ad75-53826b5a002c",
            "hubspotutk": "105fad8a9b12bfed67330a0dbfe12c61",
            "_gid": "GA1.2.1843278152.1572282100",
            "__zlcmid": "uzie5dAUbB300Y",
            "__hstc": "69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3",
            "__hssrc": "1",
            "fs_intercom": "4655074328608768:4513847218700288",
            "XSRF-TOKEN": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "referrer": "www.google.com",
            "landing_page": "https://algorithmia.com/",
            "signup_session": "true",
            "ajs_user_id": "%22acunniffe%22",
            "fs_uid": "rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636",
            "new-algo-language": "scala",
            "_gat": "1",
            "__hssc": "69686351.6.1572357353053",
            "intercom-session-c9fj6354": "RzJVV0NsOVQwMHIvcVR3OXVOZENmc1pWbWhMZ09zczVSbHRlRXhMMDJ3dnJQV3dnRkVJTDZTQndRQUlQcFNxZi0teWJ1VmhEd0h1M0w5b20xeFV1TkU5dz09--1aff24c8ed30f3dc8ed16e2203be5cd7657d8711",
            "ALGO_SESSION": "bfba7b7c9c34a5ec54b5735ffbb8d4a7d1a33390-last-access=2019-10-29T14%3A07%3A52.537Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "queryParameters": {}
        },
        "response": {
          "statusCode": 200,
          "headers": {
            "content-encoding": "gzip",
            "content-type": "application/json; charset=utf-8",
            "date": "Tue, 29 Oct 2019 14:07:53 GMT",
            "set-cookie": "ALGO_SESSION=206314cba29da82f1f3c5cf0f7744d4dac3699e5-last-access=2019-10-29T14%3A07%3A53.284Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3; Max-Age=86400; Expires=Wed, 30 Oct 2019 14:07:53 GMT; Path=/; Domain=algorithmia.com; Secure; HTTPOnly",
            "strict-transport-security": "max-age=86400; includeSubDomains",
            "vary": "Accept-Encoding",
            "x-content-type-options": "nosniff",
            "x-frame-options": "DENY",
            "content-length": "43",
            "connection": "keep-alive"
          },
          "body": {
            "latest_version": null
          }
        }
      },
      {
        "request": {
          "url": "/v1/algorithms/acunniffe/abc",
          "method": "GET",
          "headers": {
            "host": "algorithmia.com",
            "connection": "keep-alive",
            "pragma": "no-cache",
            "cache-control": "no-cache",
            "accept": "application/json, text/plain, */*",
            "dnt": "1",
            "x-xsrf-token": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "cors",
            "referer": "https://algorithmia.com/algorithms/acunniffe/abc/settings",
            "accept-encoding": "gzip, deflate, br",
            "accept-language": "en-US,en;q=0.9",
            "cookie": "ajs_group_id=null; ajs_anonymous_id=%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22; _ga=GA1.2.1872580011.1571235636; _fbp=fb.1.1571235636317.604574724; intercom-id-c9fj6354=01941621-342b-4320-ad75-53826b5a002c; hubspotutk=105fad8a9b12bfed67330a0dbfe12c61; _gid=GA1.2.1843278152.1572282100; __zlcmid=uzie5dAUbB300Y; __hstc=69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3; __hssrc=1; fs_intercom=4655074328608768:4513847218700288; XSRF-TOKEN=0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da; referrer=www.google.com; landing_page=https://algorithmia.com/; signup_session=true; ajs_user_id=%22acunniffe%22; fs_uid=rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636; new-algo-language=scala; _gat=1; __hssc=69686351.6.1572357353053; intercom-session-c9fj6354=RzJVV0NsOVQwMHIvcVR3OXVOZENmc1pWbWhMZ09zczVSbHRlRXhMMDJ3dnJQV3dnRkVJTDZTQndRQUlQcFNxZi0teWJ1VmhEd0h1M0w5b20xeFV1TkU5dz09--1aff24c8ed30f3dc8ed16e2203be5cd7657d8711; ALGO_SESSION=bfba7b7c9c34a5ec54b5735ffbb8d4a7d1a33390-last-access=2019-10-29T14%3A07%3A52.537Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "cookies": {
            "ajs_group_id": "null",
            "ajs_anonymous_id": "%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22",
            "_ga": "GA1.2.1872580011.1571235636",
            "_fbp": "fb.1.1571235636317.604574724",
            "intercom-id-c9fj6354": "01941621-342b-4320-ad75-53826b5a002c",
            "hubspotutk": "105fad8a9b12bfed67330a0dbfe12c61",
            "_gid": "GA1.2.1843278152.1572282100",
            "__zlcmid": "uzie5dAUbB300Y",
            "__hstc": "69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3",
            "__hssrc": "1",
            "fs_intercom": "4655074328608768:4513847218700288",
            "XSRF-TOKEN": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "referrer": "www.google.com",
            "landing_page": "https://algorithmia.com/",
            "signup_session": "true",
            "ajs_user_id": "%22acunniffe%22",
            "fs_uid": "rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636",
            "new-algo-language": "scala",
            "_gat": "1",
            "__hssc": "69686351.6.1572357353053",
            "intercom-session-c9fj6354": "RzJVV0NsOVQwMHIvcVR3OXVOZENmc1pWbWhMZ09zczVSbHRlRXhMMDJ3dnJQV3dnRkVJTDZTQndRQUlQcFNxZi0teWJ1VmhEd0h1M0w5b20xeFV1TkU5dz09--1aff24c8ed30f3dc8ed16e2203be5cd7657d8711",
            "ALGO_SESSION": "bfba7b7c9c34a5ec54b5735ffbb8d4a7d1a33390-last-access=2019-10-29T14%3A07%3A52.537Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "queryParameters": {}
        },
        "response": {
          "statusCode": 200,
          "headers": {
            "content-encoding": "gzip",
            "content-type": "application/json; charset=utf-8",
            "date": "Tue, 29 Oct 2019 14:07:53 GMT",
            "set-cookie": "ALGO_SESSION=c17db35415e841865e504c95775bb0b09ec2cbf2-last-access=2019-10-29T14%3A07%3A53.322Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3; Max-Age=86400; Expires=Wed, 30 Oct 2019 14:07:53 GMT; Path=/; Domain=algorithmia.com; Secure; HTTPOnly",
            "strict-transport-security": "max-age=86400; includeSubDomains",
            "vary": "Accept-Encoding",
            "x-content-type-options": "nosniff",
            "x-frame-options": "DENY",
            "content-length": "179",
            "connection": "keep-alive"
          },
          "body": {
            "name": "abc",
            "details": {
              "label": "abc",
              "tagline": ""
            },
            "settings": {
              "algorithm_callability": "private",
              "source_visibility": "closed",
              "language": "scala",
              "environment": "cpu",
              "license": "apl",
              "network_access": "full",
              "pipeline_enabled": true
            },
            "resource_type": "algorithm"
          }
        }
      },
      {
        "request": {
          "url": "/vote/algo-235955d5-d716-47a4-b9fa-a4ad372f98c6",
          "method": "PUT",
          "headers": {
            "host": "algorithmia.com",
            "connection": "keep-alive",
            "content-length": "4",
            "pragma": "no-cache",
            "cache-control": "no-cache",
            "accept": "application/json, text/plain, */*",
            "origin": "https://algorithmia.com",
            "x-xsrf-token": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36",
            "dnt": "1",
            "content-type": "application/json",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "cors",
            "referer": "https://algorithmia.com/algorithms/acunniffe/abc/settings",
            "accept-encoding": "gzip, deflate, br",
            "accept-language": "en-US,en;q=0.9",
            "cookie": "ajs_group_id=null; ajs_anonymous_id=%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22; _ga=GA1.2.1872580011.1571235636; _fbp=fb.1.1571235636317.604574724; intercom-id-c9fj6354=01941621-342b-4320-ad75-53826b5a002c; hubspotutk=105fad8a9b12bfed67330a0dbfe12c61; _gid=GA1.2.1843278152.1572282100; __zlcmid=uzie5dAUbB300Y; __hstc=69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3; __hssrc=1; fs_intercom=4655074328608768:4513847218700288; XSRF-TOKEN=0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da; referrer=www.google.com; landing_page=https://algorithmia.com/; signup_session=true; ajs_user_id=%22acunniffe%22; fs_uid=rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636; new-algo-language=scala; _gat=1; __hssc=69686351.6.1572357353053; intercom-session-c9fj6354=RzJVV0NsOVQwMHIvcVR3OXVOZENmc1pWbWhMZ09zczVSbHRlRXhMMDJ3dnJQV3dnRkVJTDZTQndRQUlQcFNxZi0teWJ1VmhEd0h1M0w5b20xeFV1TkU5dz09--1aff24c8ed30f3dc8ed16e2203be5cd7657d8711; ALGO_SESSION=c17db35415e841865e504c95775bb0b09ec2cbf2-last-access=2019-10-29T14%3A07%3A53.322Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "cookies": {
            "ajs_group_id": "null",
            "ajs_anonymous_id": "%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22",
            "_ga": "GA1.2.1872580011.1571235636",
            "_fbp": "fb.1.1571235636317.604574724",
            "intercom-id-c9fj6354": "01941621-342b-4320-ad75-53826b5a002c",
            "hubspotutk": "105fad8a9b12bfed67330a0dbfe12c61",
            "_gid": "GA1.2.1843278152.1572282100",
            "__zlcmid": "uzie5dAUbB300Y",
            "__hstc": "69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3",
            "__hssrc": "1",
            "fs_intercom": "4655074328608768:4513847218700288",
            "XSRF-TOKEN": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "referrer": "www.google.com",
            "landing_page": "https://algorithmia.com/",
            "signup_session": "true",
            "ajs_user_id": "%22acunniffe%22",
            "fs_uid": "rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636",
            "new-algo-language": "scala",
            "_gat": "1",
            "__hssc": "69686351.6.1572357353053",
            "intercom-session-c9fj6354": "RzJVV0NsOVQwMHIvcVR3OXVOZENmc1pWbWhMZ09zczVSbHRlRXhMMDJ3dnJQV3dnRkVJTDZTQndRQUlQcFNxZi0teWJ1VmhEd0h1M0w5b20xeFV1TkU5dz09--1aff24c8ed30f3dc8ed16e2203be5cd7657d8711",
            "ALGO_SESSION": "c17db35415e841865e504c95775bb0b09ec2cbf2-last-access=2019-10-29T14%3A07%3A53.322Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "queryParameters": {},
          "body": true
        },
        "response": {
          "statusCode": 200,
          "headers": {
            "content-encoding": "gzip",
            "content-type": "application/json; charset=utf-8",
            "date": "Tue, 29 Oct 2019 14:07:55 GMT",
            "set-cookie": "ALGO_SESSION=1eb3e85d68675bf12b409797efcb3448f947ed58-last-access=2019-10-29T14%3A07%3A55.052Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3; Max-Age=86400; Expires=Wed, 30 Oct 2019 14:07:55 GMT; Path=/; Domain=algorithmia.com; Secure; HTTPOnly",
            "strict-transport-security": "max-age=86400; includeSubDomains",
            "vary": "Accept-Encoding",
            "x-content-type-options": "nosniff",
            "x-frame-options": "DENY",
            "content-length": "35",
            "connection": "keep-alive"
          },
          "body": {
            "result": true
          }
        }
      },
      {
        "request": {
          "url": "/webapi/algorithms/acunniffe/abc",
          "method": "GET",
          "headers": {
            "host": "algorithmia.com",
            "connection": "keep-alive",
            "pragma": "no-cache",
            "cache-control": "no-cache",
            "accept": "application/json, text/plain, */*",
            "dnt": "1",
            "x-xsrf-token": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "cors",
            "referer": "https://algorithmia.com/algorithms/acunniffe/abc/settings",
            "accept-encoding": "gzip, deflate, br",
            "accept-language": "en-US,en;q=0.9",
            "cookie": "ajs_group_id=null; ajs_anonymous_id=%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22; _ga=GA1.2.1872580011.1571235636; _fbp=fb.1.1571235636317.604574724; intercom-id-c9fj6354=01941621-342b-4320-ad75-53826b5a002c; hubspotutk=105fad8a9b12bfed67330a0dbfe12c61; _gid=GA1.2.1843278152.1572282100; __zlcmid=uzie5dAUbB300Y; __hstc=69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3; __hssrc=1; fs_intercom=4655074328608768:4513847218700288; XSRF-TOKEN=0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da; referrer=www.google.com; landing_page=https://algorithmia.com/; signup_session=true; ajs_user_id=%22acunniffe%22; fs_uid=rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636; new-algo-language=scala; _gat=1; __hssc=69686351.6.1572357353053; intercom-session-c9fj6354=RzJVV0NsOVQwMHIvcVR3OXVOZENmc1pWbWhMZ09zczVSbHRlRXhMMDJ3dnJQV3dnRkVJTDZTQndRQUlQcFNxZi0teWJ1VmhEd0h1M0w5b20xeFV1TkU5dz09--1aff24c8ed30f3dc8ed16e2203be5cd7657d8711; ALGO_SESSION=1eb3e85d68675bf12b409797efcb3448f947ed58-last-access=2019-10-29T14%3A07%3A55.052Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "cookies": {
            "ajs_group_id": "null",
            "ajs_anonymous_id": "%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22",
            "_ga": "GA1.2.1872580011.1571235636",
            "_fbp": "fb.1.1571235636317.604574724",
            "intercom-id-c9fj6354": "01941621-342b-4320-ad75-53826b5a002c",
            "hubspotutk": "105fad8a9b12bfed67330a0dbfe12c61",
            "_gid": "GA1.2.1843278152.1572282100",
            "__zlcmid": "uzie5dAUbB300Y",
            "__hstc": "69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3",
            "__hssrc": "1",
            "fs_intercom": "4655074328608768:4513847218700288",
            "XSRF-TOKEN": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "referrer": "www.google.com",
            "landing_page": "https://algorithmia.com/",
            "signup_session": "true",
            "ajs_user_id": "%22acunniffe%22",
            "fs_uid": "rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636",
            "new-algo-language": "scala",
            "_gat": "1",
            "__hssc": "69686351.6.1572357353053",
            "intercom-session-c9fj6354": "RzJVV0NsOVQwMHIvcVR3OXVOZENmc1pWbWhMZ09zczVSbHRlRXhMMDJ3dnJQV3dnRkVJTDZTQndRQUlQcFNxZi0teWJ1VmhEd0h1M0w5b20xeFV1TkU5dz09--1aff24c8ed30f3dc8ed16e2203be5cd7657d8711",
            "ALGO_SESSION": "1eb3e85d68675bf12b409797efcb3448f947ed58-last-access=2019-10-29T14%3A07%3A55.052Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "queryParameters": {}
        },
        "response": {
          "statusCode": 200,
          "headers": {
            "content-encoding": "gzip",
            "content-type": "application/json; charset=utf-8",
            "date": "Tue, 29 Oct 2019 14:07:55 GMT",
            "set-cookie": "ALGO_SESSION=3f5b155873435874b511abb9023b1697d9b7d47c-last-access=2019-10-29T14%3A07%3A55.975Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3; Max-Age=86400; Expires=Wed, 30 Oct 2019 14:07:55 GMT; Path=/; Domain=algorithmia.com; Secure; HTTPOnly",
            "strict-transport-security": "max-age=86400; includeSubDomains",
            "vary": "Accept-Encoding",
            "x-content-type-options": "nosniff",
            "x-frame-options": "DENY",
            "content-length": "253",
            "connection": "keep-alive"
          },
          "body": {
            "algorithm": {
              "algo_id": 130238,
              "object_id": "algo-235955d5-d716-47a4-b9fa-a4ad372f98c6",
              "username": "acunniffe",
              "algoname": "abc",
              "algolabel": "abc",
              "language": "scala",
              "tag_line": "",
              "discoverable_world": false,
              "source_world": false,
              "license": "apl",
              "tags": [],
              "stats": {
                "total_calls": 0,
                "follower_count": 1,
                "vote_count": 1
              },
              "current_user": {
                "is_member": true,
                "is_owner": true,
                "is_follower": true,
                "is_voter": true
              }
            }
          }
        }
      },
      {
        "request": {
          "url": "/webapi/algorithms/acunniffe/abc",
          "method": "GET",
          "headers": {
            "host": "algorithmia.com",
            "connection": "keep-alive",
            "pragma": "no-cache",
            "cache-control": "no-cache",
            "accept": "application/json, text/plain, */*",
            "dnt": "1",
            "x-xsrf-token": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "cors",
            "referer": "https://algorithmia.com/algorithms/acunniffe/abc/settings",
            "accept-encoding": "gzip, deflate, br",
            "accept-language": "en-US,en;q=0.9",
            "cookie": "ajs_group_id=null; ajs_anonymous_id=%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22; _ga=GA1.2.1872580011.1571235636; _fbp=fb.1.1571235636317.604574724; intercom-id-c9fj6354=01941621-342b-4320-ad75-53826b5a002c; hubspotutk=105fad8a9b12bfed67330a0dbfe12c61; _gid=GA1.2.1843278152.1572282100; __zlcmid=uzie5dAUbB300Y; __hstc=69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3; __hssrc=1; fs_intercom=4655074328608768:4513847218700288; XSRF-TOKEN=0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da; referrer=www.google.com; landing_page=https://algorithmia.com/; signup_session=true; ajs_user_id=%22acunniffe%22; fs_uid=rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636; new-algo-language=scala; _gat=1; __hssc=69686351.6.1572357353053; intercom-session-c9fj6354=RzJVV0NsOVQwMHIvcVR3OXVOZENmc1pWbWhMZ09zczVSbHRlRXhMMDJ3dnJQV3dnRkVJTDZTQndRQUlQcFNxZi0teWJ1VmhEd0h1M0w5b20xeFV1TkU5dz09--1aff24c8ed30f3dc8ed16e2203be5cd7657d8711; ALGO_SESSION=3f5b155873435874b511abb9023b1697d9b7d47c-last-access=2019-10-29T14%3A07%3A55.975Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "cookies": {
            "ajs_group_id": "null",
            "ajs_anonymous_id": "%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22",
            "_ga": "GA1.2.1872580011.1571235636",
            "_fbp": "fb.1.1571235636317.604574724",
            "intercom-id-c9fj6354": "01941621-342b-4320-ad75-53826b5a002c",
            "hubspotutk": "105fad8a9b12bfed67330a0dbfe12c61",
            "_gid": "GA1.2.1843278152.1572282100",
            "__zlcmid": "uzie5dAUbB300Y",
            "__hstc": "69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3",
            "__hssrc": "1",
            "fs_intercom": "4655074328608768:4513847218700288",
            "XSRF-TOKEN": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "referrer": "www.google.com",
            "landing_page": "https://algorithmia.com/",
            "signup_session": "true",
            "ajs_user_id": "%22acunniffe%22",
            "fs_uid": "rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636",
            "new-algo-language": "scala",
            "_gat": "1",
            "__hssc": "69686351.6.1572357353053",
            "intercom-session-c9fj6354": "RzJVV0NsOVQwMHIvcVR3OXVOZENmc1pWbWhMZ09zczVSbHRlRXhMMDJ3dnJQV3dnRkVJTDZTQndRQUlQcFNxZi0teWJ1VmhEd0h1M0w5b20xeFV1TkU5dz09--1aff24c8ed30f3dc8ed16e2203be5cd7657d8711",
            "ALGO_SESSION": "3f5b155873435874b511abb9023b1697d9b7d47c-last-access=2019-10-29T14%3A07%3A55.975Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "queryParameters": {}
        },
        "response": {
          "statusCode": 200,
          "headers": {
            "content-encoding": "gzip",
            "content-type": "application/json; charset=utf-8",
            "date": "Tue, 29 Oct 2019 14:07:56 GMT",
            "set-cookie": "ALGO_SESSION=d862c126b779ced359f597e9cad44aa9d17610e6-last-access=2019-10-29T14%3A07%3A56.072Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3; Max-Age=86400; Expires=Wed, 30 Oct 2019 14:07:56 GMT; Path=/; Domain=algorithmia.com; Secure; HTTPOnly",
            "strict-transport-security": "max-age=86400; includeSubDomains",
            "vary": "Accept-Encoding",
            "x-content-type-options": "nosniff",
            "x-frame-options": "DENY",
            "content-length": "253",
            "connection": "keep-alive"
          },
          "body": {
            "algorithm": {
              "algo_id": 130238,
              "object_id": "algo-235955d5-d716-47a4-b9fa-a4ad372f98c6",
              "username": "acunniffe",
              "algoname": "abc",
              "algolabel": "abc",
              "language": "scala",
              "tag_line": "",
              "discoverable_world": false,
              "source_world": false,
              "license": "apl",
              "tags": [],
              "stats": {
                "total_calls": 0,
                "follower_count": 1,
                "vote_count": 1
              },
              "current_user": {
                "is_member": true,
                "is_owner": true,
                "is_follower": true,
                "is_voter": true
              }
            }
          }
        }
      },
      {
        "request": {
          "url": "/webapi/algorithms/acunniffe/abc/versions/latest",
          "method": "GET",
          "headers": {
            "host": "algorithmia.com",
            "connection": "keep-alive",
            "pragma": "no-cache",
            "cache-control": "no-cache",
            "accept": "application/json, text/plain, */*",
            "dnt": "1",
            "x-xsrf-token": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "cors",
            "referer": "https://algorithmia.com/algorithms/acunniffe/abc/settings",
            "accept-encoding": "gzip, deflate, br",
            "accept-language": "en-US,en;q=0.9",
            "cookie": "ajs_group_id=null; ajs_anonymous_id=%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22; _ga=GA1.2.1872580011.1571235636; _fbp=fb.1.1571235636317.604574724; intercom-id-c9fj6354=01941621-342b-4320-ad75-53826b5a002c; hubspotutk=105fad8a9b12bfed67330a0dbfe12c61; _gid=GA1.2.1843278152.1572282100; __zlcmid=uzie5dAUbB300Y; __hstc=69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3; __hssrc=1; fs_intercom=4655074328608768:4513847218700288; XSRF-TOKEN=0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da; referrer=www.google.com; landing_page=https://algorithmia.com/; signup_session=true; ajs_user_id=%22acunniffe%22; fs_uid=rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636; new-algo-language=scala; _gat=1; __hssc=69686351.6.1572357353053; intercom-session-c9fj6354=RzJVV0NsOVQwMHIvcVR3OXVOZENmc1pWbWhMZ09zczVSbHRlRXhMMDJ3dnJQV3dnRkVJTDZTQndRQUlQcFNxZi0teWJ1VmhEd0h1M0w5b20xeFV1TkU5dz09--1aff24c8ed30f3dc8ed16e2203be5cd7657d8711; ALGO_SESSION=d862c126b779ced359f597e9cad44aa9d17610e6-last-access=2019-10-29T14%3A07%3A56.072Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "cookies": {
            "ajs_group_id": "null",
            "ajs_anonymous_id": "%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22",
            "_ga": "GA1.2.1872580011.1571235636",
            "_fbp": "fb.1.1571235636317.604574724",
            "intercom-id-c9fj6354": "01941621-342b-4320-ad75-53826b5a002c",
            "hubspotutk": "105fad8a9b12bfed67330a0dbfe12c61",
            "_gid": "GA1.2.1843278152.1572282100",
            "__zlcmid": "uzie5dAUbB300Y",
            "__hstc": "69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3",
            "__hssrc": "1",
            "fs_intercom": "4655074328608768:4513847218700288",
            "XSRF-TOKEN": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "referrer": "www.google.com",
            "landing_page": "https://algorithmia.com/",
            "signup_session": "true",
            "ajs_user_id": "%22acunniffe%22",
            "fs_uid": "rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636",
            "new-algo-language": "scala",
            "_gat": "1",
            "__hssc": "69686351.6.1572357353053",
            "intercom-session-c9fj6354": "RzJVV0NsOVQwMHIvcVR3OXVOZENmc1pWbWhMZ09zczVSbHRlRXhMMDJ3dnJQV3dnRkVJTDZTQndRQUlQcFNxZi0teWJ1VmhEd0h1M0w5b20xeFV1TkU5dz09--1aff24c8ed30f3dc8ed16e2203be5cd7657d8711",
            "ALGO_SESSION": "d862c126b779ced359f597e9cad44aa9d17610e6-last-access=2019-10-29T14%3A07%3A56.072Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "queryParameters": {}
        },
        "response": {
          "statusCode": 200,
          "headers": {
            "content-encoding": "gzip",
            "content-type": "application/json; charset=utf-8",
            "date": "Tue, 29 Oct 2019 14:07:56 GMT",
            "set-cookie": "ALGO_SESSION=413a4ce11f91c52e3fd0be745630d53fc9f2f03c-last-access=2019-10-29T14%3A07%3A56.118Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3; Max-Age=86400; Expires=Wed, 30 Oct 2019 14:07:56 GMT; Path=/; Domain=algorithmia.com; Secure; HTTPOnly",
            "strict-transport-security": "max-age=86400; includeSubDomains",
            "vary": "Accept-Encoding",
            "x-content-type-options": "nosniff",
            "x-frame-options": "DENY",
            "content-length": "43",
            "connection": "keep-alive"
          },
          "body": {
            "latest_version": null
          }
        }
      },
      {
        "request": {
          "url": "/v1/algorithms/acunniffe/abc",
          "method": "GET",
          "headers": {
            "host": "algorithmia.com",
            "connection": "keep-alive",
            "pragma": "no-cache",
            "cache-control": "no-cache",
            "accept": "application/json, text/plain, */*",
            "dnt": "1",
            "x-xsrf-token": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "cors",
            "referer": "https://algorithmia.com/algorithms/acunniffe/abc/source",
            "accept-encoding": "gzip, deflate, br",
            "accept-language": "en-US,en;q=0.9",
            "cookie": "ajs_group_id=null; ajs_anonymous_id=%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22; _ga=GA1.2.1872580011.1571235636; _fbp=fb.1.1571235636317.604574724; intercom-id-c9fj6354=01941621-342b-4320-ad75-53826b5a002c; hubspotutk=105fad8a9b12bfed67330a0dbfe12c61; _gid=GA1.2.1843278152.1572282100; __zlcmid=uzie5dAUbB300Y; __hstc=69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3; __hssrc=1; fs_intercom=4655074328608768:4513847218700288; XSRF-TOKEN=0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da; referrer=www.google.com; landing_page=https://algorithmia.com/; signup_session=true; ajs_user_id=%22acunniffe%22; fs_uid=rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636; new-algo-language=scala; _gat=1; __hssc=69686351.6.1572357353053; intercom-session-c9fj6354=RzJVV0NsOVQwMHIvcVR3OXVOZENmc1pWbWhMZ09zczVSbHRlRXhMMDJ3dnJQV3dnRkVJTDZTQndRQUlQcFNxZi0teWJ1VmhEd0h1M0w5b20xeFV1TkU5dz09--1aff24c8ed30f3dc8ed16e2203be5cd7657d8711; ALGO_SESSION=413a4ce11f91c52e3fd0be745630d53fc9f2f03c-last-access=2019-10-29T14%3A07%3A56.118Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "cookies": {
            "ajs_group_id": "null",
            "ajs_anonymous_id": "%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22",
            "_ga": "GA1.2.1872580011.1571235636",
            "_fbp": "fb.1.1571235636317.604574724",
            "intercom-id-c9fj6354": "01941621-342b-4320-ad75-53826b5a002c",
            "hubspotutk": "105fad8a9b12bfed67330a0dbfe12c61",
            "_gid": "GA1.2.1843278152.1572282100",
            "__zlcmid": "uzie5dAUbB300Y",
            "__hstc": "69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3",
            "__hssrc": "1",
            "fs_intercom": "4655074328608768:4513847218700288",
            "XSRF-TOKEN": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "referrer": "www.google.com",
            "landing_page": "https://algorithmia.com/",
            "signup_session": "true",
            "ajs_user_id": "%22acunniffe%22",
            "fs_uid": "rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636",
            "new-algo-language": "scala",
            "_gat": "1",
            "__hssc": "69686351.6.1572357353053",
            "intercom-session-c9fj6354": "RzJVV0NsOVQwMHIvcVR3OXVOZENmc1pWbWhMZ09zczVSbHRlRXhMMDJ3dnJQV3dnRkVJTDZTQndRQUlQcFNxZi0teWJ1VmhEd0h1M0w5b20xeFV1TkU5dz09--1aff24c8ed30f3dc8ed16e2203be5cd7657d8711",
            "ALGO_SESSION": "413a4ce11f91c52e3fd0be745630d53fc9f2f03c-last-access=2019-10-29T14%3A07%3A56.118Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "queryParameters": {}
        },
        "response": {
          "statusCode": 200,
          "headers": {
            "content-encoding": "gzip",
            "content-type": "application/json; charset=utf-8",
            "date": "Tue, 29 Oct 2019 14:07:56 GMT",
            "set-cookie": "ALGO_SESSION=5ecf3b3631ff00acacce9c9e4f325b515b0943e2-last-access=2019-10-29T14%3A07%3A56.246Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3; Max-Age=86400; Expires=Wed, 30 Oct 2019 14:07:56 GMT; Path=/; Domain=algorithmia.com; Secure; HTTPOnly",
            "strict-transport-security": "max-age=86400; includeSubDomains",
            "vary": "Accept-Encoding",
            "x-content-type-options": "nosniff",
            "x-frame-options": "DENY",
            "content-length": "179",
            "connection": "keep-alive"
          },
          "body": {
            "name": "abc",
            "details": {
              "label": "abc",
              "tagline": ""
            },
            "settings": {
              "algorithm_callability": "private",
              "source_visibility": "closed",
              "language": "scala",
              "environment": "cpu",
              "license": "apl",
              "network_access": "full",
              "pipeline_enabled": true
            },
            "resource_type": "algorithm"
          }
        }
      },
      {
        "request": {
          "url": "/webapi/algorithms/acunniffe/abc",
          "method": "GET",
          "headers": {
            "host": "algorithmia.com",
            "connection": "keep-alive",
            "pragma": "no-cache",
            "cache-control": "no-cache",
            "accept": "application/json, text/plain, */*",
            "dnt": "1",
            "x-xsrf-token": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "cors",
            "referer": "https://algorithmia.com/algorithms/acunniffe/abc/settings",
            "accept-encoding": "gzip, deflate, br",
            "accept-language": "en-US,en;q=0.9",
            "cookie": "ajs_group_id=null; ajs_anonymous_id=%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22; _ga=GA1.2.1872580011.1571235636; _fbp=fb.1.1571235636317.604574724; intercom-id-c9fj6354=01941621-342b-4320-ad75-53826b5a002c; hubspotutk=105fad8a9b12bfed67330a0dbfe12c61; _gid=GA1.2.1843278152.1572282100; __zlcmid=uzie5dAUbB300Y; __hstc=69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3; __hssrc=1; fs_intercom=4655074328608768:4513847218700288; XSRF-TOKEN=0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da; referrer=www.google.com; landing_page=https://algorithmia.com/; signup_session=true; ajs_user_id=%22acunniffe%22; fs_uid=rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636; new-algo-language=scala; _gat=1; __hssc=69686351.6.1572357353053; intercom-session-c9fj6354=RzJVV0NsOVQwMHIvcVR3OXVOZENmc1pWbWhMZ09zczVSbHRlRXhMMDJ3dnJQV3dnRkVJTDZTQndRQUlQcFNxZi0teWJ1VmhEd0h1M0w5b20xeFV1TkU5dz09--1aff24c8ed30f3dc8ed16e2203be5cd7657d8711; ALGO_SESSION=c1439984e6e6d7ba7175c1f812029a9cd115b529-last-access=2019-10-29T14%3A07%3A59.897Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "cookies": {
            "ajs_group_id": "null",
            "ajs_anonymous_id": "%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22",
            "_ga": "GA1.2.1872580011.1571235636",
            "_fbp": "fb.1.1571235636317.604574724",
            "intercom-id-c9fj6354": "01941621-342b-4320-ad75-53826b5a002c",
            "hubspotutk": "105fad8a9b12bfed67330a0dbfe12c61",
            "_gid": "GA1.2.1843278152.1572282100",
            "__zlcmid": "uzie5dAUbB300Y",
            "__hstc": "69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3",
            "__hssrc": "1",
            "fs_intercom": "4655074328608768:4513847218700288",
            "XSRF-TOKEN": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "referrer": "www.google.com",
            "landing_page": "https://algorithmia.com/",
            "signup_session": "true",
            "ajs_user_id": "%22acunniffe%22",
            "fs_uid": "rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636",
            "new-algo-language": "scala",
            "_gat": "1",
            "__hssc": "69686351.6.1572357353053",
            "intercom-session-c9fj6354": "RzJVV0NsOVQwMHIvcVR3OXVOZENmc1pWbWhMZ09zczVSbHRlRXhMMDJ3dnJQV3dnRkVJTDZTQndRQUlQcFNxZi0teWJ1VmhEd0h1M0w5b20xeFV1TkU5dz09--1aff24c8ed30f3dc8ed16e2203be5cd7657d8711",
            "ALGO_SESSION": "c1439984e6e6d7ba7175c1f812029a9cd115b529-last-access=2019-10-29T14%3A07%3A59.897Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "queryParameters": {}
        },
        "response": {
          "statusCode": 200,
          "headers": {
            "content-encoding": "gzip",
            "content-type": "application/json; charset=utf-8",
            "date": "Tue, 29 Oct 2019 14:08:06 GMT",
            "set-cookie": "ALGO_SESSION=05c744f01c6812c71c5f049a2be4f64b5f322b91-last-access=2019-10-29T14%3A08%3A06.862Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3; Max-Age=86400; Expires=Wed, 30 Oct 2019 14:08:06 GMT; Path=/; Domain=algorithmia.com; Secure; HTTPOnly",
            "strict-transport-security": "max-age=86400; includeSubDomains",
            "vary": "Accept-Encoding",
            "x-content-type-options": "nosniff",
            "x-frame-options": "DENY",
            "content-length": "253",
            "connection": "keep-alive"
          },
          "body": {
            "algorithm": {
              "algo_id": 130238,
              "object_id": "algo-235955d5-d716-47a4-b9fa-a4ad372f98c6",
              "username": "acunniffe",
              "algoname": "abc",
              "algolabel": "abc",
              "language": "scala",
              "tag_line": "",
              "discoverable_world": false,
              "source_world": false,
              "license": "apl",
              "tags": [],
              "stats": {
                "total_calls": 0,
                "follower_count": 1,
                "vote_count": 1
              },
              "current_user": {
                "is_member": true,
                "is_owner": true,
                "is_follower": true,
                "is_voter": true
              }
            }
          }
        }
      },
      {
        "request": {
          "url": "/notifications",
          "method": "GET",
          "headers": {
            "host": "algorithmia.com",
            "connection": "keep-alive",
            "pragma": "no-cache",
            "cache-control": "no-cache",
            "accept": "application/json, text/plain, */*",
            "dnt": "1",
            "x-xsrf-token": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "cors",
            "referer": "https://algorithmia.com/algorithms/acunniffe/abc/settings",
            "accept-encoding": "gzip, deflate, br",
            "accept-language": "en-US,en;q=0.9",
            "cookie": "ajs_group_id=null; ajs_anonymous_id=%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22; _ga=GA1.2.1872580011.1571235636; _fbp=fb.1.1571235636317.604574724; intercom-id-c9fj6354=01941621-342b-4320-ad75-53826b5a002c; hubspotutk=105fad8a9b12bfed67330a0dbfe12c61; _gid=GA1.2.1843278152.1572282100; __zlcmid=uzie5dAUbB300Y; __hstc=69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3; __hssrc=1; fs_intercom=4655074328608768:4513847218700288; XSRF-TOKEN=0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da; referrer=www.google.com; landing_page=https://algorithmia.com/; signup_session=true; ajs_user_id=%22acunniffe%22; fs_uid=rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636; new-algo-language=scala; _gat=1; __hssc=69686351.6.1572357353053; intercom-session-c9fj6354=RzJVV0NsOVQwMHIvcVR3OXVOZENmc1pWbWhMZ09zczVSbHRlRXhMMDJ3dnJQV3dnRkVJTDZTQndRQUlQcFNxZi0teWJ1VmhEd0h1M0w5b20xeFV1TkU5dz09--1aff24c8ed30f3dc8ed16e2203be5cd7657d8711; ALGO_SESSION=05c744f01c6812c71c5f049a2be4f64b5f322b91-last-access=2019-10-29T14%3A08%3A06.862Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "cookies": {
            "ajs_group_id": "null",
            "ajs_anonymous_id": "%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22",
            "_ga": "GA1.2.1872580011.1571235636",
            "_fbp": "fb.1.1571235636317.604574724",
            "intercom-id-c9fj6354": "01941621-342b-4320-ad75-53826b5a002c",
            "hubspotutk": "105fad8a9b12bfed67330a0dbfe12c61",
            "_gid": "GA1.2.1843278152.1572282100",
            "__zlcmid": "uzie5dAUbB300Y",
            "__hstc": "69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3",
            "__hssrc": "1",
            "fs_intercom": "4655074328608768:4513847218700288",
            "XSRF-TOKEN": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "referrer": "www.google.com",
            "landing_page": "https://algorithmia.com/",
            "signup_session": "true",
            "ajs_user_id": "%22acunniffe%22",
            "fs_uid": "rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636",
            "new-algo-language": "scala",
            "_gat": "1",
            "__hssc": "69686351.6.1572357353053",
            "intercom-session-c9fj6354": "RzJVV0NsOVQwMHIvcVR3OXVOZENmc1pWbWhMZ09zczVSbHRlRXhMMDJ3dnJQV3dnRkVJTDZTQndRQUlQcFNxZi0teWJ1VmhEd0h1M0w5b20xeFV1TkU5dz09--1aff24c8ed30f3dc8ed16e2203be5cd7657d8711",
            "ALGO_SESSION": "05c744f01c6812c71c5f049a2be4f64b5f322b91-last-access=2019-10-29T14%3A08%3A06.862Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "queryParameters": {}
        },
        "response": {
          "statusCode": 200,
          "headers": {
            "content-encoding": "gzip",
            "content-type": "application/json; charset=utf-8",
            "date": "Tue, 29 Oct 2019 14:08:06 GMT",
            "set-cookie": "ALGO_SESSION=c262329daa4a34a3456b5ca4a734af2461fb4761-last-access=2019-10-29T14%3A08%3A06.963Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3; Max-Age=86400; Expires=Wed, 30 Oct 2019 14:08:06 GMT; Path=/; Domain=algorithmia.com; Secure; HTTPOnly",
            "strict-transport-security": "max-age=86400; includeSubDomains",
            "vary": "Accept-Encoding",
            "x-content-type-options": "nosniff",
            "x-frame-options": "DENY",
            "content-length": "243",
            "connection": "keep-alive"
          },
          "body": [
            {
              "notification_id": "notif-016e17d233b7-5c270611-8927-4efb-8743-78eec241f572",
              "to_username": "acunniffe",
              "event_type": "system",
              "event_context": {
                "message": "Welcome to Algorithmia! - We've added 50k credits to your account!",
                "url": "/users/acunniffe/account",
                "event_type": "system"
              },
              "read_at": 1572357947000,
              "created_at": 1572357682000
            }
          ]
        }
      },
      {
        "request": {
          "url": "/webapi/v1/languages",
          "method": "GET",
          "headers": {
            "host": "algorithmia.com",
            "connection": "keep-alive",
            "pragma": "no-cache",
            "cache-control": "no-cache",
            "accept": "application/json, text/plain, */*",
            "dnt": "1",
            "x-xsrf-token": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "cors",
            "referer": "https://algorithmia.com/algorithms/acunniffe/abc/settings",
            "accept-encoding": "gzip, deflate, br",
            "accept-language": "en-US,en;q=0.9",
            "cookie": "ajs_group_id=null; ajs_anonymous_id=%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22; _ga=GA1.2.1872580011.1571235636; _fbp=fb.1.1571235636317.604574724; intercom-id-c9fj6354=01941621-342b-4320-ad75-53826b5a002c; hubspotutk=105fad8a9b12bfed67330a0dbfe12c61; _gid=GA1.2.1843278152.1572282100; __zlcmid=uzie5dAUbB300Y; __hstc=69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3; __hssrc=1; fs_intercom=4655074328608768:4513847218700288; XSRF-TOKEN=0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da; referrer=www.google.com; landing_page=https://algorithmia.com/; signup_session=true; ajs_user_id=%22acunniffe%22; fs_uid=rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636; new-algo-language=scala; _gat=1; __hssc=69686351.6.1572357353053; intercom-session-c9fj6354=RzJVV0NsOVQwMHIvcVR3OXVOZENmc1pWbWhMZ09zczVSbHRlRXhMMDJ3dnJQV3dnRkVJTDZTQndRQUlQcFNxZi0teWJ1VmhEd0h1M0w5b20xeFV1TkU5dz09--1aff24c8ed30f3dc8ed16e2203be5cd7657d8711; ALGO_SESSION=05c744f01c6812c71c5f049a2be4f64b5f322b91-last-access=2019-10-29T14%3A08%3A06.862Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "cookies": {
            "ajs_group_id": "null",
            "ajs_anonymous_id": "%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22",
            "_ga": "GA1.2.1872580011.1571235636",
            "_fbp": "fb.1.1571235636317.604574724",
            "intercom-id-c9fj6354": "01941621-342b-4320-ad75-53826b5a002c",
            "hubspotutk": "105fad8a9b12bfed67330a0dbfe12c61",
            "_gid": "GA1.2.1843278152.1572282100",
            "__zlcmid": "uzie5dAUbB300Y",
            "__hstc": "69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3",
            "__hssrc": "1",
            "fs_intercom": "4655074328608768:4513847218700288",
            "XSRF-TOKEN": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "referrer": "www.google.com",
            "landing_page": "https://algorithmia.com/",
            "signup_session": "true",
            "ajs_user_id": "%22acunniffe%22",
            "fs_uid": "rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636",
            "new-algo-language": "scala",
            "_gat": "1",
            "__hssc": "69686351.6.1572357353053",
            "intercom-session-c9fj6354": "RzJVV0NsOVQwMHIvcVR3OXVOZENmc1pWbWhMZ09zczVSbHRlRXhMMDJ3dnJQV3dnRkVJTDZTQndRQUlQcFNxZi0teWJ1VmhEd0h1M0w5b20xeFV1TkU5dz09--1aff24c8ed30f3dc8ed16e2203be5cd7657d8711",
            "ALGO_SESSION": "05c744f01c6812c71c5f049a2be4f64b5f322b91-last-access=2019-10-29T14%3A08%3A06.862Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "queryParameters": {}
        },
        "response": {
          "statusCode": 200,
          "headers": {
            "content-encoding": "gzip",
            "content-type": "application/json; charset=utf-8",
            "date": "Tue, 29 Oct 2019 14:08:07 GMT",
            "strict-transport-security": "max-age=86400; includeSubDomains",
            "vary": "Accept-Encoding",
            "x-content-type-options": "nosniff",
            "x-frame-options": "DENY",
            "content-length": "227",
            "connection": "keep-alive"
          },
          "body": {
            "results": [
              {
                "id": "java",
                "name": "Java",
                "is_deprecated": false,
                "is_experimental": false,
                "language_type": "langpack",
                "resource_type": "language"
              },
              {
                "id": "javascript",
                "name": "Javascript",
                "is_deprecated": false,
                "is_experimental": false,
                "language_type": "langpack",
                "resource_type": "language"
              },
              {
                "id": "python2-image",
                "name": "Python 2.x - Beta",
                "is_deprecated": false,
                "is_experimental": false,
                "language_type": "image",
                "resource_type": "language"
              },
              {
                "id": "python2-langpack",
                "name": "Python 2.x",
                "is_deprecated": false,
                "is_experimental": false,
                "language_type": "langpack",
                "resource_type": "language"
              },
              {
                "id": "python3-image",
                "name": "Python 3.x - Beta",
                "is_deprecated": false,
                "is_experimental": false,
                "language_type": "image",
                "resource_type": "language"
              },
              {
                "id": "python3-1",
                "name": "Python 3.x",
                "is_deprecated": false,
                "is_experimental": false,
                "language_type": "langpack",
                "resource_type": "language"
              },
              {
                "id": "r",
                "name": "R",
                "is_deprecated": false,
                "is_experimental": false,
                "language_type": "langpack",
                "resource_type": "language"
              },
              {
                "id": "ruby",
                "name": "Ruby",
                "is_deprecated": false,
                "is_experimental": false,
                "language_type": "langpack",
                "resource_type": "language"
              },
              {
                "id": "rust",
                "name": "Rust",
                "is_deprecated": false,
                "is_experimental": false,
                "language_type": "langpack",
                "resource_type": "language"
              },
              {
                "id": "scala",
                "name": "Scala",
                "is_deprecated": false,
                "is_experimental": false,
                "language_type": "langpack",
                "resource_type": "language"
              }
            ]
          }
        }
      },
      {
        "request": {
          "url": "/webapi/algorithms/acunniffe/abc/versions/latest",
          "method": "GET",
          "headers": {
            "host": "algorithmia.com",
            "connection": "keep-alive",
            "pragma": "no-cache",
            "cache-control": "no-cache",
            "accept": "application/json, text/plain, */*",
            "dnt": "1",
            "x-xsrf-token": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "cors",
            "referer": "https://algorithmia.com/algorithms/acunniffe/abc/settings",
            "accept-encoding": "gzip, deflate, br",
            "accept-language": "en-US,en;q=0.9",
            "cookie": "ajs_group_id=null; ajs_anonymous_id=%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22; _ga=GA1.2.1872580011.1571235636; _fbp=fb.1.1571235636317.604574724; intercom-id-c9fj6354=01941621-342b-4320-ad75-53826b5a002c; hubspotutk=105fad8a9b12bfed67330a0dbfe12c61; _gid=GA1.2.1843278152.1572282100; __zlcmid=uzie5dAUbB300Y; __hstc=69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3; __hssrc=1; fs_intercom=4655074328608768:4513847218700288; XSRF-TOKEN=0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da; referrer=www.google.com; landing_page=https://algorithmia.com/; signup_session=true; ajs_user_id=%22acunniffe%22; fs_uid=rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636; new-algo-language=scala; _gat=1; __hssc=69686351.6.1572357353053; intercom-session-c9fj6354=RzJVV0NsOVQwMHIvcVR3OXVOZENmc1pWbWhMZ09zczVSbHRlRXhMMDJ3dnJQV3dnRkVJTDZTQndRQUlQcFNxZi0teWJ1VmhEd0h1M0w5b20xeFV1TkU5dz09--1aff24c8ed30f3dc8ed16e2203be5cd7657d8711; ALGO_SESSION=05c744f01c6812c71c5f049a2be4f64b5f322b91-last-access=2019-10-29T14%3A08%3A06.862Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "cookies": {
            "ajs_group_id": "null",
            "ajs_anonymous_id": "%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22",
            "_ga": "GA1.2.1872580011.1571235636",
            "_fbp": "fb.1.1571235636317.604574724",
            "intercom-id-c9fj6354": "01941621-342b-4320-ad75-53826b5a002c",
            "hubspotutk": "105fad8a9b12bfed67330a0dbfe12c61",
            "_gid": "GA1.2.1843278152.1572282100",
            "__zlcmid": "uzie5dAUbB300Y",
            "__hstc": "69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3",
            "__hssrc": "1",
            "fs_intercom": "4655074328608768:4513847218700288",
            "XSRF-TOKEN": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "referrer": "www.google.com",
            "landing_page": "https://algorithmia.com/",
            "signup_session": "true",
            "ajs_user_id": "%22acunniffe%22",
            "fs_uid": "rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636",
            "new-algo-language": "scala",
            "_gat": "1",
            "__hssc": "69686351.6.1572357353053",
            "intercom-session-c9fj6354": "RzJVV0NsOVQwMHIvcVR3OXVOZENmc1pWbWhMZ09zczVSbHRlRXhMMDJ3dnJQV3dnRkVJTDZTQndRQUlQcFNxZi0teWJ1VmhEd0h1M0w5b20xeFV1TkU5dz09--1aff24c8ed30f3dc8ed16e2203be5cd7657d8711",
            "ALGO_SESSION": "05c744f01c6812c71c5f049a2be4f64b5f322b91-last-access=2019-10-29T14%3A08%3A06.862Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "queryParameters": {}
        },
        "response": {
          "statusCode": 200,
          "headers": {
            "content-encoding": "gzip",
            "content-type": "application/json; charset=utf-8",
            "date": "Tue, 29 Oct 2019 14:08:07 GMT",
            "set-cookie": "ALGO_SESSION=e2adead7cb69d399679267bb3999eaa33cc7f181-last-access=2019-10-29T14%3A08%3A07.005Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3; Max-Age=86400; Expires=Wed, 30 Oct 2019 14:08:07 GMT; Path=/; Domain=algorithmia.com; Secure; HTTPOnly",
            "strict-transport-security": "max-age=86400; includeSubDomains",
            "vary": "Accept-Encoding",
            "x-content-type-options": "nosniff",
            "x-frame-options": "DENY",
            "content-length": "43",
            "connection": "keep-alive"
          },
          "body": {
            "latest_version": null
          }
        }
      },
      {
        "request": {
          "url": "/v1/algorithms/acunniffe/abc",
          "method": "GET",
          "headers": {
            "host": "algorithmia.com",
            "connection": "keep-alive",
            "pragma": "no-cache",
            "cache-control": "no-cache",
            "accept": "application/json, text/plain, */*",
            "dnt": "1",
            "x-xsrf-token": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "cors",
            "referer": "https://algorithmia.com/algorithms/acunniffe/abc/settings",
            "accept-encoding": "gzip, deflate, br",
            "accept-language": "en-US,en;q=0.9",
            "cookie": "ajs_group_id=null; ajs_anonymous_id=%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22; _ga=GA1.2.1872580011.1571235636; _fbp=fb.1.1571235636317.604574724; intercom-id-c9fj6354=01941621-342b-4320-ad75-53826b5a002c; hubspotutk=105fad8a9b12bfed67330a0dbfe12c61; _gid=GA1.2.1843278152.1572282100; __zlcmid=uzie5dAUbB300Y; __hstc=69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3; __hssrc=1; fs_intercom=4655074328608768:4513847218700288; XSRF-TOKEN=0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da; referrer=www.google.com; landing_page=https://algorithmia.com/; signup_session=true; ajs_user_id=%22acunniffe%22; fs_uid=rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636; new-algo-language=scala; _gat=1; __hssc=69686351.6.1572357353053; intercom-session-c9fj6354=RzJVV0NsOVQwMHIvcVR3OXVOZENmc1pWbWhMZ09zczVSbHRlRXhMMDJ3dnJQV3dnRkVJTDZTQndRQUlQcFNxZi0teWJ1VmhEd0h1M0w5b20xeFV1TkU5dz09--1aff24c8ed30f3dc8ed16e2203be5cd7657d8711; ALGO_SESSION=05c744f01c6812c71c5f049a2be4f64b5f322b91-last-access=2019-10-29T14%3A08%3A06.862Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "cookies": {
            "ajs_group_id": "null",
            "ajs_anonymous_id": "%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22",
            "_ga": "GA1.2.1872580011.1571235636",
            "_fbp": "fb.1.1571235636317.604574724",
            "intercom-id-c9fj6354": "01941621-342b-4320-ad75-53826b5a002c",
            "hubspotutk": "105fad8a9b12bfed67330a0dbfe12c61",
            "_gid": "GA1.2.1843278152.1572282100",
            "__zlcmid": "uzie5dAUbB300Y",
            "__hstc": "69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3",
            "__hssrc": "1",
            "fs_intercom": "4655074328608768:4513847218700288",
            "XSRF-TOKEN": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "referrer": "www.google.com",
            "landing_page": "https://algorithmia.com/",
            "signup_session": "true",
            "ajs_user_id": "%22acunniffe%22",
            "fs_uid": "rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636",
            "new-algo-language": "scala",
            "_gat": "1",
            "__hssc": "69686351.6.1572357353053",
            "intercom-session-c9fj6354": "RzJVV0NsOVQwMHIvcVR3OXVOZENmc1pWbWhMZ09zczVSbHRlRXhMMDJ3dnJQV3dnRkVJTDZTQndRQUlQcFNxZi0teWJ1VmhEd0h1M0w5b20xeFV1TkU5dz09--1aff24c8ed30f3dc8ed16e2203be5cd7657d8711",
            "ALGO_SESSION": "05c744f01c6812c71c5f049a2be4f64b5f322b91-last-access=2019-10-29T14%3A08%3A06.862Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "queryParameters": {}
        },
        "response": {
          "statusCode": 200,
          "headers": {
            "content-encoding": "gzip",
            "content-type": "application/json; charset=utf-8",
            "date": "Tue, 29 Oct 2019 14:08:07 GMT",
            "set-cookie": "ALGO_SESSION=9fa1018578d6e7fc872f8864740efff603fa9ee2-last-access=2019-10-29T14%3A08%3A07.022Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3; Max-Age=86400; Expires=Wed, 30 Oct 2019 14:08:07 GMT; Path=/; Domain=algorithmia.com; Secure; HTTPOnly",
            "strict-transport-security": "max-age=86400; includeSubDomains",
            "vary": "Accept-Encoding",
            "x-content-type-options": "nosniff",
            "x-frame-options": "DENY",
            "content-length": "179",
            "connection": "keep-alive"
          },
          "body": {
            "name": "abc",
            "details": {
              "label": "abc",
              "tagline": ""
            },
            "settings": {
              "algorithm_callability": "private",
              "source_visibility": "closed",
              "language": "scala",
              "environment": "cpu",
              "license": "apl",
              "network_access": "full",
              "pipeline_enabled": true
            },
            "resource_type": "algorithm"
          }
        }
      },
      {
        "request": {
          "url": "/v1/algorithms/acunniffe/abc/builds",
          "method": "GET",
          "headers": {
            "host": "algorithmia.com",
            "connection": "keep-alive",
            "pragma": "no-cache",
            "cache-control": "no-cache",
            "accept": "application/json, text/plain, */*",
            "dnt": "1",
            "x-xsrf-token": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "cors",
            "referer": "https://algorithmia.com/algorithms/acunniffe/abc/builds",
            "accept-encoding": "gzip, deflate, br",
            "accept-language": "en-US,en;q=0.9",
            "cookie": "ajs_group_id=null; ajs_anonymous_id=%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22; _ga=GA1.2.1872580011.1571235636; _fbp=fb.1.1571235636317.604574724; intercom-id-c9fj6354=01941621-342b-4320-ad75-53826b5a002c; hubspotutk=105fad8a9b12bfed67330a0dbfe12c61; _gid=GA1.2.1843278152.1572282100; __zlcmid=uzie5dAUbB300Y; __hstc=69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3; __hssrc=1; fs_intercom=4655074328608768:4513847218700288; XSRF-TOKEN=0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da; referrer=www.google.com; landing_page=https://algorithmia.com/; signup_session=true; ajs_user_id=%22acunniffe%22; fs_uid=rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636; new-algo-language=scala; _gat=1; __hssc=69686351.6.1572357353053; intercom-session-c9fj6354=RzJVV0NsOVQwMHIvcVR3OXVOZENmc1pWbWhMZ09zczVSbHRlRXhMMDJ3dnJQV3dnRkVJTDZTQndRQUlQcFNxZi0teWJ1VmhEd0h1M0w5b20xeFV1TkU5dz09--1aff24c8ed30f3dc8ed16e2203be5cd7657d8711; ALGO_SESSION=9fa1018578d6e7fc872f8864740efff603fa9ee2-last-access=2019-10-29T14%3A08%3A07.022Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "cookies": {
            "ajs_group_id": "null",
            "ajs_anonymous_id": "%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22",
            "_ga": "GA1.2.1872580011.1571235636",
            "_fbp": "fb.1.1571235636317.604574724",
            "intercom-id-c9fj6354": "01941621-342b-4320-ad75-53826b5a002c",
            "hubspotutk": "105fad8a9b12bfed67330a0dbfe12c61",
            "_gid": "GA1.2.1843278152.1572282100",
            "__zlcmid": "uzie5dAUbB300Y",
            "__hstc": "69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3",
            "__hssrc": "1",
            "fs_intercom": "4655074328608768:4513847218700288",
            "XSRF-TOKEN": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "referrer": "www.google.com",
            "landing_page": "https://algorithmia.com/",
            "signup_session": "true",
            "ajs_user_id": "%22acunniffe%22",
            "fs_uid": "rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636",
            "new-algo-language": "scala",
            "_gat": "1",
            "__hssc": "69686351.6.1572357353053",
            "intercom-session-c9fj6354": "RzJVV0NsOVQwMHIvcVR3OXVOZENmc1pWbWhMZ09zczVSbHRlRXhMMDJ3dnJQV3dnRkVJTDZTQndRQUlQcFNxZi0teWJ1VmhEd0h1M0w5b20xeFV1TkU5dz09--1aff24c8ed30f3dc8ed16e2203be5cd7657d8711",
            "ALGO_SESSION": "9fa1018578d6e7fc872f8864740efff603fa9ee2-last-access=2019-10-29T14%3A08%3A07.022Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "queryParameters": {
            "limit": "100"
          }
        },
        "response": {
          "statusCode": 200,
          "headers": {
            "content-encoding": "gzip",
            "content-type": "application/json; charset=utf-8",
            "date": "Tue, 29 Oct 2019 14:08:08 GMT",
            "set-cookie": "ALGO_SESSION=598b64e2eb0dd79194b871163c635bddcffd47cb-last-access=2019-10-29T14%3A08%3A08.225Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3; Max-Age=86400; Expires=Wed, 30 Oct 2019 14:08:08 GMT; Path=/; Domain=algorithmia.com; Secure; HTTPOnly",
            "strict-transport-security": "max-age=86400; includeSubDomains",
            "vary": "Accept-Encoding",
            "x-content-type-options": "nosniff",
            "x-frame-options": "DENY",
            "content-length": "175",
            "connection": "keep-alive"
          },
          "body": {
            "marker": null,
            "next_link": null,
            "results": [
              {
                "build_id": "268039aa-8d4c-4b9a-ad89-9e219ed9f07d",
                "status": "in-progress",
                "commit_sha": "0826d84478e5d7e4409dfb8a40ddf63c8f89a59f",
                "started_at": 1572358081796
              }
            ]
          }
        }
      },
      {
        "request": {
          "url": "/v1/algorithms/acunniffe/abc/builds/268039aa-8d4c-4b9a-ad89-9e219ed9f07d",
          "method": "GET",
          "headers": {
            "host": "algorithmia.com",
            "connection": "keep-alive",
            "pragma": "no-cache",
            "cache-control": "no-cache",
            "accept": "application/json, text/plain, */*",
            "dnt": "1",
            "x-xsrf-token": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "cors",
            "referer": "https://algorithmia.com/algorithms/acunniffe/abc/builds",
            "accept-encoding": "gzip, deflate, br",
            "accept-language": "en-US,en;q=0.9",
            "cookie": "ajs_group_id=null; ajs_anonymous_id=%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22; _ga=GA1.2.1872580011.1571235636; _fbp=fb.1.1571235636317.604574724; intercom-id-c9fj6354=01941621-342b-4320-ad75-53826b5a002c; hubspotutk=105fad8a9b12bfed67330a0dbfe12c61; _gid=GA1.2.1843278152.1572282100; __zlcmid=uzie5dAUbB300Y; __hstc=69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3; __hssrc=1; fs_intercom=4655074328608768:4513847218700288; XSRF-TOKEN=0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da; referrer=www.google.com; landing_page=https://algorithmia.com/; signup_session=true; ajs_user_id=%22acunniffe%22; fs_uid=rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636; new-algo-language=scala; _gat=1; __hssc=69686351.6.1572357353053; intercom-session-c9fj6354=RzJVV0NsOVQwMHIvcVR3OXVOZENmc1pWbWhMZ09zczVSbHRlRXhMMDJ3dnJQV3dnRkVJTDZTQndRQUlQcFNxZi0teWJ1VmhEd0h1M0w5b20xeFV1TkU5dz09--1aff24c8ed30f3dc8ed16e2203be5cd7657d8711; ALGO_SESSION=598b64e2eb0dd79194b871163c635bddcffd47cb-last-access=2019-10-29T14%3A08%3A08.225Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "cookies": {
            "ajs_group_id": "null",
            "ajs_anonymous_id": "%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22",
            "_ga": "GA1.2.1872580011.1571235636",
            "_fbp": "fb.1.1571235636317.604574724",
            "intercom-id-c9fj6354": "01941621-342b-4320-ad75-53826b5a002c",
            "hubspotutk": "105fad8a9b12bfed67330a0dbfe12c61",
            "_gid": "GA1.2.1843278152.1572282100",
            "__zlcmid": "uzie5dAUbB300Y",
            "__hstc": "69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3",
            "__hssrc": "1",
            "fs_intercom": "4655074328608768:4513847218700288",
            "XSRF-TOKEN": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "referrer": "www.google.com",
            "landing_page": "https://algorithmia.com/",
            "signup_session": "true",
            "ajs_user_id": "%22acunniffe%22",
            "fs_uid": "rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636",
            "new-algo-language": "scala",
            "_gat": "1",
            "__hssc": "69686351.6.1572357353053",
            "intercom-session-c9fj6354": "RzJVV0NsOVQwMHIvcVR3OXVOZENmc1pWbWhMZ09zczVSbHRlRXhMMDJ3dnJQV3dnRkVJTDZTQndRQUlQcFNxZi0teWJ1VmhEd0h1M0w5b20xeFV1TkU5dz09--1aff24c8ed30f3dc8ed16e2203be5cd7657d8711",
            "ALGO_SESSION": "598b64e2eb0dd79194b871163c635bddcffd47cb-last-access=2019-10-29T14%3A08%3A08.225Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "queryParameters": {}
        },
        "response": {
          "statusCode": 200,
          "headers": {
            "content-encoding": "gzip",
            "content-type": "application/json; charset=utf-8",
            "date": "Tue, 29 Oct 2019 14:08:08 GMT",
            "set-cookie": "ALGO_SESSION=99e20c36616a8359dde411281e3fbb028d8d9d9b-last-access=2019-10-29T14%3A08%3A08.270Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3; Max-Age=86400; Expires=Wed, 30 Oct 2019 14:08:08 GMT; Path=/; Domain=algorithmia.com; Secure; HTTPOnly",
            "strict-transport-security": "max-age=86400; includeSubDomains",
            "vary": "Accept-Encoding",
            "x-content-type-options": "nosniff",
            "x-frame-options": "DENY",
            "content-length": "144",
            "connection": "keep-alive"
          },
          "body": {
            "build_id": "268039aa-8d4c-4b9a-ad89-9e219ed9f07d",
            "status": "in-progress",
            "commit_sha": "0826d84478e5d7e4409dfb8a40ddf63c8f89a59f",
            "started_at": 1572358081796
          }
        }
      },
      {
        "request": {
          "url": "/v1/algorithms/acunniffe/abc/builds/268039aa-8d4c-4b9a-ad89-9e219ed9f07d",
          "method": "GET",
          "headers": {
            "host": "algorithmia.com",
            "connection": "keep-alive",
            "pragma": "no-cache",
            "cache-control": "no-cache",
            "accept": "application/json, text/plain, */*",
            "dnt": "1",
            "x-xsrf-token": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "cors",
            "referer": "https://algorithmia.com/algorithms/acunniffe/abc/builds",
            "accept-encoding": "gzip, deflate, br",
            "accept-language": "en-US,en;q=0.9",
            "cookie": "ajs_group_id=null; ajs_anonymous_id=%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22; _ga=GA1.2.1872580011.1571235636; _fbp=fb.1.1571235636317.604574724; intercom-id-c9fj6354=01941621-342b-4320-ad75-53826b5a002c; hubspotutk=105fad8a9b12bfed67330a0dbfe12c61; _gid=GA1.2.1843278152.1572282100; __zlcmid=uzie5dAUbB300Y; __hstc=69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3; __hssrc=1; fs_intercom=4655074328608768:4513847218700288; XSRF-TOKEN=0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da; referrer=www.google.com; landing_page=https://algorithmia.com/; signup_session=true; ajs_user_id=%22acunniffe%22; fs_uid=rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636; new-algo-language=scala; _gat=1; __hssc=69686351.6.1572357353053; intercom-session-c9fj6354=RzJVV0NsOVQwMHIvcVR3OXVOZENmc1pWbWhMZ09zczVSbHRlRXhMMDJ3dnJQV3dnRkVJTDZTQndRQUlQcFNxZi0teWJ1VmhEd0h1M0w5b20xeFV1TkU5dz09--1aff24c8ed30f3dc8ed16e2203be5cd7657d8711; ALGO_SESSION=99e20c36616a8359dde411281e3fbb028d8d9d9b-last-access=2019-10-29T14%3A08%3A08.270Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "cookies": {
            "ajs_group_id": "null",
            "ajs_anonymous_id": "%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22",
            "_ga": "GA1.2.1872580011.1571235636",
            "_fbp": "fb.1.1571235636317.604574724",
            "intercom-id-c9fj6354": "01941621-342b-4320-ad75-53826b5a002c",
            "hubspotutk": "105fad8a9b12bfed67330a0dbfe12c61",
            "_gid": "GA1.2.1843278152.1572282100",
            "__zlcmid": "uzie5dAUbB300Y",
            "__hstc": "69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3",
            "__hssrc": "1",
            "fs_intercom": "4655074328608768:4513847218700288",
            "XSRF-TOKEN": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "referrer": "www.google.com",
            "landing_page": "https://algorithmia.com/",
            "signup_session": "true",
            "ajs_user_id": "%22acunniffe%22",
            "fs_uid": "rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636",
            "new-algo-language": "scala",
            "_gat": "1",
            "__hssc": "69686351.6.1572357353053",
            "intercom-session-c9fj6354": "RzJVV0NsOVQwMHIvcVR3OXVOZENmc1pWbWhMZ09zczVSbHRlRXhMMDJ3dnJQV3dnRkVJTDZTQndRQUlQcFNxZi0teWJ1VmhEd0h1M0w5b20xeFV1TkU5dz09--1aff24c8ed30f3dc8ed16e2203be5cd7657d8711",
            "ALGO_SESSION": "99e20c36616a8359dde411281e3fbb028d8d9d9b-last-access=2019-10-29T14%3A08%3A08.270Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "queryParameters": {}
        },
        "response": {
          "statusCode": 200,
          "headers": {
            "content-encoding": "gzip",
            "content-type": "application/json; charset=utf-8",
            "date": "Tue, 29 Oct 2019 14:08:09 GMT",
            "set-cookie": "ALGO_SESSION=b92c4c1cfd247b9b8d3084a2db229a40f9186cd1-last-access=2019-10-29T14%3A08%3A09.305Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3; Max-Age=86400; Expires=Wed, 30 Oct 2019 14:08:09 GMT; Path=/; Domain=algorithmia.com; Secure; HTTPOnly",
            "strict-transport-security": "max-age=86400; includeSubDomains",
            "vary": "Accept-Encoding",
            "x-content-type-options": "nosniff",
            "x-frame-options": "DENY",
            "content-length": "144",
            "connection": "keep-alive"
          },
          "body": {
            "build_id": "268039aa-8d4c-4b9a-ad89-9e219ed9f07d",
            "status": "in-progress",
            "commit_sha": "0826d84478e5d7e4409dfb8a40ddf63c8f89a59f",
            "started_at": 1572358081796
          }
        }
      },
      {
        "request": {
          "url": "/v1/algorithms/acunniffe/abc/builds/268039aa-8d4c-4b9a-ad89-9e219ed9f07d",
          "method": "GET",
          "headers": {
            "host": "algorithmia.com",
            "connection": "keep-alive",
            "pragma": "no-cache",
            "cache-control": "no-cache",
            "accept": "application/json, text/plain, */*",
            "dnt": "1",
            "x-xsrf-token": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "cors",
            "referer": "https://algorithmia.com/algorithms/acunniffe/abc/builds",
            "accept-encoding": "gzip, deflate, br",
            "accept-language": "en-US,en;q=0.9",
            "cookie": "ajs_group_id=null; ajs_anonymous_id=%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22; _ga=GA1.2.1872580011.1571235636; _fbp=fb.1.1571235636317.604574724; intercom-id-c9fj6354=01941621-342b-4320-ad75-53826b5a002c; hubspotutk=105fad8a9b12bfed67330a0dbfe12c61; _gid=GA1.2.1843278152.1572282100; __zlcmid=uzie5dAUbB300Y; __hstc=69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3; __hssrc=1; fs_intercom=4655074328608768:4513847218700288; XSRF-TOKEN=0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da; referrer=www.google.com; landing_page=https://algorithmia.com/; signup_session=true; ajs_user_id=%22acunniffe%22; fs_uid=rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636; new-algo-language=scala; _gat=1; __hssc=69686351.6.1572357353053; intercom-session-c9fj6354=RzJVV0NsOVQwMHIvcVR3OXVOZENmc1pWbWhMZ09zczVSbHRlRXhMMDJ3dnJQV3dnRkVJTDZTQndRQUlQcFNxZi0teWJ1VmhEd0h1M0w5b20xeFV1TkU5dz09--1aff24c8ed30f3dc8ed16e2203be5cd7657d8711; ALGO_SESSION=b92c4c1cfd247b9b8d3084a2db229a40f9186cd1-last-access=2019-10-29T14%3A08%3A09.305Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "cookies": {
            "ajs_group_id": "null",
            "ajs_anonymous_id": "%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22",
            "_ga": "GA1.2.1872580011.1571235636",
            "_fbp": "fb.1.1571235636317.604574724",
            "intercom-id-c9fj6354": "01941621-342b-4320-ad75-53826b5a002c",
            "hubspotutk": "105fad8a9b12bfed67330a0dbfe12c61",
            "_gid": "GA1.2.1843278152.1572282100",
            "__zlcmid": "uzie5dAUbB300Y",
            "__hstc": "69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3",
            "__hssrc": "1",
            "fs_intercom": "4655074328608768:4513847218700288",
            "XSRF-TOKEN": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "referrer": "www.google.com",
            "landing_page": "https://algorithmia.com/",
            "signup_session": "true",
            "ajs_user_id": "%22acunniffe%22",
            "fs_uid": "rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636",
            "new-algo-language": "scala",
            "_gat": "1",
            "__hssc": "69686351.6.1572357353053",
            "intercom-session-c9fj6354": "RzJVV0NsOVQwMHIvcVR3OXVOZENmc1pWbWhMZ09zczVSbHRlRXhMMDJ3dnJQV3dnRkVJTDZTQndRQUlQcFNxZi0teWJ1VmhEd0h1M0w5b20xeFV1TkU5dz09--1aff24c8ed30f3dc8ed16e2203be5cd7657d8711",
            "ALGO_SESSION": "b92c4c1cfd247b9b8d3084a2db229a40f9186cd1-last-access=2019-10-29T14%3A08%3A09.305Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "queryParameters": {}
        },
        "response": {
          "statusCode": 200,
          "headers": {
            "content-encoding": "gzip",
            "content-type": "application/json; charset=utf-8",
            "date": "Tue, 29 Oct 2019 14:08:10 GMT",
            "set-cookie": "ALGO_SESSION=7a242aa75bc760208f4d3d0975d28c3dcfb594fa-last-access=2019-10-29T14%3A08%3A10.344Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3; Max-Age=86400; Expires=Wed, 30 Oct 2019 14:08:10 GMT; Path=/; Domain=algorithmia.com; Secure; HTTPOnly",
            "strict-transport-security": "max-age=86400; includeSubDomains",
            "vary": "Accept-Encoding",
            "x-content-type-options": "nosniff",
            "x-frame-options": "DENY",
            "content-length": "144",
            "connection": "keep-alive"
          },
          "body": {
            "build_id": "268039aa-8d4c-4b9a-ad89-9e219ed9f07d",
            "status": "in-progress",
            "commit_sha": "0826d84478e5d7e4409dfb8a40ddf63c8f89a59f",
            "started_at": 1572358081796
          }
        }
      },
      {
        "request": {
          "url": "/v1/algorithms/acunniffe/abc/builds/268039aa-8d4c-4b9a-ad89-9e219ed9f07d",
          "method": "GET",
          "headers": {
            "host": "algorithmia.com",
            "connection": "keep-alive",
            "pragma": "no-cache",
            "cache-control": "no-cache",
            "accept": "application/json, text/plain, */*",
            "dnt": "1",
            "x-xsrf-token": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "cors",
            "referer": "https://algorithmia.com/algorithms/acunniffe/abc/builds",
            "accept-encoding": "gzip, deflate, br",
            "accept-language": "en-US,en;q=0.9",
            "cookie": "ajs_group_id=null; ajs_anonymous_id=%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22; _ga=GA1.2.1872580011.1571235636; _fbp=fb.1.1571235636317.604574724; intercom-id-c9fj6354=01941621-342b-4320-ad75-53826b5a002c; hubspotutk=105fad8a9b12bfed67330a0dbfe12c61; _gid=GA1.2.1843278152.1572282100; __zlcmid=uzie5dAUbB300Y; __hstc=69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3; __hssrc=1; fs_intercom=4655074328608768:4513847218700288; XSRF-TOKEN=0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da; referrer=www.google.com; landing_page=https://algorithmia.com/; signup_session=true; ajs_user_id=%22acunniffe%22; fs_uid=rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636; new-algo-language=scala; _gat=1; __hssc=69686351.6.1572357353053; intercom-session-c9fj6354=RzJVV0NsOVQwMHIvcVR3OXVOZENmc1pWbWhMZ09zczVSbHRlRXhMMDJ3dnJQV3dnRkVJTDZTQndRQUlQcFNxZi0teWJ1VmhEd0h1M0w5b20xeFV1TkU5dz09--1aff24c8ed30f3dc8ed16e2203be5cd7657d8711; ALGO_SESSION=7a242aa75bc760208f4d3d0975d28c3dcfb594fa-last-access=2019-10-29T14%3A08%3A10.344Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "cookies": {
            "ajs_group_id": "null",
            "ajs_anonymous_id": "%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22",
            "_ga": "GA1.2.1872580011.1571235636",
            "_fbp": "fb.1.1571235636317.604574724",
            "intercom-id-c9fj6354": "01941621-342b-4320-ad75-53826b5a002c",
            "hubspotutk": "105fad8a9b12bfed67330a0dbfe12c61",
            "_gid": "GA1.2.1843278152.1572282100",
            "__zlcmid": "uzie5dAUbB300Y",
            "__hstc": "69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3",
            "__hssrc": "1",
            "fs_intercom": "4655074328608768:4513847218700288",
            "XSRF-TOKEN": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "referrer": "www.google.com",
            "landing_page": "https://algorithmia.com/",
            "signup_session": "true",
            "ajs_user_id": "%22acunniffe%22",
            "fs_uid": "rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636",
            "new-algo-language": "scala",
            "_gat": "1",
            "__hssc": "69686351.6.1572357353053",
            "intercom-session-c9fj6354": "RzJVV0NsOVQwMHIvcVR3OXVOZENmc1pWbWhMZ09zczVSbHRlRXhMMDJ3dnJQV3dnRkVJTDZTQndRQUlQcFNxZi0teWJ1VmhEd0h1M0w5b20xeFV1TkU5dz09--1aff24c8ed30f3dc8ed16e2203be5cd7657d8711",
            "ALGO_SESSION": "7a242aa75bc760208f4d3d0975d28c3dcfb594fa-last-access=2019-10-29T14%3A08%3A10.344Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "queryParameters": {}
        },
        "response": {
          "statusCode": 200,
          "headers": {
            "content-encoding": "gzip",
            "content-type": "application/json; charset=utf-8",
            "date": "Tue, 29 Oct 2019 14:08:11 GMT",
            "set-cookie": "ALGO_SESSION=e270ca279ef181eff7e7301cb1e1295a868c6b6e-last-access=2019-10-29T14%3A08%3A11.379Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3; Max-Age=86400; Expires=Wed, 30 Oct 2019 14:08:11 GMT; Path=/; Domain=algorithmia.com; Secure; HTTPOnly",
            "strict-transport-security": "max-age=86400; includeSubDomains",
            "vary": "Accept-Encoding",
            "x-content-type-options": "nosniff",
            "x-frame-options": "DENY",
            "content-length": "144",
            "connection": "keep-alive"
          },
          "body": {
            "build_id": "268039aa-8d4c-4b9a-ad89-9e219ed9f07d",
            "status": "in-progress",
            "commit_sha": "0826d84478e5d7e4409dfb8a40ddf63c8f89a59f",
            "started_at": 1572358081796
          }
        }
      },
      {
        "request": {
          "url": "/v1/algorithms/acunniffe/abc/builds/268039aa-8d4c-4b9a-ad89-9e219ed9f07d",
          "method": "GET",
          "headers": {
            "host": "algorithmia.com",
            "connection": "keep-alive",
            "pragma": "no-cache",
            "cache-control": "no-cache",
            "accept": "application/json, text/plain, */*",
            "dnt": "1",
            "x-xsrf-token": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "cors",
            "referer": "https://algorithmia.com/algorithms/acunniffe/abc/builds",
            "accept-encoding": "gzip, deflate, br",
            "accept-language": "en-US,en;q=0.9",
            "cookie": "ajs_group_id=null; ajs_anonymous_id=%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22; _ga=GA1.2.1872580011.1571235636; _fbp=fb.1.1571235636317.604574724; intercom-id-c9fj6354=01941621-342b-4320-ad75-53826b5a002c; hubspotutk=105fad8a9b12bfed67330a0dbfe12c61; _gid=GA1.2.1843278152.1572282100; __zlcmid=uzie5dAUbB300Y; __hstc=69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3; __hssrc=1; fs_intercom=4655074328608768:4513847218700288; XSRF-TOKEN=0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da; referrer=www.google.com; landing_page=https://algorithmia.com/; signup_session=true; ajs_user_id=%22acunniffe%22; fs_uid=rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636; new-algo-language=scala; _gat=1; __hssc=69686351.6.1572357353053; intercom-session-c9fj6354=RzJVV0NsOVQwMHIvcVR3OXVOZENmc1pWbWhMZ09zczVSbHRlRXhMMDJ3dnJQV3dnRkVJTDZTQndRQUlQcFNxZi0teWJ1VmhEd0h1M0w5b20xeFV1TkU5dz09--1aff24c8ed30f3dc8ed16e2203be5cd7657d8711; ALGO_SESSION=e270ca279ef181eff7e7301cb1e1295a868c6b6e-last-access=2019-10-29T14%3A08%3A11.379Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "cookies": {
            "ajs_group_id": "null",
            "ajs_anonymous_id": "%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22",
            "_ga": "GA1.2.1872580011.1571235636",
            "_fbp": "fb.1.1571235636317.604574724",
            "intercom-id-c9fj6354": "01941621-342b-4320-ad75-53826b5a002c",
            "hubspotutk": "105fad8a9b12bfed67330a0dbfe12c61",
            "_gid": "GA1.2.1843278152.1572282100",
            "__zlcmid": "uzie5dAUbB300Y",
            "__hstc": "69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3",
            "__hssrc": "1",
            "fs_intercom": "4655074328608768:4513847218700288",
            "XSRF-TOKEN": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "referrer": "www.google.com",
            "landing_page": "https://algorithmia.com/",
            "signup_session": "true",
            "ajs_user_id": "%22acunniffe%22",
            "fs_uid": "rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636",
            "new-algo-language": "scala",
            "_gat": "1",
            "__hssc": "69686351.6.1572357353053",
            "intercom-session-c9fj6354": "RzJVV0NsOVQwMHIvcVR3OXVOZENmc1pWbWhMZ09zczVSbHRlRXhMMDJ3dnJQV3dnRkVJTDZTQndRQUlQcFNxZi0teWJ1VmhEd0h1M0w5b20xeFV1TkU5dz09--1aff24c8ed30f3dc8ed16e2203be5cd7657d8711",
            "ALGO_SESSION": "e270ca279ef181eff7e7301cb1e1295a868c6b6e-last-access=2019-10-29T14%3A08%3A11.379Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "queryParameters": {}
        },
        "response": {
          "statusCode": 200,
          "headers": {
            "content-encoding": "gzip",
            "content-type": "application/json; charset=utf-8",
            "date": "Tue, 29 Oct 2019 14:08:12 GMT",
            "set-cookie": "ALGO_SESSION=e3b0563087bcb11385ab919c7f707d25f55c68ae-last-access=2019-10-29T14%3A08%3A12.412Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3; Max-Age=86400; Expires=Wed, 30 Oct 2019 14:08:12 GMT; Path=/; Domain=algorithmia.com; Secure; HTTPOnly",
            "strict-transport-security": "max-age=86400; includeSubDomains",
            "vary": "Accept-Encoding",
            "x-content-type-options": "nosniff",
            "x-frame-options": "DENY",
            "content-length": "144",
            "connection": "keep-alive"
          },
          "body": {
            "build_id": "268039aa-8d4c-4b9a-ad89-9e219ed9f07d",
            "status": "in-progress",
            "commit_sha": "0826d84478e5d7e4409dfb8a40ddf63c8f89a59f",
            "started_at": 1572358081796
          }
        }
      },
      {
        "request": {
          "url": "/v1/algorithms/acunniffe/abc/builds/268039aa-8d4c-4b9a-ad89-9e219ed9f07d",
          "method": "GET",
          "headers": {
            "host": "algorithmia.com",
            "connection": "keep-alive",
            "pragma": "no-cache",
            "cache-control": "no-cache",
            "accept": "application/json, text/plain, */*",
            "dnt": "1",
            "x-xsrf-token": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "cors",
            "referer": "https://algorithmia.com/algorithms/acunniffe/abc/builds",
            "accept-encoding": "gzip, deflate, br",
            "accept-language": "en-US,en;q=0.9",
            "cookie": "ajs_group_id=null; ajs_anonymous_id=%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22; _ga=GA1.2.1872580011.1571235636; _fbp=fb.1.1571235636317.604574724; intercom-id-c9fj6354=01941621-342b-4320-ad75-53826b5a002c; hubspotutk=105fad8a9b12bfed67330a0dbfe12c61; _gid=GA1.2.1843278152.1572282100; __zlcmid=uzie5dAUbB300Y; __hstc=69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3; __hssrc=1; fs_intercom=4655074328608768:4513847218700288; XSRF-TOKEN=0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da; referrer=www.google.com; landing_page=https://algorithmia.com/; signup_session=true; ajs_user_id=%22acunniffe%22; fs_uid=rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636; new-algo-language=scala; _gat=1; __hssc=69686351.6.1572357353053; intercom-session-c9fj6354=RzJVV0NsOVQwMHIvcVR3OXVOZENmc1pWbWhMZ09zczVSbHRlRXhMMDJ3dnJQV3dnRkVJTDZTQndRQUlQcFNxZi0teWJ1VmhEd0h1M0w5b20xeFV1TkU5dz09--1aff24c8ed30f3dc8ed16e2203be5cd7657d8711; ALGO_SESSION=e3b0563087bcb11385ab919c7f707d25f55c68ae-last-access=2019-10-29T14%3A08%3A12.412Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "cookies": {
            "ajs_group_id": "null",
            "ajs_anonymous_id": "%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22",
            "_ga": "GA1.2.1872580011.1571235636",
            "_fbp": "fb.1.1571235636317.604574724",
            "intercom-id-c9fj6354": "01941621-342b-4320-ad75-53826b5a002c",
            "hubspotutk": "105fad8a9b12bfed67330a0dbfe12c61",
            "_gid": "GA1.2.1843278152.1572282100",
            "__zlcmid": "uzie5dAUbB300Y",
            "__hstc": "69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3",
            "__hssrc": "1",
            "fs_intercom": "4655074328608768:4513847218700288",
            "XSRF-TOKEN": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "referrer": "www.google.com",
            "landing_page": "https://algorithmia.com/",
            "signup_session": "true",
            "ajs_user_id": "%22acunniffe%22",
            "fs_uid": "rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636",
            "new-algo-language": "scala",
            "_gat": "1",
            "__hssc": "69686351.6.1572357353053",
            "intercom-session-c9fj6354": "RzJVV0NsOVQwMHIvcVR3OXVOZENmc1pWbWhMZ09zczVSbHRlRXhMMDJ3dnJQV3dnRkVJTDZTQndRQUlQcFNxZi0teWJ1VmhEd0h1M0w5b20xeFV1TkU5dz09--1aff24c8ed30f3dc8ed16e2203be5cd7657d8711",
            "ALGO_SESSION": "e3b0563087bcb11385ab919c7f707d25f55c68ae-last-access=2019-10-29T14%3A08%3A12.412Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "queryParameters": {}
        },
        "response": {
          "statusCode": 200,
          "headers": {
            "content-encoding": "gzip",
            "content-type": "application/json; charset=utf-8",
            "date": "Tue, 29 Oct 2019 14:08:13 GMT",
            "set-cookie": "ALGO_SESSION=317d93be119d03f0ba9708d6b9763dac3f338e92-last-access=2019-10-29T14%3A08%3A13.444Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3; Max-Age=86400; Expires=Wed, 30 Oct 2019 14:08:13 GMT; Path=/; Domain=algorithmia.com; Secure; HTTPOnly",
            "strict-transport-security": "max-age=86400; includeSubDomains",
            "vary": "Accept-Encoding",
            "x-content-type-options": "nosniff",
            "x-frame-options": "DENY",
            "content-length": "144",
            "connection": "keep-alive"
          },
          "body": {
            "build_id": "268039aa-8d4c-4b9a-ad89-9e219ed9f07d",
            "status": "in-progress",
            "commit_sha": "0826d84478e5d7e4409dfb8a40ddf63c8f89a59f",
            "started_at": 1572358081796
          }
        }
      },
      {
        "request": {
          "url": "/v1/algorithms/acunniffe/abc/builds/268039aa-8d4c-4b9a-ad89-9e219ed9f07d",
          "method": "GET",
          "headers": {
            "host": "algorithmia.com",
            "connection": "keep-alive",
            "pragma": "no-cache",
            "cache-control": "no-cache",
            "accept": "application/json, text/plain, */*",
            "dnt": "1",
            "x-xsrf-token": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "cors",
            "referer": "https://algorithmia.com/algorithms/acunniffe/abc/builds",
            "accept-encoding": "gzip, deflate, br",
            "accept-language": "en-US,en;q=0.9",
            "cookie": "ajs_group_id=null; ajs_anonymous_id=%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22; _ga=GA1.2.1872580011.1571235636; _fbp=fb.1.1571235636317.604574724; intercom-id-c9fj6354=01941621-342b-4320-ad75-53826b5a002c; hubspotutk=105fad8a9b12bfed67330a0dbfe12c61; _gid=GA1.2.1843278152.1572282100; __zlcmid=uzie5dAUbB300Y; __hstc=69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3; __hssrc=1; fs_intercom=4655074328608768:4513847218700288; XSRF-TOKEN=0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da; referrer=www.google.com; landing_page=https://algorithmia.com/; signup_session=true; ajs_user_id=%22acunniffe%22; fs_uid=rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636; new-algo-language=scala; _gat=1; __hssc=69686351.6.1572357353053; intercom-session-c9fj6354=RzJVV0NsOVQwMHIvcVR3OXVOZENmc1pWbWhMZ09zczVSbHRlRXhMMDJ3dnJQV3dnRkVJTDZTQndRQUlQcFNxZi0teWJ1VmhEd0h1M0w5b20xeFV1TkU5dz09--1aff24c8ed30f3dc8ed16e2203be5cd7657d8711; ALGO_SESSION=317d93be119d03f0ba9708d6b9763dac3f338e92-last-access=2019-10-29T14%3A08%3A13.444Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "cookies": {
            "ajs_group_id": "null",
            "ajs_anonymous_id": "%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22",
            "_ga": "GA1.2.1872580011.1571235636",
            "_fbp": "fb.1.1571235636317.604574724",
            "intercom-id-c9fj6354": "01941621-342b-4320-ad75-53826b5a002c",
            "hubspotutk": "105fad8a9b12bfed67330a0dbfe12c61",
            "_gid": "GA1.2.1843278152.1572282100",
            "__zlcmid": "uzie5dAUbB300Y",
            "__hstc": "69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3",
            "__hssrc": "1",
            "fs_intercom": "4655074328608768:4513847218700288",
            "XSRF-TOKEN": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "referrer": "www.google.com",
            "landing_page": "https://algorithmia.com/",
            "signup_session": "true",
            "ajs_user_id": "%22acunniffe%22",
            "fs_uid": "rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636",
            "new-algo-language": "scala",
            "_gat": "1",
            "__hssc": "69686351.6.1572357353053",
            "intercom-session-c9fj6354": "RzJVV0NsOVQwMHIvcVR3OXVOZENmc1pWbWhMZ09zczVSbHRlRXhMMDJ3dnJQV3dnRkVJTDZTQndRQUlQcFNxZi0teWJ1VmhEd0h1M0w5b20xeFV1TkU5dz09--1aff24c8ed30f3dc8ed16e2203be5cd7657d8711",
            "ALGO_SESSION": "317d93be119d03f0ba9708d6b9763dac3f338e92-last-access=2019-10-29T14%3A08%3A13.444Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "queryParameters": {}
        },
        "response": {
          "statusCode": 200,
          "headers": {
            "content-encoding": "gzip",
            "content-type": "application/json; charset=utf-8",
            "date": "Tue, 29 Oct 2019 14:08:14 GMT",
            "set-cookie": "ALGO_SESSION=1a836adec34a069e1d2b1cc9192e5f9b777ece08-last-access=2019-10-29T14%3A08%3A14.475Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3; Max-Age=86400; Expires=Wed, 30 Oct 2019 14:08:14 GMT; Path=/; Domain=algorithmia.com; Secure; HTTPOnly",
            "strict-transport-security": "max-age=86400; includeSubDomains",
            "vary": "Accept-Encoding",
            "x-content-type-options": "nosniff",
            "x-frame-options": "DENY",
            "content-length": "144",
            "connection": "keep-alive"
          },
          "body": {
            "build_id": "268039aa-8d4c-4b9a-ad89-9e219ed9f07d",
            "status": "in-progress",
            "commit_sha": "0826d84478e5d7e4409dfb8a40ddf63c8f89a59f",
            "started_at": 1572358081796
          }
        }
      },
      {
        "request": {
          "url": "/v1/algorithms/acunniffe/abc/builds/268039aa-8d4c-4b9a-ad89-9e219ed9f07d",
          "method": "GET",
          "headers": {
            "host": "algorithmia.com",
            "connection": "keep-alive",
            "pragma": "no-cache",
            "cache-control": "no-cache",
            "accept": "application/json, text/plain, */*",
            "dnt": "1",
            "x-xsrf-token": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "cors",
            "referer": "https://algorithmia.com/algorithms/acunniffe/abc/builds",
            "accept-encoding": "gzip, deflate, br",
            "accept-language": "en-US,en;q=0.9",
            "cookie": "ajs_group_id=null; ajs_anonymous_id=%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22; _ga=GA1.2.1872580011.1571235636; _fbp=fb.1.1571235636317.604574724; intercom-id-c9fj6354=01941621-342b-4320-ad75-53826b5a002c; hubspotutk=105fad8a9b12bfed67330a0dbfe12c61; _gid=GA1.2.1843278152.1572282100; __zlcmid=uzie5dAUbB300Y; __hstc=69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3; __hssrc=1; fs_intercom=4655074328608768:4513847218700288; XSRF-TOKEN=0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da; referrer=www.google.com; landing_page=https://algorithmia.com/; signup_session=true; ajs_user_id=%22acunniffe%22; fs_uid=rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636; new-algo-language=scala; _gat=1; __hssc=69686351.6.1572357353053; intercom-session-c9fj6354=RzJVV0NsOVQwMHIvcVR3OXVOZENmc1pWbWhMZ09zczVSbHRlRXhMMDJ3dnJQV3dnRkVJTDZTQndRQUlQcFNxZi0teWJ1VmhEd0h1M0w5b20xeFV1TkU5dz09--1aff24c8ed30f3dc8ed16e2203be5cd7657d8711; ALGO_SESSION=1a836adec34a069e1d2b1cc9192e5f9b777ece08-last-access=2019-10-29T14%3A08%3A14.475Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "cookies": {
            "ajs_group_id": "null",
            "ajs_anonymous_id": "%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22",
            "_ga": "GA1.2.1872580011.1571235636",
            "_fbp": "fb.1.1571235636317.604574724",
            "intercom-id-c9fj6354": "01941621-342b-4320-ad75-53826b5a002c",
            "hubspotutk": "105fad8a9b12bfed67330a0dbfe12c61",
            "_gid": "GA1.2.1843278152.1572282100",
            "__zlcmid": "uzie5dAUbB300Y",
            "__hstc": "69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3",
            "__hssrc": "1",
            "fs_intercom": "4655074328608768:4513847218700288",
            "XSRF-TOKEN": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "referrer": "www.google.com",
            "landing_page": "https://algorithmia.com/",
            "signup_session": "true",
            "ajs_user_id": "%22acunniffe%22",
            "fs_uid": "rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636",
            "new-algo-language": "scala",
            "_gat": "1",
            "__hssc": "69686351.6.1572357353053",
            "intercom-session-c9fj6354": "RzJVV0NsOVQwMHIvcVR3OXVOZENmc1pWbWhMZ09zczVSbHRlRXhMMDJ3dnJQV3dnRkVJTDZTQndRQUlQcFNxZi0teWJ1VmhEd0h1M0w5b20xeFV1TkU5dz09--1aff24c8ed30f3dc8ed16e2203be5cd7657d8711",
            "ALGO_SESSION": "1a836adec34a069e1d2b1cc9192e5f9b777ece08-last-access=2019-10-29T14%3A08%3A14.475Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "queryParameters": {}
        },
        "response": {
          "statusCode": 200,
          "headers": {
            "content-encoding": "gzip",
            "content-type": "application/json; charset=utf-8",
            "date": "Tue, 29 Oct 2019 14:08:15 GMT",
            "set-cookie": "ALGO_SESSION=f44b34e34068efae0b8efea1f8001976e6381c1d-last-access=2019-10-29T14%3A08%3A15.505Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3; Max-Age=86400; Expires=Wed, 30 Oct 2019 14:08:15 GMT; Path=/; Domain=algorithmia.com; Secure; HTTPOnly",
            "strict-transport-security": "max-age=86400; includeSubDomains",
            "vary": "Accept-Encoding",
            "x-content-type-options": "nosniff",
            "x-frame-options": "DENY",
            "content-length": "144",
            "connection": "keep-alive"
          },
          "body": {
            "build_id": "268039aa-8d4c-4b9a-ad89-9e219ed9f07d",
            "status": "in-progress",
            "commit_sha": "0826d84478e5d7e4409dfb8a40ddf63c8f89a59f",
            "started_at": 1572358081796
          }
        }
      },
      {
        "request": {
          "url": "/v1/algorithms/acunniffe/abc/builds/268039aa-8d4c-4b9a-ad89-9e219ed9f07d",
          "method": "GET",
          "headers": {
            "host": "algorithmia.com",
            "connection": "keep-alive",
            "pragma": "no-cache",
            "cache-control": "no-cache",
            "accept": "application/json, text/plain, */*",
            "dnt": "1",
            "x-xsrf-token": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "cors",
            "referer": "https://algorithmia.com/algorithms/acunniffe/abc/builds",
            "accept-encoding": "gzip, deflate, br",
            "accept-language": "en-US,en;q=0.9",
            "cookie": "ajs_group_id=null; ajs_anonymous_id=%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22; _ga=GA1.2.1872580011.1571235636; _fbp=fb.1.1571235636317.604574724; intercom-id-c9fj6354=01941621-342b-4320-ad75-53826b5a002c; hubspotutk=105fad8a9b12bfed67330a0dbfe12c61; _gid=GA1.2.1843278152.1572282100; __zlcmid=uzie5dAUbB300Y; __hstc=69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3; __hssrc=1; fs_intercom=4655074328608768:4513847218700288; XSRF-TOKEN=0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da; referrer=www.google.com; landing_page=https://algorithmia.com/; signup_session=true; ajs_user_id=%22acunniffe%22; fs_uid=rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636; new-algo-language=scala; _gat=1; __hssc=69686351.6.1572357353053; intercom-session-c9fj6354=RzJVV0NsOVQwMHIvcVR3OXVOZENmc1pWbWhMZ09zczVSbHRlRXhMMDJ3dnJQV3dnRkVJTDZTQndRQUlQcFNxZi0teWJ1VmhEd0h1M0w5b20xeFV1TkU5dz09--1aff24c8ed30f3dc8ed16e2203be5cd7657d8711; ALGO_SESSION=f44b34e34068efae0b8efea1f8001976e6381c1d-last-access=2019-10-29T14%3A08%3A15.505Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "cookies": {
            "ajs_group_id": "null",
            "ajs_anonymous_id": "%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22",
            "_ga": "GA1.2.1872580011.1571235636",
            "_fbp": "fb.1.1571235636317.604574724",
            "intercom-id-c9fj6354": "01941621-342b-4320-ad75-53826b5a002c",
            "hubspotutk": "105fad8a9b12bfed67330a0dbfe12c61",
            "_gid": "GA1.2.1843278152.1572282100",
            "__zlcmid": "uzie5dAUbB300Y",
            "__hstc": "69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3",
            "__hssrc": "1",
            "fs_intercom": "4655074328608768:4513847218700288",
            "XSRF-TOKEN": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "referrer": "www.google.com",
            "landing_page": "https://algorithmia.com/",
            "signup_session": "true",
            "ajs_user_id": "%22acunniffe%22",
            "fs_uid": "rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636",
            "new-algo-language": "scala",
            "_gat": "1",
            "__hssc": "69686351.6.1572357353053",
            "intercom-session-c9fj6354": "RzJVV0NsOVQwMHIvcVR3OXVOZENmc1pWbWhMZ09zczVSbHRlRXhMMDJ3dnJQV3dnRkVJTDZTQndRQUlQcFNxZi0teWJ1VmhEd0h1M0w5b20xeFV1TkU5dz09--1aff24c8ed30f3dc8ed16e2203be5cd7657d8711",
            "ALGO_SESSION": "f44b34e34068efae0b8efea1f8001976e6381c1d-last-access=2019-10-29T14%3A08%3A15.505Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "queryParameters": {}
        },
        "response": {
          "statusCode": 200,
          "headers": {
            "content-encoding": "gzip",
            "content-type": "application/json; charset=utf-8",
            "date": "Tue, 29 Oct 2019 14:08:16 GMT",
            "set-cookie": "ALGO_SESSION=06ca21d76eea0decec624ec1f4ac144df3d8fc9a-last-access=2019-10-29T14%3A08%3A16.544Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3; Max-Age=86400; Expires=Wed, 30 Oct 2019 14:08:16 GMT; Path=/; Domain=algorithmia.com; Secure; HTTPOnly",
            "strict-transport-security": "max-age=86400; includeSubDomains",
            "vary": "Accept-Encoding",
            "x-content-type-options": "nosniff",
            "x-frame-options": "DENY",
            "content-length": "144",
            "connection": "keep-alive"
          },
          "body": {
            "build_id": "268039aa-8d4c-4b9a-ad89-9e219ed9f07d",
            "status": "in-progress",
            "commit_sha": "0826d84478e5d7e4409dfb8a40ddf63c8f89a59f",
            "started_at": 1572358081796
          }
        }
      },
      {
        "request": {
          "url": "/v1/algorithms/acunniffe/abc/builds/268039aa-8d4c-4b9a-ad89-9e219ed9f07d",
          "method": "GET",
          "headers": {
            "host": "algorithmia.com",
            "connection": "keep-alive",
            "pragma": "no-cache",
            "cache-control": "no-cache",
            "accept": "application/json, text/plain, */*",
            "dnt": "1",
            "x-xsrf-token": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "cors",
            "referer": "https://algorithmia.com/algorithms/acunniffe/abc/builds/268039aa-8d4c-4b9a-ad89-9e219ed9f07d",
            "accept-encoding": "gzip, deflate, br",
            "accept-language": "en-US,en;q=0.9",
            "cookie": "ajs_group_id=null; ajs_anonymous_id=%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22; _ga=GA1.2.1872580011.1571235636; _fbp=fb.1.1571235636317.604574724; intercom-id-c9fj6354=01941621-342b-4320-ad75-53826b5a002c; hubspotutk=105fad8a9b12bfed67330a0dbfe12c61; _gid=GA1.2.1843278152.1572282100; __zlcmid=uzie5dAUbB300Y; __hstc=69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3; __hssrc=1; fs_intercom=4655074328608768:4513847218700288; XSRF-TOKEN=0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da; referrer=www.google.com; landing_page=https://algorithmia.com/; signup_session=true; ajs_user_id=%22acunniffe%22; fs_uid=rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636; new-algo-language=scala; _gat=1; __hssc=69686351.6.1572357353053; intercom-session-c9fj6354=RzJVV0NsOVQwMHIvcVR3OXVOZENmc1pWbWhMZ09zczVSbHRlRXhMMDJ3dnJQV3dnRkVJTDZTQndRQUlQcFNxZi0teWJ1VmhEd0h1M0w5b20xeFV1TkU5dz09--1aff24c8ed30f3dc8ed16e2203be5cd7657d8711; ALGO_SESSION=06ca21d76eea0decec624ec1f4ac144df3d8fc9a-last-access=2019-10-29T14%3A08%3A16.544Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "cookies": {
            "ajs_group_id": "null",
            "ajs_anonymous_id": "%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22",
            "_ga": "GA1.2.1872580011.1571235636",
            "_fbp": "fb.1.1571235636317.604574724",
            "intercom-id-c9fj6354": "01941621-342b-4320-ad75-53826b5a002c",
            "hubspotutk": "105fad8a9b12bfed67330a0dbfe12c61",
            "_gid": "GA1.2.1843278152.1572282100",
            "__zlcmid": "uzie5dAUbB300Y",
            "__hstc": "69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3",
            "__hssrc": "1",
            "fs_intercom": "4655074328608768:4513847218700288",
            "XSRF-TOKEN": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "referrer": "www.google.com",
            "landing_page": "https://algorithmia.com/",
            "signup_session": "true",
            "ajs_user_id": "%22acunniffe%22",
            "fs_uid": "rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636",
            "new-algo-language": "scala",
            "_gat": "1",
            "__hssc": "69686351.6.1572357353053",
            "intercom-session-c9fj6354": "RzJVV0NsOVQwMHIvcVR3OXVOZENmc1pWbWhMZ09zczVSbHRlRXhMMDJ3dnJQV3dnRkVJTDZTQndRQUlQcFNxZi0teWJ1VmhEd0h1M0w5b20xeFV1TkU5dz09--1aff24c8ed30f3dc8ed16e2203be5cd7657d8711",
            "ALGO_SESSION": "06ca21d76eea0decec624ec1f4ac144df3d8fc9a-last-access=2019-10-29T14%3A08%3A16.544Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "queryParameters": {}
        },
        "response": {
          "statusCode": 200,
          "headers": {
            "content-encoding": "gzip",
            "content-type": "application/json; charset=utf-8",
            "date": "Tue, 29 Oct 2019 14:08:16 GMT",
            "set-cookie": "ALGO_SESSION=648ffcfcbe61a0780bac760308b6ae6dce371001-last-access=2019-10-29T14%3A08%3A16.986Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3; Max-Age=86400; Expires=Wed, 30 Oct 2019 14:08:16 GMT; Path=/; Domain=algorithmia.com; Secure; HTTPOnly",
            "strict-transport-security": "max-age=86400; includeSubDomains",
            "vary": "Accept-Encoding",
            "x-content-type-options": "nosniff",
            "x-frame-options": "DENY",
            "content-length": "144",
            "connection": "keep-alive"
          },
          "body": {
            "build_id": "268039aa-8d4c-4b9a-ad89-9e219ed9f07d",
            "status": "in-progress",
            "commit_sha": "0826d84478e5d7e4409dfb8a40ddf63c8f89a59f",
            "started_at": 1572358081796
          }
        }
      },
      {
        "request": {
          "url": "/v1/algorithms/acunniffe/abc/builds/268039aa-8d4c-4b9a-ad89-9e219ed9f07d",
          "method": "GET",
          "headers": {
            "host": "algorithmia.com",
            "connection": "keep-alive",
            "pragma": "no-cache",
            "cache-control": "no-cache",
            "accept": "application/json, text/plain, */*",
            "dnt": "1",
            "x-xsrf-token": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "cors",
            "referer": "https://algorithmia.com/algorithms/acunniffe/abc/builds/268039aa-8d4c-4b9a-ad89-9e219ed9f07d",
            "accept-encoding": "gzip, deflate, br",
            "accept-language": "en-US,en;q=0.9",
            "cookie": "ajs_group_id=null; ajs_anonymous_id=%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22; _ga=GA1.2.1872580011.1571235636; _fbp=fb.1.1571235636317.604574724; intercom-id-c9fj6354=01941621-342b-4320-ad75-53826b5a002c; hubspotutk=105fad8a9b12bfed67330a0dbfe12c61; _gid=GA1.2.1843278152.1572282100; __zlcmid=uzie5dAUbB300Y; __hstc=69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3; __hssrc=1; fs_intercom=4655074328608768:4513847218700288; XSRF-TOKEN=0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da; referrer=www.google.com; landing_page=https://algorithmia.com/; signup_session=true; ajs_user_id=%22acunniffe%22; fs_uid=rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636; new-algo-language=scala; _gat=1; __hssc=69686351.6.1572357353053; intercom-session-c9fj6354=RzJVV0NsOVQwMHIvcVR3OXVOZENmc1pWbWhMZ09zczVSbHRlRXhMMDJ3dnJQV3dnRkVJTDZTQndRQUlQcFNxZi0teWJ1VmhEd0h1M0w5b20xeFV1TkU5dz09--1aff24c8ed30f3dc8ed16e2203be5cd7657d8711; ALGO_SESSION=648ffcfcbe61a0780bac760308b6ae6dce371001-last-access=2019-10-29T14%3A08%3A16.986Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "cookies": {
            "ajs_group_id": "null",
            "ajs_anonymous_id": "%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22",
            "_ga": "GA1.2.1872580011.1571235636",
            "_fbp": "fb.1.1571235636317.604574724",
            "intercom-id-c9fj6354": "01941621-342b-4320-ad75-53826b5a002c",
            "hubspotutk": "105fad8a9b12bfed67330a0dbfe12c61",
            "_gid": "GA1.2.1843278152.1572282100",
            "__zlcmid": "uzie5dAUbB300Y",
            "__hstc": "69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3",
            "__hssrc": "1",
            "fs_intercom": "4655074328608768:4513847218700288",
            "XSRF-TOKEN": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "referrer": "www.google.com",
            "landing_page": "https://algorithmia.com/",
            "signup_session": "true",
            "ajs_user_id": "%22acunniffe%22",
            "fs_uid": "rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636",
            "new-algo-language": "scala",
            "_gat": "1",
            "__hssc": "69686351.6.1572357353053",
            "intercom-session-c9fj6354": "RzJVV0NsOVQwMHIvcVR3OXVOZENmc1pWbWhMZ09zczVSbHRlRXhMMDJ3dnJQV3dnRkVJTDZTQndRQUlQcFNxZi0teWJ1VmhEd0h1M0w5b20xeFV1TkU5dz09--1aff24c8ed30f3dc8ed16e2203be5cd7657d8711",
            "ALGO_SESSION": "648ffcfcbe61a0780bac760308b6ae6dce371001-last-access=2019-10-29T14%3A08%3A16.986Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "queryParameters": {}
        },
        "response": {
          "statusCode": 200,
          "headers": {
            "content-encoding": "gzip",
            "content-type": "application/json; charset=utf-8",
            "date": "Tue, 29 Oct 2019 14:08:17 GMT",
            "set-cookie": "ALGO_SESSION=075308ffb22aaf86c91a41d3dedaf0e29bb36a58-last-access=2019-10-29T14%3A08%3A17.573Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3; Max-Age=86400; Expires=Wed, 30 Oct 2019 14:08:17 GMT; Path=/; Domain=algorithmia.com; Secure; HTTPOnly",
            "strict-transport-security": "max-age=86400; includeSubDomains",
            "vary": "Accept-Encoding",
            "x-content-type-options": "nosniff",
            "x-frame-options": "DENY",
            "content-length": "144",
            "connection": "keep-alive"
          },
          "body": {
            "build_id": "268039aa-8d4c-4b9a-ad89-9e219ed9f07d",
            "status": "in-progress",
            "commit_sha": "0826d84478e5d7e4409dfb8a40ddf63c8f89a59f",
            "started_at": 1572358081796
          }
        }
      },
      {
        "request": {
          "url": "/v1/algorithms/acunniffe/abc/builds/268039aa-8d4c-4b9a-ad89-9e219ed9f07d",
          "method": "GET",
          "headers": {
            "host": "algorithmia.com",
            "connection": "keep-alive",
            "pragma": "no-cache",
            "cache-control": "no-cache",
            "accept": "application/json, text/plain, */*",
            "dnt": "1",
            "x-xsrf-token": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "cors",
            "referer": "https://algorithmia.com/algorithms/acunniffe/abc/builds/268039aa-8d4c-4b9a-ad89-9e219ed9f07d",
            "accept-encoding": "gzip, deflate, br",
            "accept-language": "en-US,en;q=0.9",
            "cookie": "ajs_group_id=null; ajs_anonymous_id=%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22; _ga=GA1.2.1872580011.1571235636; _fbp=fb.1.1571235636317.604574724; intercom-id-c9fj6354=01941621-342b-4320-ad75-53826b5a002c; hubspotutk=105fad8a9b12bfed67330a0dbfe12c61; _gid=GA1.2.1843278152.1572282100; __zlcmid=uzie5dAUbB300Y; __hstc=69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3; __hssrc=1; fs_intercom=4655074328608768:4513847218700288; XSRF-TOKEN=0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da; referrer=www.google.com; landing_page=https://algorithmia.com/; signup_session=true; ajs_user_id=%22acunniffe%22; fs_uid=rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636; new-algo-language=scala; _gat=1; __hssc=69686351.6.1572357353053; intercom-session-c9fj6354=RzJVV0NsOVQwMHIvcVR3OXVOZENmc1pWbWhMZ09zczVSbHRlRXhMMDJ3dnJQV3dnRkVJTDZTQndRQUlQcFNxZi0teWJ1VmhEd0h1M0w5b20xeFV1TkU5dz09--1aff24c8ed30f3dc8ed16e2203be5cd7657d8711; ALGO_SESSION=075308ffb22aaf86c91a41d3dedaf0e29bb36a58-last-access=2019-10-29T14%3A08%3A17.573Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "cookies": {
            "ajs_group_id": "null",
            "ajs_anonymous_id": "%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22",
            "_ga": "GA1.2.1872580011.1571235636",
            "_fbp": "fb.1.1571235636317.604574724",
            "intercom-id-c9fj6354": "01941621-342b-4320-ad75-53826b5a002c",
            "hubspotutk": "105fad8a9b12bfed67330a0dbfe12c61",
            "_gid": "GA1.2.1843278152.1572282100",
            "__zlcmid": "uzie5dAUbB300Y",
            "__hstc": "69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3",
            "__hssrc": "1",
            "fs_intercom": "4655074328608768:4513847218700288",
            "XSRF-TOKEN": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "referrer": "www.google.com",
            "landing_page": "https://algorithmia.com/",
            "signup_session": "true",
            "ajs_user_id": "%22acunniffe%22",
            "fs_uid": "rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636",
            "new-algo-language": "scala",
            "_gat": "1",
            "__hssc": "69686351.6.1572357353053",
            "intercom-session-c9fj6354": "RzJVV0NsOVQwMHIvcVR3OXVOZENmc1pWbWhMZ09zczVSbHRlRXhMMDJ3dnJQV3dnRkVJTDZTQndRQUlQcFNxZi0teWJ1VmhEd0h1M0w5b20xeFV1TkU5dz09--1aff24c8ed30f3dc8ed16e2203be5cd7657d8711",
            "ALGO_SESSION": "075308ffb22aaf86c91a41d3dedaf0e29bb36a58-last-access=2019-10-29T14%3A08%3A17.573Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "queryParameters": {}
        },
        "response": {
          "statusCode": 200,
          "headers": {
            "content-encoding": "gzip",
            "content-type": "application/json; charset=utf-8",
            "date": "Tue, 29 Oct 2019 14:08:18 GMT",
            "set-cookie": "ALGO_SESSION=4821a94dc41a47e781c1898877182b1d17f77323-last-access=2019-10-29T14%3A08%3A18.017Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3; Max-Age=86400; Expires=Wed, 30 Oct 2019 14:08:18 GMT; Path=/; Domain=algorithmia.com; Secure; HTTPOnly",
            "strict-transport-security": "max-age=86400; includeSubDomains",
            "vary": "Accept-Encoding",
            "x-content-type-options": "nosniff",
            "x-frame-options": "DENY",
            "content-length": "144",
            "connection": "keep-alive"
          },
          "body": {
            "build_id": "268039aa-8d4c-4b9a-ad89-9e219ed9f07d",
            "status": "in-progress",
            "commit_sha": "0826d84478e5d7e4409dfb8a40ddf63c8f89a59f",
            "started_at": 1572358081796
          }
        }
      },
      {
        "request": {
          "url": "/v1/algorithms/acunniffe/abc/builds/268039aa-8d4c-4b9a-ad89-9e219ed9f07d",
          "method": "GET",
          "headers": {
            "host": "algorithmia.com",
            "connection": "keep-alive",
            "pragma": "no-cache",
            "cache-control": "no-cache",
            "accept": "application/json, text/plain, */*",
            "dnt": "1",
            "x-xsrf-token": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "cors",
            "referer": "https://algorithmia.com/algorithms/acunniffe/abc/builds/268039aa-8d4c-4b9a-ad89-9e219ed9f07d",
            "accept-encoding": "gzip, deflate, br",
            "accept-language": "en-US,en;q=0.9",
            "cookie": "ajs_group_id=null; ajs_anonymous_id=%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22; _ga=GA1.2.1872580011.1571235636; _fbp=fb.1.1571235636317.604574724; intercom-id-c9fj6354=01941621-342b-4320-ad75-53826b5a002c; hubspotutk=105fad8a9b12bfed67330a0dbfe12c61; _gid=GA1.2.1843278152.1572282100; __zlcmid=uzie5dAUbB300Y; __hstc=69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3; __hssrc=1; fs_intercom=4655074328608768:4513847218700288; XSRF-TOKEN=0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da; referrer=www.google.com; landing_page=https://algorithmia.com/; signup_session=true; ajs_user_id=%22acunniffe%22; fs_uid=rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636; new-algo-language=scala; _gat=1; __hssc=69686351.6.1572357353053; intercom-session-c9fj6354=RzJVV0NsOVQwMHIvcVR3OXVOZENmc1pWbWhMZ09zczVSbHRlRXhMMDJ3dnJQV3dnRkVJTDZTQndRQUlQcFNxZi0teWJ1VmhEd0h1M0w5b20xeFV1TkU5dz09--1aff24c8ed30f3dc8ed16e2203be5cd7657d8711; ALGO_SESSION=4821a94dc41a47e781c1898877182b1d17f77323-last-access=2019-10-29T14%3A08%3A18.017Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "cookies": {
            "ajs_group_id": "null",
            "ajs_anonymous_id": "%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22",
            "_ga": "GA1.2.1872580011.1571235636",
            "_fbp": "fb.1.1571235636317.604574724",
            "intercom-id-c9fj6354": "01941621-342b-4320-ad75-53826b5a002c",
            "hubspotutk": "105fad8a9b12bfed67330a0dbfe12c61",
            "_gid": "GA1.2.1843278152.1572282100",
            "__zlcmid": "uzie5dAUbB300Y",
            "__hstc": "69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3",
            "__hssrc": "1",
            "fs_intercom": "4655074328608768:4513847218700288",
            "XSRF-TOKEN": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "referrer": "www.google.com",
            "landing_page": "https://algorithmia.com/",
            "signup_session": "true",
            "ajs_user_id": "%22acunniffe%22",
            "fs_uid": "rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636",
            "new-algo-language": "scala",
            "_gat": "1",
            "__hssc": "69686351.6.1572357353053",
            "intercom-session-c9fj6354": "RzJVV0NsOVQwMHIvcVR3OXVOZENmc1pWbWhMZ09zczVSbHRlRXhMMDJ3dnJQV3dnRkVJTDZTQndRQUlQcFNxZi0teWJ1VmhEd0h1M0w5b20xeFV1TkU5dz09--1aff24c8ed30f3dc8ed16e2203be5cd7657d8711",
            "ALGO_SESSION": "4821a94dc41a47e781c1898877182b1d17f77323-last-access=2019-10-29T14%3A08%3A18.017Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "queryParameters": {}
        },
        "response": {
          "statusCode": 200,
          "headers": {
            "content-encoding": "gzip",
            "content-type": "application/json; charset=utf-8",
            "date": "Tue, 29 Oct 2019 14:08:18 GMT",
            "set-cookie": "ALGO_SESSION=17ece75f9563cd67508aa939ee85af8501158b6b-last-access=2019-10-29T14%3A08%3A18.612Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3; Max-Age=86400; Expires=Wed, 30 Oct 2019 14:08:18 GMT; Path=/; Domain=algorithmia.com; Secure; HTTPOnly",
            "strict-transport-security": "max-age=86400; includeSubDomains",
            "vary": "Accept-Encoding",
            "x-content-type-options": "nosniff",
            "x-frame-options": "DENY",
            "content-length": "144",
            "connection": "keep-alive"
          },
          "body": {
            "build_id": "268039aa-8d4c-4b9a-ad89-9e219ed9f07d",
            "status": "in-progress",
            "commit_sha": "0826d84478e5d7e4409dfb8a40ddf63c8f89a59f",
            "started_at": 1572358081796
          }
        }
      },
      {
        "request": {
          "url": "/v1/algorithms/acunniffe/abc/builds/268039aa-8d4c-4b9a-ad89-9e219ed9f07d",
          "method": "GET",
          "headers": {
            "host": "algorithmia.com",
            "connection": "keep-alive",
            "pragma": "no-cache",
            "cache-control": "no-cache",
            "accept": "application/json, text/plain, */*",
            "dnt": "1",
            "x-xsrf-token": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "cors",
            "referer": "https://algorithmia.com/algorithms/acunniffe/abc/builds/268039aa-8d4c-4b9a-ad89-9e219ed9f07d",
            "accept-encoding": "gzip, deflate, br",
            "accept-language": "en-US,en;q=0.9",
            "cookie": "ajs_group_id=null; ajs_anonymous_id=%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22; _ga=GA1.2.1872580011.1571235636; _fbp=fb.1.1571235636317.604574724; intercom-id-c9fj6354=01941621-342b-4320-ad75-53826b5a002c; hubspotutk=105fad8a9b12bfed67330a0dbfe12c61; _gid=GA1.2.1843278152.1572282100; __zlcmid=uzie5dAUbB300Y; __hstc=69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3; __hssrc=1; fs_intercom=4655074328608768:4513847218700288; XSRF-TOKEN=0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da; referrer=www.google.com; landing_page=https://algorithmia.com/; signup_session=true; ajs_user_id=%22acunniffe%22; fs_uid=rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636; new-algo-language=scala; _gat=1; __hssc=69686351.6.1572357353053; intercom-session-c9fj6354=RzJVV0NsOVQwMHIvcVR3OXVOZENmc1pWbWhMZ09zczVSbHRlRXhMMDJ3dnJQV3dnRkVJTDZTQndRQUlQcFNxZi0teWJ1VmhEd0h1M0w5b20xeFV1TkU5dz09--1aff24c8ed30f3dc8ed16e2203be5cd7657d8711; ALGO_SESSION=17ece75f9563cd67508aa939ee85af8501158b6b-last-access=2019-10-29T14%3A08%3A18.612Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "cookies": {
            "ajs_group_id": "null",
            "ajs_anonymous_id": "%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22",
            "_ga": "GA1.2.1872580011.1571235636",
            "_fbp": "fb.1.1571235636317.604574724",
            "intercom-id-c9fj6354": "01941621-342b-4320-ad75-53826b5a002c",
            "hubspotutk": "105fad8a9b12bfed67330a0dbfe12c61",
            "_gid": "GA1.2.1843278152.1572282100",
            "__zlcmid": "uzie5dAUbB300Y",
            "__hstc": "69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3",
            "__hssrc": "1",
            "fs_intercom": "4655074328608768:4513847218700288",
            "XSRF-TOKEN": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "referrer": "www.google.com",
            "landing_page": "https://algorithmia.com/",
            "signup_session": "true",
            "ajs_user_id": "%22acunniffe%22",
            "fs_uid": "rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636",
            "new-algo-language": "scala",
            "_gat": "1",
            "__hssc": "69686351.6.1572357353053",
            "intercom-session-c9fj6354": "RzJVV0NsOVQwMHIvcVR3OXVOZENmc1pWbWhMZ09zczVSbHRlRXhMMDJ3dnJQV3dnRkVJTDZTQndRQUlQcFNxZi0teWJ1VmhEd0h1M0w5b20xeFV1TkU5dz09--1aff24c8ed30f3dc8ed16e2203be5cd7657d8711",
            "ALGO_SESSION": "17ece75f9563cd67508aa939ee85af8501158b6b-last-access=2019-10-29T14%3A08%3A18.612Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "queryParameters": {}
        },
        "response": {
          "statusCode": 200,
          "headers": {
            "content-encoding": "gzip",
            "content-type": "application/json; charset=utf-8",
            "date": "Tue, 29 Oct 2019 14:08:19 GMT",
            "set-cookie": "ALGO_SESSION=bc6a59c15ad0d0d9f1336459414df3a729e2095b-last-access=2019-10-29T14%3A08%3A19.050Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3; Max-Age=86400; Expires=Wed, 30 Oct 2019 14:08:19 GMT; Path=/; Domain=algorithmia.com; Secure; HTTPOnly",
            "strict-transport-security": "max-age=86400; includeSubDomains",
            "vary": "Accept-Encoding",
            "x-content-type-options": "nosniff",
            "x-frame-options": "DENY",
            "content-length": "144",
            "connection": "keep-alive"
          },
          "body": {
            "build_id": "268039aa-8d4c-4b9a-ad89-9e219ed9f07d",
            "status": "in-progress",
            "commit_sha": "0826d84478e5d7e4409dfb8a40ddf63c8f89a59f",
            "started_at": 1572358081796
          }
        }
      },
      {
        "request": {
          "url": "/v1/algorithms/acunniffe/abc/builds/268039aa-8d4c-4b9a-ad89-9e219ed9f07d",
          "method": "GET",
          "headers": {
            "host": "algorithmia.com",
            "connection": "keep-alive",
            "pragma": "no-cache",
            "cache-control": "no-cache",
            "accept": "application/json, text/plain, */*",
            "dnt": "1",
            "x-xsrf-token": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "cors",
            "referer": "https://algorithmia.com/algorithms/acunniffe/abc/builds/268039aa-8d4c-4b9a-ad89-9e219ed9f07d",
            "accept-encoding": "gzip, deflate, br",
            "accept-language": "en-US,en;q=0.9",
            "cookie": "ajs_group_id=null; ajs_anonymous_id=%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22; _ga=GA1.2.1872580011.1571235636; _fbp=fb.1.1571235636317.604574724; intercom-id-c9fj6354=01941621-342b-4320-ad75-53826b5a002c; hubspotutk=105fad8a9b12bfed67330a0dbfe12c61; _gid=GA1.2.1843278152.1572282100; __zlcmid=uzie5dAUbB300Y; __hstc=69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3; __hssrc=1; fs_intercom=4655074328608768:4513847218700288; XSRF-TOKEN=0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da; referrer=www.google.com; landing_page=https://algorithmia.com/; signup_session=true; ajs_user_id=%22acunniffe%22; fs_uid=rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636; new-algo-language=scala; _gat=1; __hssc=69686351.6.1572357353053; intercom-session-c9fj6354=RzJVV0NsOVQwMHIvcVR3OXVOZENmc1pWbWhMZ09zczVSbHRlRXhMMDJ3dnJQV3dnRkVJTDZTQndRQUlQcFNxZi0teWJ1VmhEd0h1M0w5b20xeFV1TkU5dz09--1aff24c8ed30f3dc8ed16e2203be5cd7657d8711; ALGO_SESSION=bc6a59c15ad0d0d9f1336459414df3a729e2095b-last-access=2019-10-29T14%3A08%3A19.050Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "cookies": {
            "ajs_group_id": "null",
            "ajs_anonymous_id": "%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22",
            "_ga": "GA1.2.1872580011.1571235636",
            "_fbp": "fb.1.1571235636317.604574724",
            "intercom-id-c9fj6354": "01941621-342b-4320-ad75-53826b5a002c",
            "hubspotutk": "105fad8a9b12bfed67330a0dbfe12c61",
            "_gid": "GA1.2.1843278152.1572282100",
            "__zlcmid": "uzie5dAUbB300Y",
            "__hstc": "69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3",
            "__hssrc": "1",
            "fs_intercom": "4655074328608768:4513847218700288",
            "XSRF-TOKEN": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "referrer": "www.google.com",
            "landing_page": "https://algorithmia.com/",
            "signup_session": "true",
            "ajs_user_id": "%22acunniffe%22",
            "fs_uid": "rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636",
            "new-algo-language": "scala",
            "_gat": "1",
            "__hssc": "69686351.6.1572357353053",
            "intercom-session-c9fj6354": "RzJVV0NsOVQwMHIvcVR3OXVOZENmc1pWbWhMZ09zczVSbHRlRXhMMDJ3dnJQV3dnRkVJTDZTQndRQUlQcFNxZi0teWJ1VmhEd0h1M0w5b20xeFV1TkU5dz09--1aff24c8ed30f3dc8ed16e2203be5cd7657d8711",
            "ALGO_SESSION": "bc6a59c15ad0d0d9f1336459414df3a729e2095b-last-access=2019-10-29T14%3A08%3A19.050Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "queryParameters": {}
        },
        "response": {
          "statusCode": 200,
          "headers": {
            "content-encoding": "gzip",
            "content-type": "application/json; charset=utf-8",
            "date": "Tue, 29 Oct 2019 14:08:19 GMT",
            "set-cookie": "ALGO_SESSION=466ecf646ccde01545f1db033334a89a66e8bc7e-last-access=2019-10-29T14%3A08%3A19.647Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3; Max-Age=86400; Expires=Wed, 30 Oct 2019 14:08:19 GMT; Path=/; Domain=algorithmia.com; Secure; HTTPOnly",
            "strict-transport-security": "max-age=86400; includeSubDomains",
            "vary": "Accept-Encoding",
            "x-content-type-options": "nosniff",
            "x-frame-options": "DENY",
            "content-length": "144",
            "connection": "keep-alive"
          },
          "body": {
            "build_id": "268039aa-8d4c-4b9a-ad89-9e219ed9f07d",
            "status": "in-progress",
            "commit_sha": "0826d84478e5d7e4409dfb8a40ddf63c8f89a59f",
            "started_at": 1572358081796
          }
        }
      },
      {
        "request": {
          "url": "/v1/algorithms/acunniffe/abc/builds/268039aa-8d4c-4b9a-ad89-9e219ed9f07d",
          "method": "GET",
          "headers": {
            "host": "algorithmia.com",
            "connection": "keep-alive",
            "pragma": "no-cache",
            "cache-control": "no-cache",
            "accept": "application/json, text/plain, */*",
            "dnt": "1",
            "x-xsrf-token": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "cors",
            "referer": "https://algorithmia.com/algorithms/acunniffe/abc/builds/268039aa-8d4c-4b9a-ad89-9e219ed9f07d",
            "accept-encoding": "gzip, deflate, br",
            "accept-language": "en-US,en;q=0.9",
            "cookie": "ajs_group_id=null; ajs_anonymous_id=%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22; _ga=GA1.2.1872580011.1571235636; _fbp=fb.1.1571235636317.604574724; intercom-id-c9fj6354=01941621-342b-4320-ad75-53826b5a002c; hubspotutk=105fad8a9b12bfed67330a0dbfe12c61; _gid=GA1.2.1843278152.1572282100; __zlcmid=uzie5dAUbB300Y; __hstc=69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3; __hssrc=1; fs_intercom=4655074328608768:4513847218700288; XSRF-TOKEN=0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da; referrer=www.google.com; landing_page=https://algorithmia.com/; signup_session=true; ajs_user_id=%22acunniffe%22; fs_uid=rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636; new-algo-language=scala; _gat=1; __hssc=69686351.6.1572357353053; intercom-session-c9fj6354=RzJVV0NsOVQwMHIvcVR3OXVOZENmc1pWbWhMZ09zczVSbHRlRXhMMDJ3dnJQV3dnRkVJTDZTQndRQUlQcFNxZi0teWJ1VmhEd0h1M0w5b20xeFV1TkU5dz09--1aff24c8ed30f3dc8ed16e2203be5cd7657d8711; ALGO_SESSION=466ecf646ccde01545f1db033334a89a66e8bc7e-last-access=2019-10-29T14%3A08%3A19.647Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "cookies": {
            "ajs_group_id": "null",
            "ajs_anonymous_id": "%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22",
            "_ga": "GA1.2.1872580011.1571235636",
            "_fbp": "fb.1.1571235636317.604574724",
            "intercom-id-c9fj6354": "01941621-342b-4320-ad75-53826b5a002c",
            "hubspotutk": "105fad8a9b12bfed67330a0dbfe12c61",
            "_gid": "GA1.2.1843278152.1572282100",
            "__zlcmid": "uzie5dAUbB300Y",
            "__hstc": "69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3",
            "__hssrc": "1",
            "fs_intercom": "4655074328608768:4513847218700288",
            "XSRF-TOKEN": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "referrer": "www.google.com",
            "landing_page": "https://algorithmia.com/",
            "signup_session": "true",
            "ajs_user_id": "%22acunniffe%22",
            "fs_uid": "rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636",
            "new-algo-language": "scala",
            "_gat": "1",
            "__hssc": "69686351.6.1572357353053",
            "intercom-session-c9fj6354": "RzJVV0NsOVQwMHIvcVR3OXVOZENmc1pWbWhMZ09zczVSbHRlRXhMMDJ3dnJQV3dnRkVJTDZTQndRQUlQcFNxZi0teWJ1VmhEd0h1M0w5b20xeFV1TkU5dz09--1aff24c8ed30f3dc8ed16e2203be5cd7657d8711",
            "ALGO_SESSION": "466ecf646ccde01545f1db033334a89a66e8bc7e-last-access=2019-10-29T14%3A08%3A19.647Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "queryParameters": {}
        },
        "response": {
          "statusCode": 200,
          "headers": {
            "content-encoding": "gzip",
            "content-type": "application/json; charset=utf-8",
            "date": "Tue, 29 Oct 2019 14:08:20 GMT",
            "set-cookie": "ALGO_SESSION=6620f95740f01c15d829b83c50b73ba86285d6a9-last-access=2019-10-29T14%3A08%3A20.090Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3; Max-Age=86400; Expires=Wed, 30 Oct 2019 14:08:20 GMT; Path=/; Domain=algorithmia.com; Secure; HTTPOnly",
            "strict-transport-security": "max-age=86400; includeSubDomains",
            "vary": "Accept-Encoding",
            "x-content-type-options": "nosniff",
            "x-frame-options": "DENY",
            "content-length": "144",
            "connection": "keep-alive"
          },
          "body": {
            "build_id": "268039aa-8d4c-4b9a-ad89-9e219ed9f07d",
            "status": "in-progress",
            "commit_sha": "0826d84478e5d7e4409dfb8a40ddf63c8f89a59f",
            "started_at": 1572358081796
          }
        }
      },
      {
        "request": {
          "url": "/v1/algorithms/acunniffe/abc/builds/268039aa-8d4c-4b9a-ad89-9e219ed9f07d",
          "method": "GET",
          "headers": {
            "host": "algorithmia.com",
            "connection": "keep-alive",
            "pragma": "no-cache",
            "cache-control": "no-cache",
            "accept": "application/json, text/plain, */*",
            "dnt": "1",
            "x-xsrf-token": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "cors",
            "referer": "https://algorithmia.com/algorithms/acunniffe/abc/builds/268039aa-8d4c-4b9a-ad89-9e219ed9f07d",
            "accept-encoding": "gzip, deflate, br",
            "accept-language": "en-US,en;q=0.9",
            "cookie": "ajs_group_id=null; ajs_anonymous_id=%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22; _ga=GA1.2.1872580011.1571235636; _fbp=fb.1.1571235636317.604574724; intercom-id-c9fj6354=01941621-342b-4320-ad75-53826b5a002c; hubspotutk=105fad8a9b12bfed67330a0dbfe12c61; _gid=GA1.2.1843278152.1572282100; __zlcmid=uzie5dAUbB300Y; __hstc=69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3; __hssrc=1; fs_intercom=4655074328608768:4513847218700288; XSRF-TOKEN=0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da; referrer=www.google.com; landing_page=https://algorithmia.com/; signup_session=true; ajs_user_id=%22acunniffe%22; fs_uid=rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636; new-algo-language=scala; _gat=1; __hssc=69686351.6.1572357353053; intercom-session-c9fj6354=RzJVV0NsOVQwMHIvcVR3OXVOZENmc1pWbWhMZ09zczVSbHRlRXhMMDJ3dnJQV3dnRkVJTDZTQndRQUlQcFNxZi0teWJ1VmhEd0h1M0w5b20xeFV1TkU5dz09--1aff24c8ed30f3dc8ed16e2203be5cd7657d8711; ALGO_SESSION=6620f95740f01c15d829b83c50b73ba86285d6a9-last-access=2019-10-29T14%3A08%3A20.090Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "cookies": {
            "ajs_group_id": "null",
            "ajs_anonymous_id": "%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22",
            "_ga": "GA1.2.1872580011.1571235636",
            "_fbp": "fb.1.1571235636317.604574724",
            "intercom-id-c9fj6354": "01941621-342b-4320-ad75-53826b5a002c",
            "hubspotutk": "105fad8a9b12bfed67330a0dbfe12c61",
            "_gid": "GA1.2.1843278152.1572282100",
            "__zlcmid": "uzie5dAUbB300Y",
            "__hstc": "69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3",
            "__hssrc": "1",
            "fs_intercom": "4655074328608768:4513847218700288",
            "XSRF-TOKEN": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "referrer": "www.google.com",
            "landing_page": "https://algorithmia.com/",
            "signup_session": "true",
            "ajs_user_id": "%22acunniffe%22",
            "fs_uid": "rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636",
            "new-algo-language": "scala",
            "_gat": "1",
            "__hssc": "69686351.6.1572357353053",
            "intercom-session-c9fj6354": "RzJVV0NsOVQwMHIvcVR3OXVOZENmc1pWbWhMZ09zczVSbHRlRXhMMDJ3dnJQV3dnRkVJTDZTQndRQUlQcFNxZi0teWJ1VmhEd0h1M0w5b20xeFV1TkU5dz09--1aff24c8ed30f3dc8ed16e2203be5cd7657d8711",
            "ALGO_SESSION": "6620f95740f01c15d829b83c50b73ba86285d6a9-last-access=2019-10-29T14%3A08%3A20.090Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "queryParameters": {}
        },
        "response": {
          "statusCode": 200,
          "headers": {
            "content-encoding": "gzip",
            "content-type": "application/json; charset=utf-8",
            "date": "Tue, 29 Oct 2019 14:08:20 GMT",
            "set-cookie": "ALGO_SESSION=eddc3a59e1a78af9bc3c9df5716975daba2db1dd-last-access=2019-10-29T14%3A08%3A20.684Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3; Max-Age=86400; Expires=Wed, 30 Oct 2019 14:08:20 GMT; Path=/; Domain=algorithmia.com; Secure; HTTPOnly",
            "strict-transport-security": "max-age=86400; includeSubDomains",
            "vary": "Accept-Encoding",
            "x-content-type-options": "nosniff",
            "x-frame-options": "DENY",
            "content-length": "144",
            "connection": "keep-alive"
          },
          "body": {
            "build_id": "268039aa-8d4c-4b9a-ad89-9e219ed9f07d",
            "status": "in-progress",
            "commit_sha": "0826d84478e5d7e4409dfb8a40ddf63c8f89a59f",
            "started_at": 1572358081796
          }
        }
      },
      {
        "request": {
          "url": "/v1/algorithms/acunniffe/abc/builds/268039aa-8d4c-4b9a-ad89-9e219ed9f07d",
          "method": "GET",
          "headers": {
            "host": "algorithmia.com",
            "connection": "keep-alive",
            "pragma": "no-cache",
            "cache-control": "no-cache",
            "accept": "application/json, text/plain, */*",
            "dnt": "1",
            "x-xsrf-token": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "cors",
            "referer": "https://algorithmia.com/algorithms/acunniffe/abc/builds/268039aa-8d4c-4b9a-ad89-9e219ed9f07d",
            "accept-encoding": "gzip, deflate, br",
            "accept-language": "en-US,en;q=0.9",
            "cookie": "ajs_group_id=null; ajs_anonymous_id=%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22; _ga=GA1.2.1872580011.1571235636; _fbp=fb.1.1571235636317.604574724; intercom-id-c9fj6354=01941621-342b-4320-ad75-53826b5a002c; hubspotutk=105fad8a9b12bfed67330a0dbfe12c61; _gid=GA1.2.1843278152.1572282100; __zlcmid=uzie5dAUbB300Y; __hstc=69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3; __hssrc=1; fs_intercom=4655074328608768:4513847218700288; XSRF-TOKEN=0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da; referrer=www.google.com; landing_page=https://algorithmia.com/; signup_session=true; ajs_user_id=%22acunniffe%22; fs_uid=rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636; new-algo-language=scala; _gat=1; __hssc=69686351.6.1572357353053; intercom-session-c9fj6354=RzJVV0NsOVQwMHIvcVR3OXVOZENmc1pWbWhMZ09zczVSbHRlRXhMMDJ3dnJQV3dnRkVJTDZTQndRQUlQcFNxZi0teWJ1VmhEd0h1M0w5b20xeFV1TkU5dz09--1aff24c8ed30f3dc8ed16e2203be5cd7657d8711; ALGO_SESSION=eddc3a59e1a78af9bc3c9df5716975daba2db1dd-last-access=2019-10-29T14%3A08%3A20.684Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "cookies": {
            "ajs_group_id": "null",
            "ajs_anonymous_id": "%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22",
            "_ga": "GA1.2.1872580011.1571235636",
            "_fbp": "fb.1.1571235636317.604574724",
            "intercom-id-c9fj6354": "01941621-342b-4320-ad75-53826b5a002c",
            "hubspotutk": "105fad8a9b12bfed67330a0dbfe12c61",
            "_gid": "GA1.2.1843278152.1572282100",
            "__zlcmid": "uzie5dAUbB300Y",
            "__hstc": "69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3",
            "__hssrc": "1",
            "fs_intercom": "4655074328608768:4513847218700288",
            "XSRF-TOKEN": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "referrer": "www.google.com",
            "landing_page": "https://algorithmia.com/",
            "signup_session": "true",
            "ajs_user_id": "%22acunniffe%22",
            "fs_uid": "rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636",
            "new-algo-language": "scala",
            "_gat": "1",
            "__hssc": "69686351.6.1572357353053",
            "intercom-session-c9fj6354": "RzJVV0NsOVQwMHIvcVR3OXVOZENmc1pWbWhMZ09zczVSbHRlRXhMMDJ3dnJQV3dnRkVJTDZTQndRQUlQcFNxZi0teWJ1VmhEd0h1M0w5b20xeFV1TkU5dz09--1aff24c8ed30f3dc8ed16e2203be5cd7657d8711",
            "ALGO_SESSION": "eddc3a59e1a78af9bc3c9df5716975daba2db1dd-last-access=2019-10-29T14%3A08%3A20.684Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "queryParameters": {}
        },
        "response": {
          "statusCode": 200,
          "headers": {
            "content-encoding": "gzip",
            "content-type": "application/json; charset=utf-8",
            "date": "Tue, 29 Oct 2019 14:08:21 GMT",
            "set-cookie": "ALGO_SESSION=a0e4121114afa70b9df80ebae2e5420d7e282e5f-last-access=2019-10-29T14%3A08%3A21.133Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3; Max-Age=86400; Expires=Wed, 30 Oct 2019 14:08:21 GMT; Path=/; Domain=algorithmia.com; Secure; HTTPOnly",
            "strict-transport-security": "max-age=86400; includeSubDomains",
            "vary": "Accept-Encoding",
            "x-content-type-options": "nosniff",
            "x-frame-options": "DENY",
            "content-length": "144",
            "connection": "keep-alive"
          },
          "body": {
            "build_id": "268039aa-8d4c-4b9a-ad89-9e219ed9f07d",
            "status": "in-progress",
            "commit_sha": "0826d84478e5d7e4409dfb8a40ddf63c8f89a59f",
            "started_at": 1572358081796
          }
        }
      },
      {
        "request": {
          "url": "/v1/algorithms/acunniffe/abc/builds/268039aa-8d4c-4b9a-ad89-9e219ed9f07d",
          "method": "GET",
          "headers": {
            "host": "algorithmia.com",
            "connection": "keep-alive",
            "pragma": "no-cache",
            "cache-control": "no-cache",
            "accept": "application/json, text/plain, */*",
            "dnt": "1",
            "x-xsrf-token": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "cors",
            "referer": "https://algorithmia.com/algorithms/acunniffe/abc/builds/268039aa-8d4c-4b9a-ad89-9e219ed9f07d",
            "accept-encoding": "gzip, deflate, br",
            "accept-language": "en-US,en;q=0.9",
            "cookie": "ajs_group_id=null; ajs_anonymous_id=%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22; _ga=GA1.2.1872580011.1571235636; _fbp=fb.1.1571235636317.604574724; intercom-id-c9fj6354=01941621-342b-4320-ad75-53826b5a002c; hubspotutk=105fad8a9b12bfed67330a0dbfe12c61; _gid=GA1.2.1843278152.1572282100; __zlcmid=uzie5dAUbB300Y; __hstc=69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3; __hssrc=1; fs_intercom=4655074328608768:4513847218700288; XSRF-TOKEN=0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da; referrer=www.google.com; landing_page=https://algorithmia.com/; signup_session=true; ajs_user_id=%22acunniffe%22; fs_uid=rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636; new-algo-language=scala; _gat=1; __hssc=69686351.6.1572357353053; intercom-session-c9fj6354=RzJVV0NsOVQwMHIvcVR3OXVOZENmc1pWbWhMZ09zczVSbHRlRXhMMDJ3dnJQV3dnRkVJTDZTQndRQUlQcFNxZi0teWJ1VmhEd0h1M0w5b20xeFV1TkU5dz09--1aff24c8ed30f3dc8ed16e2203be5cd7657d8711; ALGO_SESSION=a0e4121114afa70b9df80ebae2e5420d7e282e5f-last-access=2019-10-29T14%3A08%3A21.133Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "cookies": {
            "ajs_group_id": "null",
            "ajs_anonymous_id": "%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22",
            "_ga": "GA1.2.1872580011.1571235636",
            "_fbp": "fb.1.1571235636317.604574724",
            "intercom-id-c9fj6354": "01941621-342b-4320-ad75-53826b5a002c",
            "hubspotutk": "105fad8a9b12bfed67330a0dbfe12c61",
            "_gid": "GA1.2.1843278152.1572282100",
            "__zlcmid": "uzie5dAUbB300Y",
            "__hstc": "69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3",
            "__hssrc": "1",
            "fs_intercom": "4655074328608768:4513847218700288",
            "XSRF-TOKEN": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "referrer": "www.google.com",
            "landing_page": "https://algorithmia.com/",
            "signup_session": "true",
            "ajs_user_id": "%22acunniffe%22",
            "fs_uid": "rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636",
            "new-algo-language": "scala",
            "_gat": "1",
            "__hssc": "69686351.6.1572357353053",
            "intercom-session-c9fj6354": "RzJVV0NsOVQwMHIvcVR3OXVOZENmc1pWbWhMZ09zczVSbHRlRXhMMDJ3dnJQV3dnRkVJTDZTQndRQUlQcFNxZi0teWJ1VmhEd0h1M0w5b20xeFV1TkU5dz09--1aff24c8ed30f3dc8ed16e2203be5cd7657d8711",
            "ALGO_SESSION": "a0e4121114afa70b9df80ebae2e5420d7e282e5f-last-access=2019-10-29T14%3A08%3A21.133Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "queryParameters": {}
        },
        "response": {
          "statusCode": 200,
          "headers": {
            "content-encoding": "gzip",
            "content-type": "application/json; charset=utf-8",
            "date": "Tue, 29 Oct 2019 14:08:21 GMT",
            "set-cookie": "ALGO_SESSION=f2b8f57bb643e6fc06d93eaddb77954ecbcedb64-last-access=2019-10-29T14%3A08%3A21.724Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3; Max-Age=86400; Expires=Wed, 30 Oct 2019 14:08:21 GMT; Path=/; Domain=algorithmia.com; Secure; HTTPOnly",
            "strict-transport-security": "max-age=86400; includeSubDomains",
            "vary": "Accept-Encoding",
            "x-content-type-options": "nosniff",
            "x-frame-options": "DENY",
            "content-length": "144",
            "connection": "keep-alive"
          },
          "body": {
            "build_id": "268039aa-8d4c-4b9a-ad89-9e219ed9f07d",
            "status": "in-progress",
            "commit_sha": "0826d84478e5d7e4409dfb8a40ddf63c8f89a59f",
            "started_at": 1572358081796
          }
        }
      },
      {
        "request": {
          "url": "/v1/algorithms/acunniffe/abc/builds/268039aa-8d4c-4b9a-ad89-9e219ed9f07d",
          "method": "GET",
          "headers": {
            "host": "algorithmia.com",
            "connection": "keep-alive",
            "pragma": "no-cache",
            "cache-control": "no-cache",
            "accept": "application/json, text/plain, */*",
            "dnt": "1",
            "x-xsrf-token": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "cors",
            "referer": "https://algorithmia.com/algorithms/acunniffe/abc/builds/268039aa-8d4c-4b9a-ad89-9e219ed9f07d",
            "accept-encoding": "gzip, deflate, br",
            "accept-language": "en-US,en;q=0.9",
            "cookie": "ajs_group_id=null; ajs_anonymous_id=%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22; _ga=GA1.2.1872580011.1571235636; _fbp=fb.1.1571235636317.604574724; intercom-id-c9fj6354=01941621-342b-4320-ad75-53826b5a002c; hubspotutk=105fad8a9b12bfed67330a0dbfe12c61; _gid=GA1.2.1843278152.1572282100; __zlcmid=uzie5dAUbB300Y; __hstc=69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3; __hssrc=1; fs_intercom=4655074328608768:4513847218700288; XSRF-TOKEN=0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da; referrer=www.google.com; landing_page=https://algorithmia.com/; signup_session=true; ajs_user_id=%22acunniffe%22; fs_uid=rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636; new-algo-language=scala; _gat=1; __hssc=69686351.6.1572357353053; intercom-session-c9fj6354=RzJVV0NsOVQwMHIvcVR3OXVOZENmc1pWbWhMZ09zczVSbHRlRXhMMDJ3dnJQV3dnRkVJTDZTQndRQUlQcFNxZi0teWJ1VmhEd0h1M0w5b20xeFV1TkU5dz09--1aff24c8ed30f3dc8ed16e2203be5cd7657d8711; ALGO_SESSION=f2b8f57bb643e6fc06d93eaddb77954ecbcedb64-last-access=2019-10-29T14%3A08%3A21.724Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "cookies": {
            "ajs_group_id": "null",
            "ajs_anonymous_id": "%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22",
            "_ga": "GA1.2.1872580011.1571235636",
            "_fbp": "fb.1.1571235636317.604574724",
            "intercom-id-c9fj6354": "01941621-342b-4320-ad75-53826b5a002c",
            "hubspotutk": "105fad8a9b12bfed67330a0dbfe12c61",
            "_gid": "GA1.2.1843278152.1572282100",
            "__zlcmid": "uzie5dAUbB300Y",
            "__hstc": "69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3",
            "__hssrc": "1",
            "fs_intercom": "4655074328608768:4513847218700288",
            "XSRF-TOKEN": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "referrer": "www.google.com",
            "landing_page": "https://algorithmia.com/",
            "signup_session": "true",
            "ajs_user_id": "%22acunniffe%22",
            "fs_uid": "rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636",
            "new-algo-language": "scala",
            "_gat": "1",
            "__hssc": "69686351.6.1572357353053",
            "intercom-session-c9fj6354": "RzJVV0NsOVQwMHIvcVR3OXVOZENmc1pWbWhMZ09zczVSbHRlRXhMMDJ3dnJQV3dnRkVJTDZTQndRQUlQcFNxZi0teWJ1VmhEd0h1M0w5b20xeFV1TkU5dz09--1aff24c8ed30f3dc8ed16e2203be5cd7657d8711",
            "ALGO_SESSION": "f2b8f57bb643e6fc06d93eaddb77954ecbcedb64-last-access=2019-10-29T14%3A08%3A21.724Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "queryParameters": {}
        },
        "response": {
          "statusCode": 200,
          "headers": {
            "content-encoding": "gzip",
            "content-type": "application/json; charset=utf-8",
            "date": "Tue, 29 Oct 2019 14:08:22 GMT",
            "set-cookie": "ALGO_SESSION=c696c559c3473539249263fea8083b649c19cf4f-last-access=2019-10-29T14%3A08%3A22.171Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3; Max-Age=86400; Expires=Wed, 30 Oct 2019 14:08:22 GMT; Path=/; Domain=algorithmia.com; Secure; HTTPOnly",
            "strict-transport-security": "max-age=86400; includeSubDomains",
            "vary": "Accept-Encoding",
            "x-content-type-options": "nosniff",
            "x-frame-options": "DENY",
            "content-length": "144",
            "connection": "keep-alive"
          },
          "body": {
            "build_id": "268039aa-8d4c-4b9a-ad89-9e219ed9f07d",
            "status": "in-progress",
            "commit_sha": "0826d84478e5d7e4409dfb8a40ddf63c8f89a59f",
            "started_at": 1572358081796
          }
        }
      },
      {
        "request": {
          "url": "/v1/algorithms/acunniffe/abc/builds/268039aa-8d4c-4b9a-ad89-9e219ed9f07d",
          "method": "GET",
          "headers": {
            "host": "algorithmia.com",
            "connection": "keep-alive",
            "pragma": "no-cache",
            "cache-control": "no-cache",
            "accept": "application/json, text/plain, */*",
            "dnt": "1",
            "x-xsrf-token": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "cors",
            "referer": "https://algorithmia.com/algorithms/acunniffe/abc/builds/268039aa-8d4c-4b9a-ad89-9e219ed9f07d",
            "accept-encoding": "gzip, deflate, br",
            "accept-language": "en-US,en;q=0.9",
            "cookie": "ajs_group_id=null; ajs_anonymous_id=%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22; _ga=GA1.2.1872580011.1571235636; _fbp=fb.1.1571235636317.604574724; intercom-id-c9fj6354=01941621-342b-4320-ad75-53826b5a002c; hubspotutk=105fad8a9b12bfed67330a0dbfe12c61; _gid=GA1.2.1843278152.1572282100; __zlcmid=uzie5dAUbB300Y; __hstc=69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3; __hssrc=1; fs_intercom=4655074328608768:4513847218700288; XSRF-TOKEN=0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da; referrer=www.google.com; landing_page=https://algorithmia.com/; signup_session=true; ajs_user_id=%22acunniffe%22; fs_uid=rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636; new-algo-language=scala; _gat=1; __hssc=69686351.6.1572357353053; intercom-session-c9fj6354=RzJVV0NsOVQwMHIvcVR3OXVOZENmc1pWbWhMZ09zczVSbHRlRXhMMDJ3dnJQV3dnRkVJTDZTQndRQUlQcFNxZi0teWJ1VmhEd0h1M0w5b20xeFV1TkU5dz09--1aff24c8ed30f3dc8ed16e2203be5cd7657d8711; ALGO_SESSION=c696c559c3473539249263fea8083b649c19cf4f-last-access=2019-10-29T14%3A08%3A22.171Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "cookies": {
            "ajs_group_id": "null",
            "ajs_anonymous_id": "%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22",
            "_ga": "GA1.2.1872580011.1571235636",
            "_fbp": "fb.1.1571235636317.604574724",
            "intercom-id-c9fj6354": "01941621-342b-4320-ad75-53826b5a002c",
            "hubspotutk": "105fad8a9b12bfed67330a0dbfe12c61",
            "_gid": "GA1.2.1843278152.1572282100",
            "__zlcmid": "uzie5dAUbB300Y",
            "__hstc": "69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3",
            "__hssrc": "1",
            "fs_intercom": "4655074328608768:4513847218700288",
            "XSRF-TOKEN": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "referrer": "www.google.com",
            "landing_page": "https://algorithmia.com/",
            "signup_session": "true",
            "ajs_user_id": "%22acunniffe%22",
            "fs_uid": "rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636",
            "new-algo-language": "scala",
            "_gat": "1",
            "__hssc": "69686351.6.1572357353053",
            "intercom-session-c9fj6354": "RzJVV0NsOVQwMHIvcVR3OXVOZENmc1pWbWhMZ09zczVSbHRlRXhMMDJ3dnJQV3dnRkVJTDZTQndRQUlQcFNxZi0teWJ1VmhEd0h1M0w5b20xeFV1TkU5dz09--1aff24c8ed30f3dc8ed16e2203be5cd7657d8711",
            "ALGO_SESSION": "c696c559c3473539249263fea8083b649c19cf4f-last-access=2019-10-29T14%3A08%3A22.171Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "queryParameters": {}
        },
        "response": {
          "statusCode": 200,
          "headers": {
            "content-encoding": "gzip",
            "content-type": "application/json; charset=utf-8",
            "date": "Tue, 29 Oct 2019 14:08:22 GMT",
            "set-cookie": "ALGO_SESSION=795c716c6992df95df40046b337e17d2c36a5cda-last-access=2019-10-29T14%3A08%3A22.760Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3; Max-Age=86400; Expires=Wed, 30 Oct 2019 14:08:22 GMT; Path=/; Domain=algorithmia.com; Secure; HTTPOnly",
            "strict-transport-security": "max-age=86400; includeSubDomains",
            "vary": "Accept-Encoding",
            "x-content-type-options": "nosniff",
            "x-frame-options": "DENY",
            "content-length": "154",
            "connection": "keep-alive"
          },
          "body": {
            "build_id": "268039aa-8d4c-4b9a-ad89-9e219ed9f07d",
            "status": "succeeded",
            "commit_sha": "0826d84478e5d7e4409dfb8a40ddf63c8f89a59f",
            "started_at": 1572358081796,
            "finished_at": 1572358102435
          }
        }
      },
      {
        "request": {
          "url": "/webapi/algorithms/acunniffe/abc/versions/latest",
          "method": "GET",
          "headers": {
            "host": "algorithmia.com",
            "connection": "keep-alive",
            "pragma": "no-cache",
            "cache-control": "no-cache",
            "accept": "application/json, text/plain, */*",
            "dnt": "1",
            "x-xsrf-token": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "cors",
            "referer": "https://algorithmia.com/algorithms/acunniffe/abc/builds/268039aa-8d4c-4b9a-ad89-9e219ed9f07d",
            "accept-encoding": "gzip, deflate, br",
            "accept-language": "en-US,en;q=0.9",
            "cookie": "ajs_group_id=null; ajs_anonymous_id=%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22; _ga=GA1.2.1872580011.1571235636; _fbp=fb.1.1571235636317.604574724; intercom-id-c9fj6354=01941621-342b-4320-ad75-53826b5a002c; hubspotutk=105fad8a9b12bfed67330a0dbfe12c61; _gid=GA1.2.1843278152.1572282100; __zlcmid=uzie5dAUbB300Y; __hstc=69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3; __hssrc=1; fs_intercom=4655074328608768:4513847218700288; XSRF-TOKEN=0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da; referrer=www.google.com; landing_page=https://algorithmia.com/; signup_session=true; ajs_user_id=%22acunniffe%22; fs_uid=rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636; new-algo-language=scala; _gat=1; __hssc=69686351.6.1572357353053; intercom-session-c9fj6354=RzJVV0NsOVQwMHIvcVR3OXVOZENmc1pWbWhMZ09zczVSbHRlRXhMMDJ3dnJQV3dnRkVJTDZTQndRQUlQcFNxZi0teWJ1VmhEd0h1M0w5b20xeFV1TkU5dz09--1aff24c8ed30f3dc8ed16e2203be5cd7657d8711; ALGO_SESSION=795c716c6992df95df40046b337e17d2c36a5cda-last-access=2019-10-29T14%3A08%3A22.760Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "cookies": {
            "ajs_group_id": "null",
            "ajs_anonymous_id": "%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22",
            "_ga": "GA1.2.1872580011.1571235636",
            "_fbp": "fb.1.1571235636317.604574724",
            "intercom-id-c9fj6354": "01941621-342b-4320-ad75-53826b5a002c",
            "hubspotutk": "105fad8a9b12bfed67330a0dbfe12c61",
            "_gid": "GA1.2.1843278152.1572282100",
            "__zlcmid": "uzie5dAUbB300Y",
            "__hstc": "69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3",
            "__hssrc": "1",
            "fs_intercom": "4655074328608768:4513847218700288",
            "XSRF-TOKEN": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "referrer": "www.google.com",
            "landing_page": "https://algorithmia.com/",
            "signup_session": "true",
            "ajs_user_id": "%22acunniffe%22",
            "fs_uid": "rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636",
            "new-algo-language": "scala",
            "_gat": "1",
            "__hssc": "69686351.6.1572357353053",
            "intercom-session-c9fj6354": "RzJVV0NsOVQwMHIvcVR3OXVOZENmc1pWbWhMZ09zczVSbHRlRXhMMDJ3dnJQV3dnRkVJTDZTQndRQUlQcFNxZi0teWJ1VmhEd0h1M0w5b20xeFV1TkU5dz09--1aff24c8ed30f3dc8ed16e2203be5cd7657d8711",
            "ALGO_SESSION": "795c716c6992df95df40046b337e17d2c36a5cda-last-access=2019-10-29T14%3A08%3A22.760Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "queryParameters": {}
        },
        "response": {
          "statusCode": 200,
          "headers": {
            "content-encoding": "gzip",
            "content-type": "application/json; charset=utf-8",
            "date": "Tue, 29 Oct 2019 14:08:22 GMT",
            "set-cookie": "ALGO_SESSION=232b5c7211608b33595784c1552fba41f18cd25c-last-access=2019-10-29T14%3A08%3A22.805Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3; Max-Age=86400; Expires=Wed, 30 Oct 2019 14:08:22 GMT; Path=/; Domain=algorithmia.com; Secure; HTTPOnly",
            "strict-transport-security": "max-age=86400; includeSubDomains",
            "vary": "Accept-Encoding",
            "x-content-type-options": "nosniff",
            "x-frame-options": "DENY",
            "content-length": "43",
            "connection": "keep-alive"
          },
          "body": {
            "latest_version": null
          }
        }
      },
      {
        "request": {
          "url": "/v1/algorithms/acunniffe/abc",
          "method": "GET",
          "headers": {
            "host": "algorithmia.com",
            "connection": "keep-alive",
            "pragma": "no-cache",
            "cache-control": "no-cache",
            "accept": "application/json, text/plain, */*",
            "dnt": "1",
            "x-xsrf-token": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "cors",
            "referer": "https://algorithmia.com/algorithms/acunniffe/abc/builds/268039aa-8d4c-4b9a-ad89-9e219ed9f07d",
            "accept-encoding": "gzip, deflate, br",
            "accept-language": "en-US,en;q=0.9",
            "cookie": "ajs_group_id=null; ajs_anonymous_id=%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22; _ga=GA1.2.1872580011.1571235636; _fbp=fb.1.1571235636317.604574724; intercom-id-c9fj6354=01941621-342b-4320-ad75-53826b5a002c; hubspotutk=105fad8a9b12bfed67330a0dbfe12c61; _gid=GA1.2.1843278152.1572282100; __zlcmid=uzie5dAUbB300Y; __hstc=69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3; __hssrc=1; fs_intercom=4655074328608768:4513847218700288; XSRF-TOKEN=0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da; referrer=www.google.com; landing_page=https://algorithmia.com/; signup_session=true; ajs_user_id=%22acunniffe%22; fs_uid=rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636; new-algo-language=scala; _gat=1; __hssc=69686351.6.1572357353053; intercom-session-c9fj6354=RzJVV0NsOVQwMHIvcVR3OXVOZENmc1pWbWhMZ09zczVSbHRlRXhMMDJ3dnJQV3dnRkVJTDZTQndRQUlQcFNxZi0teWJ1VmhEd0h1M0w5b20xeFV1TkU5dz09--1aff24c8ed30f3dc8ed16e2203be5cd7657d8711; ALGO_SESSION=232b5c7211608b33595784c1552fba41f18cd25c-last-access=2019-10-29T14%3A08%3A22.805Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "cookies": {
            "ajs_group_id": "null",
            "ajs_anonymous_id": "%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22",
            "_ga": "GA1.2.1872580011.1571235636",
            "_fbp": "fb.1.1571235636317.604574724",
            "intercom-id-c9fj6354": "01941621-342b-4320-ad75-53826b5a002c",
            "hubspotutk": "105fad8a9b12bfed67330a0dbfe12c61",
            "_gid": "GA1.2.1843278152.1572282100",
            "__zlcmid": "uzie5dAUbB300Y",
            "__hstc": "69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3",
            "__hssrc": "1",
            "fs_intercom": "4655074328608768:4513847218700288",
            "XSRF-TOKEN": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "referrer": "www.google.com",
            "landing_page": "https://algorithmia.com/",
            "signup_session": "true",
            "ajs_user_id": "%22acunniffe%22",
            "fs_uid": "rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636",
            "new-algo-language": "scala",
            "_gat": "1",
            "__hssc": "69686351.6.1572357353053",
            "intercom-session-c9fj6354": "RzJVV0NsOVQwMHIvcVR3OXVOZENmc1pWbWhMZ09zczVSbHRlRXhMMDJ3dnJQV3dnRkVJTDZTQndRQUlQcFNxZi0teWJ1VmhEd0h1M0w5b20xeFV1TkU5dz09--1aff24c8ed30f3dc8ed16e2203be5cd7657d8711",
            "ALGO_SESSION": "232b5c7211608b33595784c1552fba41f18cd25c-last-access=2019-10-29T14%3A08%3A22.805Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "queryParameters": {}
        },
        "response": {
          "statusCode": 200,
          "headers": {
            "content-encoding": "gzip",
            "content-type": "application/json; charset=utf-8",
            "date": "Tue, 29 Oct 2019 14:08:22 GMT",
            "set-cookie": "ALGO_SESSION=ee928c79e531135d8c412ef37c45deb865911d59-last-access=2019-10-29T14%3A08%3A22.893Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3; Max-Age=86400; Expires=Wed, 30 Oct 2019 14:08:22 GMT; Path=/; Domain=algorithmia.com; Secure; HTTPOnly",
            "strict-transport-security": "max-age=86400; includeSubDomains",
            "vary": "Accept-Encoding",
            "x-content-type-options": "nosniff",
            "x-frame-options": "DENY",
            "content-length": "179",
            "connection": "keep-alive"
          },
          "body": {
            "name": "abc",
            "details": {
              "label": "abc",
              "tagline": ""
            },
            "settings": {
              "algorithm_callability": "private",
              "source_visibility": "closed",
              "language": "scala",
              "environment": "cpu",
              "license": "apl",
              "network_access": "full",
              "pipeline_enabled": true
            },
            "resource_type": "algorithm"
          }
        }
      },
      {
        "request": {
          "url": "/algorithms/acunniffe/abc/commit",
          "method": "POST",
          "headers": {
            "host": "algorithmia.com",
            "connection": "keep-alive",
            "content-length": "2",
            "pragma": "no-cache",
            "cache-control": "no-cache",
            "accept": "application/json, text/plain, */*",
            "origin": "https://algorithmia.com",
            "x-xsrf-token": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36",
            "dnt": "1",
            "content-type": "application/json;charset=UTF-8",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "cors",
            "referer": "https://algorithmia.com/algorithms/acunniffe/abc/source",
            "accept-encoding": "gzip, deflate, br",
            "accept-language": "en-US,en;q=0.9",
            "cookie": "ajs_group_id=null; ajs_anonymous_id=%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22; _ga=GA1.2.1872580011.1571235636; _fbp=fb.1.1571235636317.604574724; intercom-id-c9fj6354=01941621-342b-4320-ad75-53826b5a002c; hubspotutk=105fad8a9b12bfed67330a0dbfe12c61; _gid=GA1.2.1843278152.1572282100; __zlcmid=uzie5dAUbB300Y; __hstc=69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3; __hssrc=1; fs_intercom=4655074328608768:4513847218700288; XSRF-TOKEN=0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da; referrer=www.google.com; landing_page=https://algorithmia.com/; signup_session=true; ajs_user_id=%22acunniffe%22; fs_uid=rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636; new-algo-language=scala; _gat=1; __hssc=69686351.6.1572357353053; intercom-session-c9fj6354=RzJVV0NsOVQwMHIvcVR3OXVOZENmc1pWbWhMZ09zczVSbHRlRXhMMDJ3dnJQV3dnRkVJTDZTQndRQUlQcFNxZi0teWJ1VmhEd0h1M0w5b20xeFV1TkU5dz09--1aff24c8ed30f3dc8ed16e2203be5cd7657d8711; ALGO_SESSION=c1439984e6e6d7ba7175c1f812029a9cd115b529-last-access=2019-10-29T14%3A07%3A59.897Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "cookies": {
            "ajs_group_id": "null",
            "ajs_anonymous_id": "%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22",
            "_ga": "GA1.2.1872580011.1571235636",
            "_fbp": "fb.1.1571235636317.604574724",
            "intercom-id-c9fj6354": "01941621-342b-4320-ad75-53826b5a002c",
            "hubspotutk": "105fad8a9b12bfed67330a0dbfe12c61",
            "_gid": "GA1.2.1843278152.1572282100",
            "__zlcmid": "uzie5dAUbB300Y",
            "__hstc": "69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3",
            "__hssrc": "1",
            "fs_intercom": "4655074328608768:4513847218700288",
            "XSRF-TOKEN": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "referrer": "www.google.com",
            "landing_page": "https://algorithmia.com/",
            "signup_session": "true",
            "ajs_user_id": "%22acunniffe%22",
            "fs_uid": "rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636",
            "new-algo-language": "scala",
            "_gat": "1",
            "__hssc": "69686351.6.1572357353053",
            "intercom-session-c9fj6354": "RzJVV0NsOVQwMHIvcVR3OXVOZENmc1pWbWhMZ09zczVSbHRlRXhMMDJ3dnJQV3dnRkVJTDZTQndRQUlQcFNxZi0teWJ1VmhEd0h1M0w5b20xeFV1TkU5dz09--1aff24c8ed30f3dc8ed16e2203be5cd7657d8711",
            "ALGO_SESSION": "c1439984e6e6d7ba7175c1f812029a9cd115b529-last-access=2019-10-29T14%3A07%3A59.897Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "queryParameters": {},
          "body": {}
        },
        "response": {
          "statusCode": 200,
          "headers": {
            "content-encoding": "gzip",
            "content-type": "application/json; charset=utf-8",
            "date": "Tue, 29 Oct 2019 14:08:23 GMT",
            "set-cookie": "ALGO_SESSION=7030c641b12d9f9b6730548ece241ca92001bea8-last-access=2019-10-29T14%3A08%3A23.137Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3; Max-Age=86400; Expires=Wed, 30 Oct 2019 14:08:23 GMT; Path=/; Domain=algorithmia.com; Secure; HTTPOnly",
            "strict-transport-security": "max-age=86400; includeSubDomains",
            "vary": "Accept-Encoding",
            "x-content-type-options": "nosniff",
            "x-frame-options": "DENY",
            "content-length": "130",
            "connection": "keep-alive"
          },
          "body": {
            "result": "Algorithm version algo://acunniffe/abc/0826d84478e5d7e4409dfb8a40ddf63c8f89a59f is now online",
            "version": "0826d84478e5d7e4409dfb8a40ddf63c8f89a59f"
          }
        }
      },
      {
        "request": {
          "url": "/v1/algorithms/acunniffe/abc/builds/268039aa-8d4c-4b9a-ad89-9e219ed9f07d",
          "method": "GET",
          "headers": {
            "host": "algorithmia.com",
            "connection": "keep-alive",
            "pragma": "no-cache",
            "cache-control": "no-cache",
            "accept": "application/json, text/plain, */*",
            "dnt": "1",
            "x-xsrf-token": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "cors",
            "referer": "https://algorithmia.com/algorithms/acunniffe/abc/builds/268039aa-8d4c-4b9a-ad89-9e219ed9f07d",
            "accept-encoding": "gzip, deflate, br",
            "accept-language": "en-US,en;q=0.9",
            "cookie": "ajs_group_id=null; ajs_anonymous_id=%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22; _ga=GA1.2.1872580011.1571235636; _fbp=fb.1.1571235636317.604574724; intercom-id-c9fj6354=01941621-342b-4320-ad75-53826b5a002c; hubspotutk=105fad8a9b12bfed67330a0dbfe12c61; _gid=GA1.2.1843278152.1572282100; __zlcmid=uzie5dAUbB300Y; __hstc=69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3; __hssrc=1; fs_intercom=4655074328608768:4513847218700288; XSRF-TOKEN=0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da; referrer=www.google.com; landing_page=https://algorithmia.com/; signup_session=true; ajs_user_id=%22acunniffe%22; fs_uid=rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636; new-algo-language=scala; _gat=1; __hssc=69686351.6.1572357353053; intercom-session-c9fj6354=RzJVV0NsOVQwMHIvcVR3OXVOZENmc1pWbWhMZ09zczVSbHRlRXhMMDJ3dnJQV3dnRkVJTDZTQndRQUlQcFNxZi0teWJ1VmhEd0h1M0w5b20xeFV1TkU5dz09--1aff24c8ed30f3dc8ed16e2203be5cd7657d8711; ALGO_SESSION=7030c641b12d9f9b6730548ece241ca92001bea8-last-access=2019-10-29T14%3A08%3A23.137Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "cookies": {
            "ajs_group_id": "null",
            "ajs_anonymous_id": "%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22",
            "_ga": "GA1.2.1872580011.1571235636",
            "_fbp": "fb.1.1571235636317.604574724",
            "intercom-id-c9fj6354": "01941621-342b-4320-ad75-53826b5a002c",
            "hubspotutk": "105fad8a9b12bfed67330a0dbfe12c61",
            "_gid": "GA1.2.1843278152.1572282100",
            "__zlcmid": "uzie5dAUbB300Y",
            "__hstc": "69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3",
            "__hssrc": "1",
            "fs_intercom": "4655074328608768:4513847218700288",
            "XSRF-TOKEN": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "referrer": "www.google.com",
            "landing_page": "https://algorithmia.com/",
            "signup_session": "true",
            "ajs_user_id": "%22acunniffe%22",
            "fs_uid": "rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636",
            "new-algo-language": "scala",
            "_gat": "1",
            "__hssc": "69686351.6.1572357353053",
            "intercom-session-c9fj6354": "RzJVV0NsOVQwMHIvcVR3OXVOZENmc1pWbWhMZ09zczVSbHRlRXhMMDJ3dnJQV3dnRkVJTDZTQndRQUlQcFNxZi0teWJ1VmhEd0h1M0w5b20xeFV1TkU5dz09--1aff24c8ed30f3dc8ed16e2203be5cd7657d8711",
            "ALGO_SESSION": "7030c641b12d9f9b6730548ece241ca92001bea8-last-access=2019-10-29T14%3A08%3A23.137Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "queryParameters": {}
        },
        "response": {
          "statusCode": 200,
          "headers": {
            "content-encoding": "gzip",
            "content-type": "application/json; charset=utf-8",
            "date": "Tue, 29 Oct 2019 14:08:23 GMT",
            "set-cookie": "ALGO_SESSION=64a614b0707048ec8f8cfb11f9ee6908e4a84b98-last-access=2019-10-29T14%3A08%3A23.200Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3; Max-Age=86400; Expires=Wed, 30 Oct 2019 14:08:23 GMT; Path=/; Domain=algorithmia.com; Secure; HTTPOnly",
            "strict-transport-security": "max-age=86400; includeSubDomains",
            "vary": "Accept-Encoding",
            "x-content-type-options": "nosniff",
            "x-frame-options": "DENY",
            "content-length": "154",
            "connection": "keep-alive"
          },
          "body": {
            "build_id": "268039aa-8d4c-4b9a-ad89-9e219ed9f07d",
            "status": "succeeded",
            "commit_sha": "0826d84478e5d7e4409dfb8a40ddf63c8f89a59f",
            "started_at": 1572358081796,
            "finished_at": 1572358102435
          }
        }
      },
      {
        "request": {
          "url": "/v1/algorithms/acunniffe/abc/builds/268039aa-8d4c-4b9a-ad89-9e219ed9f07d/logs",
          "method": "GET",
          "headers": {
            "host": "algorithmia.com",
            "connection": "keep-alive",
            "pragma": "no-cache",
            "cache-control": "no-cache",
            "accept": "application/json, text/plain, */*",
            "dnt": "1",
            "x-xsrf-token": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "cors",
            "referer": "https://algorithmia.com/algorithms/acunniffe/abc/builds/268039aa-8d4c-4b9a-ad89-9e219ed9f07d",
            "accept-encoding": "gzip, deflate, br",
            "accept-language": "en-US,en;q=0.9",
            "cookie": "ajs_group_id=null; ajs_anonymous_id=%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22; _ga=GA1.2.1872580011.1571235636; _fbp=fb.1.1571235636317.604574724; intercom-id-c9fj6354=01941621-342b-4320-ad75-53826b5a002c; hubspotutk=105fad8a9b12bfed67330a0dbfe12c61; _gid=GA1.2.1843278152.1572282100; __zlcmid=uzie5dAUbB300Y; __hstc=69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3; __hssrc=1; fs_intercom=4655074328608768:4513847218700288; XSRF-TOKEN=0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da; referrer=www.google.com; landing_page=https://algorithmia.com/; signup_session=true; ajs_user_id=%22acunniffe%22; fs_uid=rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636; new-algo-language=scala; _gat=1; __hssc=69686351.6.1572357353053; intercom-session-c9fj6354=RzJVV0NsOVQwMHIvcVR3OXVOZENmc1pWbWhMZ09zczVSbHRlRXhMMDJ3dnJQV3dnRkVJTDZTQndRQUlQcFNxZi0teWJ1VmhEd0h1M0w5b20xeFV1TkU5dz09--1aff24c8ed30f3dc8ed16e2203be5cd7657d8711; ALGO_SESSION=64a614b0707048ec8f8cfb11f9ee6908e4a84b98-last-access=2019-10-29T14%3A08%3A23.200Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "cookies": {
            "ajs_group_id": "null",
            "ajs_anonymous_id": "%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22",
            "_ga": "GA1.2.1872580011.1571235636",
            "_fbp": "fb.1.1571235636317.604574724",
            "intercom-id-c9fj6354": "01941621-342b-4320-ad75-53826b5a002c",
            "hubspotutk": "105fad8a9b12bfed67330a0dbfe12c61",
            "_gid": "GA1.2.1843278152.1572282100",
            "__zlcmid": "uzie5dAUbB300Y",
            "__hstc": "69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3",
            "__hssrc": "1",
            "fs_intercom": "4655074328608768:4513847218700288",
            "XSRF-TOKEN": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "referrer": "www.google.com",
            "landing_page": "https://algorithmia.com/",
            "signup_session": "true",
            "ajs_user_id": "%22acunniffe%22",
            "fs_uid": "rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636",
            "new-algo-language": "scala",
            "_gat": "1",
            "__hssc": "69686351.6.1572357353053",
            "intercom-session-c9fj6354": "RzJVV0NsOVQwMHIvcVR3OXVOZENmc1pWbWhMZ09zczVSbHRlRXhMMDJ3dnJQV3dnRkVJTDZTQndRQUlQcFNxZi0teWJ1VmhEd0h1M0w5b20xeFV1TkU5dz09--1aff24c8ed30f3dc8ed16e2203be5cd7657d8711",
            "ALGO_SESSION": "64a614b0707048ec8f8cfb11f9ee6908e4a84b98-last-access=2019-10-29T14%3A08%3A23.200Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "queryParameters": {}
        },
        "response": {
          "statusCode": 200,
          "headers": {
            "content-encoding": "gzip",
            "content-type": "application/json; charset=utf-8",
            "date": "Tue, 29 Oct 2019 14:08:23 GMT",
            "set-cookie": "ALGO_SESSION=9307005685e53b01d37d55bca72c7e6495edac9d-last-access=2019-10-29T14%3A08%3A23.234Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3; Max-Age=86400; Expires=Wed, 30 Oct 2019 14:08:23 GMT; Path=/; Domain=algorithmia.com; Secure; HTTPOnly",
            "strict-transport-security": "max-age=86400; includeSubDomains",
            "vary": "Accept-Encoding",
            "x-content-type-options": "nosniff",
            "x-frame-options": "DENY",
            "content-length": "1180",
            "connection": "keep-alive"
          },
          "body": {
            "logs": "Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\nGetting org.scala-sbt sbt 0.13.9 ...\n:: retrieving :: org.scala-sbt#boot-app\nconfs: [default]\n52 artifacts copied, 0 already retrieved (17785kB/134ms)\nGetting Scala 2.10.5 (for sbt)...\n:: retrieving :: org.scala-sbt#boot-scala\nconfs: [default]\n5 artifacts copied, 0 already retrieved (24493kB/64ms)\n[info] Set current project to abc (in build file:/tmp/build/)\n[success] Total time: 1 s, completed Oct 29, 2019 2:08:13 PM\n[info] Updating {file:/tmp/build/}build...\n[info] Resolving org.scala-lang#scala-library;2.11.11 ...\n[A\r\u001b[2K[info] Resolving com.algorithmia#algorithmia-client;1.0.+ ...\n[A\r\u001b[2K[info] Resolving com.algorithmia#algorithmia-client;1.0.+ ...\n[A\r\u001b[2K[info] Resolving com.google.code.gson#gson;2.6.2 ...\n[A\r\u001b[2K[info] Resolving org.apache.httpcomponents#httpasyncclient;4.1.1 ...\n[A\r\u001b[2K[info] Resolving org.apache.httpcomponents#httpcore;4.4.4 ...\n[A\r\u001b[2K[info] Resolving org.apache.httpcomponents#httpcore-nio;4.4.4 ...\n[A\r\u001b[2K[info] Resolving org.apache.httpcomponents#httpclient;4.5.1 ...\n[A\r\u001b[2K[info] Resolving commons-logging#commons-logging;1.2 ...\n[A\r\u001b[2K[info] Resolving commons-codec#commons-codec;1.9 ...\n[A\r\u001b[2K[info] Resolving commons-io#commons-io;2.5 ...\n[A\r\u001b[2K[info] Resolving com.algorithmia#algorithmia-extras;1.0.+ ...\n[A\r\u001b[2K[info] Resolving com.algorithmia#algorithmia-extras;1.0.+ ...\n[A\r\u001b[2K[info] Resolving com.algorithmia#algorithmia-client;[1.0,1.1) ...\n[A\r\u001b[2K[info] Resolving com.algorithmia#algorithmia-client;[1.0,1.1) ...\n[A\r\u001b[2K[info] Resolving commons-codec#commons-codec;1.10 ...\n[A\r\u001b[2K[info] Resolving org.scalatest#scalatest_2.11;3.0.1 ...\n[A\r\u001b[2K[info] Resolving org.scalactic#scalactic_2.11;3.0.1 ...\n[A\r\u001b[2K[info] Resolving org.scala-lang#scala-reflect;2.11.8 ...\n[A\r\u001b[2K[info] Resolving org.scala-lang.modules#scala-xml_2.11;1.0.5 ...\n[A\r\u001b[2K[info] Resolving org.scala-lang.modules#scala-parser-combinators_2.11;1.0.4 ...\n[A\r\u001b[2K[info] Resolving org.scala-lang#scala-compiler;2.11.11 ...\n[A\r\u001b[2K[info] Resolving org.scala-lang#scala-reflect;2.11.11 ...\n[A\r\u001b[2K[info] Resolving jline#jline;2.14.3 ...\n[info] Done updating.\n[info] Compiling 1 Scala source to /tmp/build/target/scala-2.11/classes...\n[info] Packaging /tmp/build/target/scala-2.11/abc_2.11-1.0-SNAPSHOT.jar ...\n[info] Done packaging.\n[success] Total time: 7 s, completed Oct 29, 2019 2:08:20 PM\nzip warning: name not matched: lib\nadding: lib_managed/ (stored 0%)\nadding: lib_managed/jars/ (stored 0%)\nadding: lib_managed/jars/org.apache.httpcomponents/ (stored 0%)\nadding: lib_managed/jars/org.apache.httpcomponents/httpcore/ (stored 0%)\nadding: lib_managed/jars/org.apache.httpcomponents/httpcore/httpcore-4.4.4.jar (deflated 11%)\nadding: lib_managed/jars/org.apache.httpcomponents/httpasyncclient/ (stored 0%)\nadding: lib_managed/jars/org.apache.httpcomponents/httpasyncclient/httpasyncclient-4.1.1.jar (deflated 8%)\nadding: lib_managed/jars/org.apache.httpcomponents/httpclient/ (stored 0%)\nadding: lib_managed/jars/org.apache.httpcomponents/httpclient/httpclient-4.5.1.jar (deflated 9%)\nadding: lib_managed/jars/org.apache.httpcomponents/httpcore-nio/ (stored 0%)\nadding: lib_managed/jars/org.apache.httpcomponents/httpcore-nio/httpcore-nio-4.4.4.jar (deflated 10%)\nadding: lib_managed/jars/org.scala-lang/ (stored 0%)\nadding: lib_managed/jars/org.scala-lang/scala-reflect/ (stored 0%)\nadding: lib_managed/jars/org.scala-lang/scala-reflect/scala-reflect-2.11.8.jar (deflated 11%)\nadding: lib_managed/jars/org.scala-lang/scala-reflect/scala-reflect-2.11.11.jar (deflated 11%)\nadding: lib_managed/jars/org.scala-lang/scala-library/ (stored 0%)\nadding: lib_managed/jars/org.scala-lang/scala-library/scala-library-2.11.11.jar (deflated 11%)\nadding: lib_managed/jars/org.scala-lang/scala-compiler/ (stored 0%)\nadding: lib_managed/jars/org.scala-lang/scala-compiler/scala-compiler-2.11.11.jar (deflated 12%)\nadding: lib_managed/jars/com.algorithmia/ (stored 0%)\nadding: lib_managed/jars/com.algorithmia/algorithmia-client/ (stored 0%)\nadding: lib_managed/jars/com.algorithmia/algorithmia-client/algorithmia-client-1.0.16.jar (deflated 14%)\nadding: lib_managed/jars/com.algorithmia/algorithmia-extras/ (stored 0%)\nadding: lib_managed/jars/com.algorithmia/algorithmia-extras/algorithmia-extras-1.0.1.jar (deflated 20%)\nadding: lib_managed/jars/jline/ (stored 0%)\nadding: lib_managed/jars/jline/jline/ (stored 0%)\nadding: lib_managed/jars/jline/jline/jline-2.14.3.jar (deflated 7%)\nadding: lib_managed/jars/com.google.code.gson/ (stored 0%)\nadding: lib_managed/jars/com.google.code.gson/gson/ (stored 0%)\nadding: lib_managed/jars/com.google.code.gson/gson/gson-2.6.2.jar (deflated 10%)\nadding: lib_managed/jars/commons-logging/ (stored 0%)\nadding: lib_managed/jars/commons-logging/commons-logging/ (stored 0%)\nadding: lib_managed/jars/commons-logging/commons-logging/commons-logging-1.2.jar (deflated 8%)\nadding: lib_managed/jars/commons-codec/ (stored 0%)\nadding: lib_managed/jars/commons-codec/commons-codec/ (stored 0%)\nadding: lib_managed/jars/commons-codec/commons-codec/commons-codec-1.10.jar (deflated 18%)\nadding: lib_managed/jars/commons-io/ (stored 0%)\nadding: lib_managed/jars/commons-io/commons-io/ (stored 0%)\nadding: lib_managed/jars/commons-io/commons-io/commons-io-2.5.jar (deflated 9%)\nadding: lib_managed/bundles/ (stored 0%)\nadding: lib_managed/bundles/org.scalactic/ (stored 0%)\nadding: lib_managed/bundles/org.scalactic/scalactic_2.11/ (stored 0%)\nadding: lib_managed/bundles/org.scalactic/scalactic_2.11/scalactic_2.11-3.0.1.jar (deflated 8%)\nadding: lib_managed/bundles/org.scala-lang.modules/ (stored 0%)\nadding: lib_managed/bundles/org.scala-lang.modules/scala-xml_2.11/ (stored 0%)\nadding: lib_managed/bundles/org.scala-lang.modules/scala-xml_2.11/scala-xml_2.11-1.0.5.jar (deflated 8%)\nadding: lib_managed/bundles/org.scala-lang.modules/scala-parser-combinators_2.11/ (stored 0%)\nadding: lib_managed/bundles/org.scala-lang.modules/scala-parser-combinators_2.11/scala-parser-combinators_2.11-1.0.4.jar (deflated 16%)\nadding: lib_managed/bundles/org.scalatest/ (stored 0%)\nadding: lib_managed/bundles/org.scalatest/scalatest_2.11/ (stored 0%)\nadding: lib_managed/bundles/org.scalatest/scalatest_2.11/scalatest_2.11-3.0.1.jar (deflated 13%)\nadding: target/scala-2.11/abc_2.11-1.0-SNAPSHOT.jar (deflated 22%)\nadding: bin/build (deflated 34%)\nadding: bin/pipe (deflated 35%)\nadding: bin/setup (deflated 55%)\nadding: bin/test (stored 0%)\n"
          }
        }
      },
      {
        "request": {
          "url": "/webapi/algorithms/acunniffe/abc/versions/latest",
          "method": "GET",
          "headers": {
            "host": "algorithmia.com",
            "connection": "keep-alive",
            "pragma": "no-cache",
            "cache-control": "no-cache",
            "accept": "application/json, text/plain, */*",
            "dnt": "1",
            "x-xsrf-token": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "cors",
            "referer": "https://algorithmia.com/algorithms/acunniffe/abc/builds/268039aa-8d4c-4b9a-ad89-9e219ed9f07d",
            "accept-encoding": "gzip, deflate, br",
            "accept-language": "en-US,en;q=0.9",
            "cookie": "ajs_group_id=null; ajs_anonymous_id=%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22; _ga=GA1.2.1872580011.1571235636; _fbp=fb.1.1571235636317.604574724; intercom-id-c9fj6354=01941621-342b-4320-ad75-53826b5a002c; hubspotutk=105fad8a9b12bfed67330a0dbfe12c61; _gid=GA1.2.1843278152.1572282100; __zlcmid=uzie5dAUbB300Y; __hstc=69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3; __hssrc=1; fs_intercom=4655074328608768:4513847218700288; XSRF-TOKEN=0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da; referrer=www.google.com; landing_page=https://algorithmia.com/; signup_session=true; ajs_user_id=%22acunniffe%22; fs_uid=rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636; new-algo-language=scala; _gat=1; __hssc=69686351.6.1572357353053; intercom-session-c9fj6354=RzJVV0NsOVQwMHIvcVR3OXVOZENmc1pWbWhMZ09zczVSbHRlRXhMMDJ3dnJQV3dnRkVJTDZTQndRQUlQcFNxZi0teWJ1VmhEd0h1M0w5b20xeFV1TkU5dz09--1aff24c8ed30f3dc8ed16e2203be5cd7657d8711; ALGO_SESSION=9307005685e53b01d37d55bca72c7e6495edac9d-last-access=2019-10-29T14%3A08%3A23.234Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "cookies": {
            "ajs_group_id": "null",
            "ajs_anonymous_id": "%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22",
            "_ga": "GA1.2.1872580011.1571235636",
            "_fbp": "fb.1.1571235636317.604574724",
            "intercom-id-c9fj6354": "01941621-342b-4320-ad75-53826b5a002c",
            "hubspotutk": "105fad8a9b12bfed67330a0dbfe12c61",
            "_gid": "GA1.2.1843278152.1572282100",
            "__zlcmid": "uzie5dAUbB300Y",
            "__hstc": "69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3",
            "__hssrc": "1",
            "fs_intercom": "4655074328608768:4513847218700288",
            "XSRF-TOKEN": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "referrer": "www.google.com",
            "landing_page": "https://algorithmia.com/",
            "signup_session": "true",
            "ajs_user_id": "%22acunniffe%22",
            "fs_uid": "rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636",
            "new-algo-language": "scala",
            "_gat": "1",
            "__hssc": "69686351.6.1572357353053",
            "intercom-session-c9fj6354": "RzJVV0NsOVQwMHIvcVR3OXVOZENmc1pWbWhMZ09zczVSbHRlRXhMMDJ3dnJQV3dnRkVJTDZTQndRQUlQcFNxZi0teWJ1VmhEd0h1M0w5b20xeFV1TkU5dz09--1aff24c8ed30f3dc8ed16e2203be5cd7657d8711",
            "ALGO_SESSION": "9307005685e53b01d37d55bca72c7e6495edac9d-last-access=2019-10-29T14%3A08%3A23.234Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "queryParameters": {}
        },
        "response": {
          "statusCode": 200,
          "headers": {
            "content-encoding": "gzip",
            "content-type": "application/json; charset=utf-8",
            "date": "Tue, 29 Oct 2019 14:08:23 GMT",
            "set-cookie": "ALGO_SESSION=f232dcf6ef5903ceaa31a7beeaa3fa1e078f4260-last-access=2019-10-29T14%3A08%3A23.293Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3; Max-Age=86400; Expires=Wed, 30 Oct 2019 14:08:23 GMT; Path=/; Domain=algorithmia.com; Secure; HTTPOnly",
            "strict-transport-security": "max-age=86400; includeSubDomains",
            "vary": "Accept-Encoding",
            "x-content-type-options": "nosniff",
            "x-frame-options": "DENY",
            "content-length": "43",
            "connection": "keep-alive"
          },
          "body": {
            "latest_version": null
          }
        }
      },
      {
        "request": {
          "url": "/v1/algorithms/acunniffe/abc",
          "method": "GET",
          "headers": {
            "host": "algorithmia.com",
            "connection": "keep-alive",
            "pragma": "no-cache",
            "cache-control": "no-cache",
            "accept": "application/json, text/plain, */*",
            "dnt": "1",
            "x-xsrf-token": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "cors",
            "referer": "https://algorithmia.com/algorithms/acunniffe/abc/builds/268039aa-8d4c-4b9a-ad89-9e219ed9f07d",
            "accept-encoding": "gzip, deflate, br",
            "accept-language": "en-US,en;q=0.9",
            "cookie": "ajs_group_id=null; ajs_anonymous_id=%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22; _ga=GA1.2.1872580011.1571235636; _fbp=fb.1.1571235636317.604574724; intercom-id-c9fj6354=01941621-342b-4320-ad75-53826b5a002c; hubspotutk=105fad8a9b12bfed67330a0dbfe12c61; _gid=GA1.2.1843278152.1572282100; __zlcmid=uzie5dAUbB300Y; __hstc=69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3; __hssrc=1; fs_intercom=4655074328608768:4513847218700288; XSRF-TOKEN=0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da; referrer=www.google.com; landing_page=https://algorithmia.com/; signup_session=true; ajs_user_id=%22acunniffe%22; fs_uid=rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636; new-algo-language=scala; _gat=1; __hssc=69686351.6.1572357353053; intercom-session-c9fj6354=RzJVV0NsOVQwMHIvcVR3OXVOZENmc1pWbWhMZ09zczVSbHRlRXhMMDJ3dnJQV3dnRkVJTDZTQndRQUlQcFNxZi0teWJ1VmhEd0h1M0w5b20xeFV1TkU5dz09--1aff24c8ed30f3dc8ed16e2203be5cd7657d8711; ALGO_SESSION=f232dcf6ef5903ceaa31a7beeaa3fa1e078f4260-last-access=2019-10-29T14%3A08%3A23.293Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "cookies": {
            "ajs_group_id": "null",
            "ajs_anonymous_id": "%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22",
            "_ga": "GA1.2.1872580011.1571235636",
            "_fbp": "fb.1.1571235636317.604574724",
            "intercom-id-c9fj6354": "01941621-342b-4320-ad75-53826b5a002c",
            "hubspotutk": "105fad8a9b12bfed67330a0dbfe12c61",
            "_gid": "GA1.2.1843278152.1572282100",
            "__zlcmid": "uzie5dAUbB300Y",
            "__hstc": "69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3",
            "__hssrc": "1",
            "fs_intercom": "4655074328608768:4513847218700288",
            "XSRF-TOKEN": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "referrer": "www.google.com",
            "landing_page": "https://algorithmia.com/",
            "signup_session": "true",
            "ajs_user_id": "%22acunniffe%22",
            "fs_uid": "rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636",
            "new-algo-language": "scala",
            "_gat": "1",
            "__hssc": "69686351.6.1572357353053",
            "intercom-session-c9fj6354": "RzJVV0NsOVQwMHIvcVR3OXVOZENmc1pWbWhMZ09zczVSbHRlRXhMMDJ3dnJQV3dnRkVJTDZTQndRQUlQcFNxZi0teWJ1VmhEd0h1M0w5b20xeFV1TkU5dz09--1aff24c8ed30f3dc8ed16e2203be5cd7657d8711",
            "ALGO_SESSION": "f232dcf6ef5903ceaa31a7beeaa3fa1e078f4260-last-access=2019-10-29T14%3A08%3A23.293Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "queryParameters": {}
        },
        "response": {
          "statusCode": 200,
          "headers": {
            "content-encoding": "gzip",
            "content-type": "application/json; charset=utf-8",
            "date": "Tue, 29 Oct 2019 14:08:23 GMT",
            "set-cookie": "ALGO_SESSION=cc71e570beb27f1acf6ce60cc43792ce606b8a2f-last-access=2019-10-29T14%3A08%3A23.387Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3; Max-Age=86400; Expires=Wed, 30 Oct 2019 14:08:23 GMT; Path=/; Domain=algorithmia.com; Secure; HTTPOnly",
            "strict-transport-security": "max-age=86400; includeSubDomains",
            "vary": "Accept-Encoding",
            "x-content-type-options": "nosniff",
            "x-frame-options": "DENY",
            "content-length": "1439",
            "connection": "keep-alive"
          },
          "body": {
            "name": "abc",
            "details": {
              "label": "abc",
              "tagline": ""
            },
            "settings": {
              "algorithm_callability": "private",
              "source_visibility": "closed",
              "language": "scala",
              "environment": "cpu",
              "license": "apl",
              "network_access": "full",
              "pipeline_enabled": true
            },
            "version_info": {
              "git_hash": "0826d84478e5d7e4409dfb8a40ddf63c8f89a59f"
            },
            "compilation": {
              "successful": true,
              "output": "Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\nGetting org.scala-sbt sbt 0.13.9 ...\n:: retrieving :: org.scala-sbt#boot-app\nconfs: [default]\n52 artifacts copied, 0 already retrieved (17785kB/134ms)\nGetting Scala 2.10.5 (for sbt)...\n:: retrieving :: org.scala-sbt#boot-scala\nconfs: [default]\n5 artifacts copied, 0 already retrieved (24493kB/64ms)\n[info] Set current project to abc (in build file:/tmp/build/)\n[success] Total time: 1 s, completed Oct 29, 2019 2:08:13 PM\n[info] Updating {file:/tmp/build/}build...\n[info] Resolving org.scala-lang#scala-library;2.11.11 ...\n[A\r\u001b[2K[info] Resolving com.algorithmia#algorithmia-client;1.0.+ ...\n[A\r\u001b[2K[info] Resolving com.algorithmia#algorithmia-client;1.0.+ ...\n[A\r\u001b[2K[info] Resolving com.google.code.gson#gson;2.6.2 ...\n[A\r\u001b[2K[info] Resolving org.apache.httpcomponents#httpasyncclient;4.1.1 ...\n[A\r\u001b[2K[info] Resolving org.apache.httpcomponents#httpcore;4.4.4 ...\n[A\r\u001b[2K[info] Resolving org.apache.httpcomponents#httpcore-nio;4.4.4 ...\n[A\r\u001b[2K[info] Resolving org.apache.httpcomponents#httpclient;4.5.1 ...\n[A\r\u001b[2K[info] Resolving commons-logging#commons-logging;1.2 ...\n[A\r\u001b[2K[info] Resolving commons-codec#commons-codec;1.9 ...\n[A\r\u001b[2K[info] Resolving commons-io#commons-io;2.5 ...\n[A\r\u001b[2K[info] Resolving com.algorithmia#algorithmia-extras;1.0.+ ...\n[A\r\u001b[2K[info] Resolving com.algorithmia#algorithmia-extras;1.0.+ ...\n[A\r\u001b[2K[info] Resolving com.algorithmia#algorithmia-client;[1.0,1.1) ...\n[A\r\u001b[2K[info] Resolving com.algorithmia#algorithmia-client;[1.0,1.1) ...\n[A\r\u001b[2K[info] Resolving commons-codec#commons-codec;1.10 ...\n[A\r\u001b[2K[info] Resolving org.scalatest#scalatest_2.11;3.0.1 ...\n[A\r\u001b[2K[info] Resolving org.scalactic#scalactic_2.11;3.0.1 ...\n[A\r\u001b[2K[info] Resolving org.scala-lang#scala-reflect;2.11.8 ...\n[A\r\u001b[2K[info] Resolving org.scala-lang.modules#scala-xml_2.11;1.0.5 ...\n[A\r\u001b[2K[info] Resolving org.scala-lang.modules#scala-parser-combinators_2.11;1.0.4 ...\n[A\r\u001b[2K[info] Resolving org.scala-lang#scala-compiler;2.11.11 ...\n[A\r\u001b[2K[info] Resolving org.scala-lang#scala-reflect;2.11.11 ...\n[A\r\u001b[2K[info] Resolving jline#jline;2.14.3 ...\n[info] Done updating.\n[info] Compiling 1 Scala source to /tmp/build/target/scala-2.11/classes...\n[info] Packaging /tmp/build/target/scala-2.11/abc_2.11-1.0-SNAPSHOT.jar ...\n[info] Done packaging.\n[success] Total time: 7 s, completed Oct 29, 2019 2:08:20 PM\nzip warning: name not matched: lib\nadding: lib_managed/ (stored 0%)\nadding: lib_managed/jars/ (stored 0%)\nadding: lib_managed/jars/org.apache.httpcomponents/ (stored 0%)\nadding: lib_managed/jars/org.apache.httpcomponents/httpcore/ (stored 0%)\nadding: lib_managed/jars/org.apache.httpcomponents/httpcore/httpcore-4.4.4.jar (deflated 11%)\nadding: lib_managed/jars/org.apache.httpcomponents/httpasyncclient/ (stored 0%)\nadding: lib_managed/jars/org.apache.httpcomponents/httpasyncclient/httpasyncclient-4.1.1.jar (deflated 8%)\nadding: lib_managed/jars/org.apache.httpcomponents/httpclient/ (stored 0%)\nadding: lib_managed/jars/org.apache.httpcomponents/httpclient/httpclient-4.5.1.jar (deflated 9%)\nadding: lib_managed/jars/org.apache.httpcomponents/httpcore-nio/ (stored 0%)\nadding: lib_managed/jars/org.apache.httpcomponents/httpcore-nio/httpcore-nio-4.4.4.jar (deflated 10%)\nadding: lib_managed/jars/org.scala-lang/ (stored 0%)\nadding: lib_managed/jars/org.scala-lang/scala-reflect/ (stored 0%)\nadding: lib_managed/jars/org.scala-lang/scala-reflect/scala-reflect-2.11.8.jar (deflated 11%)\nadding: lib_managed/jars/org.scala-lang/scala-reflect/scala-reflect-2.11.11.jar (deflated 11%)\nadding: lib_managed/jars/org.scala-lang/scala-library/ (stored 0%)\nadding: lib_managed/jars/org.scala-lang/scala-library/scala-library-2.11.11.jar (deflated 11%)\nadding: lib_managed/jars/org.scala-lang/scala-compiler/ (stored 0%)\nadding: lib_managed/jars/org.scala-lang/scala-compiler/scala-compiler-2.11.11.jar (deflated 12%)\nadding: lib_managed/jars/com.algorithmia/ (stored 0%)\nadding: lib_managed/jars/com.algorithmia/algorithmia-client/ (stored 0%)\nadding: lib_managed/jars/com.algorithmia/algorithmia-client/algorithmia-client-1.0.16.jar (deflated 14%)\nadding: lib_managed/jars/com.algorithmia/algorithmia-extras/ (stored 0%)\nadding: lib_managed/jars/com.algorithmia/algorithmia-extras/algorithmia-extras-1.0.1.jar (deflated 20%)\nadding: lib_managed/jars/jline/ (stored 0%)\nadding: lib_managed/jars/jline/jline/ (stored 0%)\nadding: lib_managed/jars/jline/jline/jline-2.14.3.jar (deflated 7%)\nadding: lib_managed/jars/com.google.code.gson/ (stored 0%)\nadding: lib_managed/jars/com.google.code.gson/gson/ (stored 0%)\nadding: lib_managed/jars/com.google.code.gson/gson/gson-2.6.2.jar (deflated 10%)\nadding: lib_managed/jars/commons-logging/ (stored 0%)\nadding: lib_managed/jars/commons-logging/commons-logging/ (stored 0%)\nadding: lib_managed/jars/commons-logging/commons-logging/commons-logging-1.2.jar (deflated 8%)\nadding: lib_managed/jars/commons-codec/ (stored 0%)\nadding: lib_managed/jars/commons-codec/commons-codec/ (stored 0%)\nadding: lib_managed/jars/commons-codec/commons-codec/commons-codec-1.10.jar (deflated 18%)\nadding: lib_managed/jars/commons-io/ (stored 0%)\nadding: lib_managed/jars/commons-io/commons-io/ (stored 0%)\nadding: lib_managed/jars/commons-io/commons-io/commons-io-2.5.jar (deflated 9%)\nadding: lib_managed/bundles/ (stored 0%)\nadding: lib_managed/bundles/org.scalactic/ (stored 0%)\nadding: lib_managed/bundles/org.scalactic/scalactic_2.11/ (stored 0%)\nadding: lib_managed/bundles/org.scalactic/scalactic_2.11/scalactic_2.11-3.0.1.jar (deflated 8%)\nadding: lib_managed/bundles/org.scala-lang.modules/ (stored 0%)\nadding: lib_managed/bundles/org.scala-lang.modules/scala-xml_2.11/ (stored 0%)\nadding: lib_managed/bundles/org.scala-lang.modules/scala-xml_2.11/scala-xml_2.11-1.0.5.jar (deflated 8%)\nadding: lib_managed/bundles/org.scala-lang.modules/scala-parser-combinators_2.11/ (stored 0%)\nadding: lib_managed/bundles/org.scala-lang.modules/scala-parser-combinators_2.11/scala-parser-combinators_2.11-1.0.4.jar (deflated 16%)\nadding: lib_managed/bundles/org.scalatest/ (stored 0%)\nadding: lib_managed/bundles/org.scalatest/scalatest_2.11/ (stored 0%)\nadding: lib_managed/bundles/org.scalatest/scalatest_2.11/scalatest_2.11-3.0.1.jar (deflated 13%)\nadding: target/scala-2.11/abc_2.11-1.0-SNAPSHOT.jar (deflated 22%)\nadding: bin/build (deflated 34%)\nadding: bin/pipe (deflated 35%)\nadding: bin/setup (deflated 55%)\nadding: bin/test (stored 0%)\n"
            },
            "self_link": "https://api.algorithmia.com/v1/algorithms/acunniffe/abc/versions/0826d84478e5d7e4409dfb8a40ddf63c8f89a59f",
            "resource_type": "algorithm"
          }
        }
      },
      {
        "request": {
          "url": "/v1/algorithms/acunniffe/abc/builds/268039aa-8d4c-4b9a-ad89-9e219ed9f07d",
          "method": "GET",
          "headers": {
            "host": "algorithmia.com",
            "connection": "keep-alive",
            "pragma": "no-cache",
            "cache-control": "no-cache",
            "accept": "application/json, text/plain, */*",
            "dnt": "1",
            "x-xsrf-token": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "cors",
            "referer": "https://algorithmia.com/algorithms/acunniffe/abc/builds/268039aa-8d4c-4b9a-ad89-9e219ed9f07d",
            "accept-encoding": "gzip, deflate, br",
            "accept-language": "en-US,en;q=0.9",
            "cookie": "ajs_group_id=null; ajs_anonymous_id=%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22; _ga=GA1.2.1872580011.1571235636; _fbp=fb.1.1571235636317.604574724; intercom-id-c9fj6354=01941621-342b-4320-ad75-53826b5a002c; hubspotutk=105fad8a9b12bfed67330a0dbfe12c61; _gid=GA1.2.1843278152.1572282100; __zlcmid=uzie5dAUbB300Y; __hstc=69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3; __hssrc=1; fs_intercom=4655074328608768:4513847218700288; XSRF-TOKEN=0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da; referrer=www.google.com; landing_page=https://algorithmia.com/; signup_session=true; ajs_user_id=%22acunniffe%22; fs_uid=rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636; new-algo-language=scala; _gat=1; __hssc=69686351.6.1572357353053; intercom-session-c9fj6354=RzJVV0NsOVQwMHIvcVR3OXVOZENmc1pWbWhMZ09zczVSbHRlRXhMMDJ3dnJQV3dnRkVJTDZTQndRQUlQcFNxZi0teWJ1VmhEd0h1M0w5b20xeFV1TkU5dz09--1aff24c8ed30f3dc8ed16e2203be5cd7657d8711; ALGO_SESSION=cc71e570beb27f1acf6ce60cc43792ce606b8a2f-last-access=2019-10-29T14%3A08%3A23.387Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "cookies": {
            "ajs_group_id": "null",
            "ajs_anonymous_id": "%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22",
            "_ga": "GA1.2.1872580011.1571235636",
            "_fbp": "fb.1.1571235636317.604574724",
            "intercom-id-c9fj6354": "01941621-342b-4320-ad75-53826b5a002c",
            "hubspotutk": "105fad8a9b12bfed67330a0dbfe12c61",
            "_gid": "GA1.2.1843278152.1572282100",
            "__zlcmid": "uzie5dAUbB300Y",
            "__hstc": "69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3",
            "__hssrc": "1",
            "fs_intercom": "4655074328608768:4513847218700288",
            "XSRF-TOKEN": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "referrer": "www.google.com",
            "landing_page": "https://algorithmia.com/",
            "signup_session": "true",
            "ajs_user_id": "%22acunniffe%22",
            "fs_uid": "rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636",
            "new-algo-language": "scala",
            "_gat": "1",
            "__hssc": "69686351.6.1572357353053",
            "intercom-session-c9fj6354": "RzJVV0NsOVQwMHIvcVR3OXVOZENmc1pWbWhMZ09zczVSbHRlRXhMMDJ3dnJQV3dnRkVJTDZTQndRQUlQcFNxZi0teWJ1VmhEd0h1M0w5b20xeFV1TkU5dz09--1aff24c8ed30f3dc8ed16e2203be5cd7657d8711",
            "ALGO_SESSION": "cc71e570beb27f1acf6ce60cc43792ce606b8a2f-last-access=2019-10-29T14%3A08%3A23.387Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "queryParameters": {}
        },
        "response": {
          "statusCode": 200,
          "headers": {
            "content-encoding": "gzip",
            "content-type": "application/json; charset=utf-8",
            "date": "Tue, 29 Oct 2019 14:08:23 GMT",
            "set-cookie": "ALGO_SESSION=0bd7b246139e8eec13e4006175539518cbff8736-last-access=2019-10-29T14%3A08%3A23.789Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3; Max-Age=86400; Expires=Wed, 30 Oct 2019 14:08:23 GMT; Path=/; Domain=algorithmia.com; Secure; HTTPOnly",
            "strict-transport-security": "max-age=86400; includeSubDomains",
            "vary": "Accept-Encoding",
            "x-content-type-options": "nosniff",
            "x-frame-options": "DENY",
            "content-length": "154",
            "connection": "keep-alive"
          },
          "body": {
            "build_id": "268039aa-8d4c-4b9a-ad89-9e219ed9f07d",
            "status": "succeeded",
            "commit_sha": "0826d84478e5d7e4409dfb8a40ddf63c8f89a59f",
            "started_at": 1572358081796,
            "finished_at": 1572358102435
          }
        }
      },
      {
        "request": {
          "url": "/webapi/algorithms/acunniffe/abc/versions/latest",
          "method": "GET",
          "headers": {
            "host": "algorithmia.com",
            "connection": "keep-alive",
            "pragma": "no-cache",
            "cache-control": "no-cache",
            "accept": "application/json, text/plain, */*",
            "dnt": "1",
            "x-xsrf-token": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "cors",
            "referer": "https://algorithmia.com/algorithms/acunniffe/abc/builds/268039aa-8d4c-4b9a-ad89-9e219ed9f07d",
            "accept-encoding": "gzip, deflate, br",
            "accept-language": "en-US,en;q=0.9",
            "cookie": "ajs_group_id=null; ajs_anonymous_id=%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22; _ga=GA1.2.1872580011.1571235636; _fbp=fb.1.1571235636317.604574724; intercom-id-c9fj6354=01941621-342b-4320-ad75-53826b5a002c; hubspotutk=105fad8a9b12bfed67330a0dbfe12c61; _gid=GA1.2.1843278152.1572282100; __zlcmid=uzie5dAUbB300Y; __hstc=69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3; __hssrc=1; fs_intercom=4655074328608768:4513847218700288; XSRF-TOKEN=0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da; referrer=www.google.com; landing_page=https://algorithmia.com/; signup_session=true; ajs_user_id=%22acunniffe%22; fs_uid=rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636; new-algo-language=scala; _gat=1; __hssc=69686351.6.1572357353053; intercom-session-c9fj6354=RzJVV0NsOVQwMHIvcVR3OXVOZENmc1pWbWhMZ09zczVSbHRlRXhMMDJ3dnJQV3dnRkVJTDZTQndRQUlQcFNxZi0teWJ1VmhEd0h1M0w5b20xeFV1TkU5dz09--1aff24c8ed30f3dc8ed16e2203be5cd7657d8711; ALGO_SESSION=0bd7b246139e8eec13e4006175539518cbff8736-last-access=2019-10-29T14%3A08%3A23.789Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "cookies": {
            "ajs_group_id": "null",
            "ajs_anonymous_id": "%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22",
            "_ga": "GA1.2.1872580011.1571235636",
            "_fbp": "fb.1.1571235636317.604574724",
            "intercom-id-c9fj6354": "01941621-342b-4320-ad75-53826b5a002c",
            "hubspotutk": "105fad8a9b12bfed67330a0dbfe12c61",
            "_gid": "GA1.2.1843278152.1572282100",
            "__zlcmid": "uzie5dAUbB300Y",
            "__hstc": "69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3",
            "__hssrc": "1",
            "fs_intercom": "4655074328608768:4513847218700288",
            "XSRF-TOKEN": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "referrer": "www.google.com",
            "landing_page": "https://algorithmia.com/",
            "signup_session": "true",
            "ajs_user_id": "%22acunniffe%22",
            "fs_uid": "rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636",
            "new-algo-language": "scala",
            "_gat": "1",
            "__hssc": "69686351.6.1572357353053",
            "intercom-session-c9fj6354": "RzJVV0NsOVQwMHIvcVR3OXVOZENmc1pWbWhMZ09zczVSbHRlRXhMMDJ3dnJQV3dnRkVJTDZTQndRQUlQcFNxZi0teWJ1VmhEd0h1M0w5b20xeFV1TkU5dz09--1aff24c8ed30f3dc8ed16e2203be5cd7657d8711",
            "ALGO_SESSION": "0bd7b246139e8eec13e4006175539518cbff8736-last-access=2019-10-29T14%3A08%3A23.789Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "queryParameters": {}
        },
        "response": {
          "statusCode": 200,
          "headers": {
            "content-encoding": "gzip",
            "content-type": "application/json; charset=utf-8",
            "date": "Tue, 29 Oct 2019 14:08:23 GMT",
            "set-cookie": "ALGO_SESSION=b3c6a1f39bafe165e10912201a4fafbf77077c06-last-access=2019-10-29T14%3A08%3A23.828Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3; Max-Age=86400; Expires=Wed, 30 Oct 2019 14:08:23 GMT; Path=/; Domain=algorithmia.com; Secure; HTTPOnly",
            "strict-transport-security": "max-age=86400; includeSubDomains",
            "vary": "Accept-Encoding",
            "x-content-type-options": "nosniff",
            "x-frame-options": "DENY",
            "content-length": "43",
            "connection": "keep-alive"
          },
          "body": {
            "latest_version": null
          }
        }
      },
      {
        "request": {
          "url": "/v1/algorithms/acunniffe/abc",
          "method": "GET",
          "headers": {
            "host": "algorithmia.com",
            "connection": "keep-alive",
            "pragma": "no-cache",
            "cache-control": "no-cache",
            "accept": "application/json, text/plain, */*",
            "dnt": "1",
            "x-xsrf-token": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36",
            "sec-fetch-site": "same-origin",
            "sec-fetch-mode": "cors",
            "referer": "https://algorithmia.com/algorithms/acunniffe/abc/builds/268039aa-8d4c-4b9a-ad89-9e219ed9f07d",
            "accept-encoding": "gzip, deflate, br",
            "accept-language": "en-US,en;q=0.9",
            "cookie": "ajs_group_id=null; ajs_anonymous_id=%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22; _ga=GA1.2.1872580011.1571235636; _fbp=fb.1.1571235636317.604574724; intercom-id-c9fj6354=01941621-342b-4320-ad75-53826b5a002c; hubspotutk=105fad8a9b12bfed67330a0dbfe12c61; _gid=GA1.2.1843278152.1572282100; __zlcmid=uzie5dAUbB300Y; __hstc=69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3; __hssrc=1; fs_intercom=4655074328608768:4513847218700288; XSRF-TOKEN=0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da; referrer=www.google.com; landing_page=https://algorithmia.com/; signup_session=true; ajs_user_id=%22acunniffe%22; fs_uid=rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636; new-algo-language=scala; _gat=1; __hssc=69686351.6.1572357353053; intercom-session-c9fj6354=RzJVV0NsOVQwMHIvcVR3OXVOZENmc1pWbWhMZ09zczVSbHRlRXhMMDJ3dnJQV3dnRkVJTDZTQndRQUlQcFNxZi0teWJ1VmhEd0h1M0w5b20xeFV1TkU5dz09--1aff24c8ed30f3dc8ed16e2203be5cd7657d8711; ALGO_SESSION=b3c6a1f39bafe165e10912201a4fafbf77077c06-last-access=2019-10-29T14%3A08%3A23.828Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "cookies": {
            "ajs_group_id": "null",
            "ajs_anonymous_id": "%226454df5e-a5cc-48c4-8546-78b014d8f1d5%22",
            "_ga": "GA1.2.1872580011.1571235636",
            "_fbp": "fb.1.1571235636317.604574724",
            "intercom-id-c9fj6354": "01941621-342b-4320-ad75-53826b5a002c",
            "hubspotutk": "105fad8a9b12bfed67330a0dbfe12c61",
            "_gid": "GA1.2.1843278152.1572282100",
            "__zlcmid": "uzie5dAUbB300Y",
            "__hstc": "69686351.105fad8a9b12bfed67330a0dbfe12c61.1571235640028.1572282100195.1572357353053.3",
            "__hssrc": "1",
            "fs_intercom": "4655074328608768:4513847218700288",
            "XSRF-TOKEN": "0834172f939f4f83936ee3d513ffb918853224aa-1572357648938-0630bd7d803fe74622cfa3da",
            "referrer": "www.google.com",
            "landing_page": "https://algorithmia.com/",
            "signup_session": "true",
            "ajs_user_id": "%22acunniffe%22",
            "fs_uid": "rs.fullstory.com`54XK5`4655074328608768:4513847218700288`ce27c96e`/1602771636",
            "new-algo-language": "scala",
            "_gat": "1",
            "__hssc": "69686351.6.1572357353053",
            "intercom-session-c9fj6354": "RzJVV0NsOVQwMHIvcVR3OXVOZENmc1pWbWhMZ09zczVSbHRlRXhMMDJ3dnJQV3dnRkVJTDZTQndRQUlQcFNxZi0teWJ1VmhEd0h1M0w5b20xeFV1TkU5dz09--1aff24c8ed30f3dc8ed16e2203be5cd7657d8711",
            "ALGO_SESSION": "b3c6a1f39bafe165e10912201a4fafbf77077c06-last-access=2019-10-29T14%3A08%3A23.828Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3"
          },
          "queryParameters": {}
        },
        "response": {
          "statusCode": 200,
          "headers": {
            "content-encoding": "gzip",
            "content-type": "application/json; charset=utf-8",
            "date": "Tue, 29 Oct 2019 14:08:23 GMT",
            "set-cookie": "ALGO_SESSION=1351a7646d8d4a9e3bcdee4338e76bf0ce668aa3-last-access=2019-10-29T14%3A08%3A23.915Z&user-session=acunniffe&sid=15016004-91b0-434a-b149-b57fe300f1c3; Max-Age=86400; Expires=Wed, 30 Oct 2019 14:08:23 GMT; Path=/; Domain=algorithmia.com; Secure; HTTPOnly",
            "strict-transport-security": "max-age=86400; includeSubDomains",
            "vary": "Accept-Encoding",
            "x-content-type-options": "nosniff",
            "x-frame-options": "DENY",
            "content-length": "1439",
            "connection": "keep-alive"
          },
          "body": {
            "name": "abc",
            "details": {
              "label": "abc",
              "tagline": ""
            },
            "settings": {
              "algorithm_callability": "private",
              "source_visibility": "closed",
              "language": "scala",
              "environment": "cpu",
              "license": "apl",
              "network_access": "full",
              "pipeline_enabled": true
            },
            "version_info": {
              "git_hash": "0826d84478e5d7e4409dfb8a40ddf63c8f89a59f"
            },
            "compilation": {
              "successful": true,
              "output": "Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\nGetting org.scala-sbt sbt 0.13.9 ...\n:: retrieving :: org.scala-sbt#boot-app\nconfs: [default]\n52 artifacts copied, 0 already retrieved (17785kB/134ms)\nGetting Scala 2.10.5 (for sbt)...\n:: retrieving :: org.scala-sbt#boot-scala\nconfs: [default]\n5 artifacts copied, 0 already retrieved (24493kB/64ms)\n[info] Set current project to abc (in build file:/tmp/build/)\n[success] Total time: 1 s, completed Oct 29, 2019 2:08:13 PM\n[info] Updating {file:/tmp/build/}build...\n[info] Resolving org.scala-lang#scala-library;2.11.11 ...\n[A\r\u001b[2K[info] Resolving com.algorithmia#algorithmia-client;1.0.+ ...\n[A\r\u001b[2K[info] Resolving com.algorithmia#algorithmia-client;1.0.+ ...\n[A\r\u001b[2K[info] Resolving com.google.code.gson#gson;2.6.2 ...\n[A\r\u001b[2K[info] Resolving org.apache.httpcomponents#httpasyncclient;4.1.1 ...\n[A\r\u001b[2K[info] Resolving org.apache.httpcomponents#httpcore;4.4.4 ...\n[A\r\u001b[2K[info] Resolving org.apache.httpcomponents#httpcore-nio;4.4.4 ...\n[A\r\u001b[2K[info] Resolving org.apache.httpcomponents#httpclient;4.5.1 ...\n[A\r\u001b[2K[info] Resolving commons-logging#commons-logging;1.2 ...\n[A\r\u001b[2K[info] Resolving commons-codec#commons-codec;1.9 ...\n[A\r\u001b[2K[info] Resolving commons-io#commons-io;2.5 ...\n[A\r\u001b[2K[info] Resolving com.algorithmia#algorithmia-extras;1.0.+ ...\n[A\r\u001b[2K[info] Resolving com.algorithmia#algorithmia-extras;1.0.+ ...\n[A\r\u001b[2K[info] Resolving com.algorithmia#algorithmia-client;[1.0,1.1) ...\n[A\r\u001b[2K[info] Resolving com.algorithmia#algorithmia-client;[1.0,1.1) ...\n[A\r\u001b[2K[info] Resolving commons-codec#commons-codec;1.10 ...\n[A\r\u001b[2K[info] Resolving org.scalatest#scalatest_2.11;3.0.1 ...\n[A\r\u001b[2K[info] Resolving org.scalactic#scalactic_2.11;3.0.1 ...\n[A\r\u001b[2K[info] Resolving org.scala-lang#scala-reflect;2.11.8 ...\n[A\r\u001b[2K[info] Resolving org.scala-lang.modules#scala-xml_2.11;1.0.5 ...\n[A\r\u001b[2K[info] Resolving org.scala-lang.modules#scala-parser-combinators_2.11;1.0.4 ...\n[A\r\u001b[2K[info] Resolving org.scala-lang#scala-compiler;2.11.11 ...\n[A\r\u001b[2K[info] Resolving org.scala-lang#scala-reflect;2.11.11 ...\n[A\r\u001b[2K[info] Resolving jline#jline;2.14.3 ...\n[info] Done updating.\n[info] Compiling 1 Scala source to /tmp/build/target/scala-2.11/classes...\n[info] Packaging /tmp/build/target/scala-2.11/abc_2.11-1.0-SNAPSHOT.jar ...\n[info] Done packaging.\n[success] Total time: 7 s, completed Oct 29, 2019 2:08:20 PM\nzip warning: name not matched: lib\nadding: lib_managed/ (stored 0%)\nadding: lib_managed/jars/ (stored 0%)\nadding: lib_managed/jars/org.apache.httpcomponents/ (stored 0%)\nadding: lib_managed/jars/org.apache.httpcomponents/httpcore/ (stored 0%)\nadding: lib_managed/jars/org.apache.httpcomponents/httpcore/httpcore-4.4.4.jar (deflated 11%)\nadding: lib_managed/jars/org.apache.httpcomponents/httpasyncclient/ (stored 0%)\nadding: lib_managed/jars/org.apache.httpcomponents/httpasyncclient/httpasyncclient-4.1.1.jar (deflated 8%)\nadding: lib_managed/jars/org.apache.httpcomponents/httpclient/ (stored 0%)\nadding: lib_managed/jars/org.apache.httpcomponents/httpclient/httpclient-4.5.1.jar (deflated 9%)\nadding: lib_managed/jars/org.apache.httpcomponents/httpcore-nio/ (stored 0%)\nadding: lib_managed/jars/org.apache.httpcomponents/httpcore-nio/httpcore-nio-4.4.4.jar (deflated 10%)\nadding: lib_managed/jars/org.scala-lang/ (stored 0%)\nadding: lib_managed/jars/org.scala-lang/scala-reflect/ (stored 0%)\nadding: lib_managed/jars/org.scala-lang/scala-reflect/scala-reflect-2.11.8.jar (deflated 11%)\nadding: lib_managed/jars/org.scala-lang/scala-reflect/scala-reflect-2.11.11.jar (deflated 11%)\nadding: lib_managed/jars/org.scala-lang/scala-library/ (stored 0%)\nadding: lib_managed/jars/org.scala-lang/scala-library/scala-library-2.11.11.jar (deflated 11%)\nadding: lib_managed/jars/org.scala-lang/scala-compiler/ (stored 0%)\nadding: lib_managed/jars/org.scala-lang/scala-compiler/scala-compiler-2.11.11.jar (deflated 12%)\nadding: lib_managed/jars/com.algorithmia/ (stored 0%)\nadding: lib_managed/jars/com.algorithmia/algorithmia-client/ (stored 0%)\nadding: lib_managed/jars/com.algorithmia/algorithmia-client/algorithmia-client-1.0.16.jar (deflated 14%)\nadding: lib_managed/jars/com.algorithmia/algorithmia-extras/ (stored 0%)\nadding: lib_managed/jars/com.algorithmia/algorithmia-extras/algorithmia-extras-1.0.1.jar (deflated 20%)\nadding: lib_managed/jars/jline/ (stored 0%)\nadding: lib_managed/jars/jline/jline/ (stored 0%)\nadding: lib_managed/jars/jline/jline/jline-2.14.3.jar (deflated 7%)\nadding: lib_managed/jars/com.google.code.gson/ (stored 0%)\nadding: lib_managed/jars/com.google.code.gson/gson/ (stored 0%)\nadding: lib_managed/jars/com.google.code.gson/gson/gson-2.6.2.jar (deflated 10%)\nadding: lib_managed/jars/commons-logging/ (stored 0%)\nadding: lib_managed/jars/commons-logging/commons-logging/ (stored 0%)\nadding: lib_managed/jars/commons-logging/commons-logging/commons-logging-1.2.jar (deflated 8%)\nadding: lib_managed/jars/commons-codec/ (stored 0%)\nadding: lib_managed/jars/commons-codec/commons-codec/ (stored 0%)\nadding: lib_managed/jars/commons-codec/commons-codec/commons-codec-1.10.jar (deflated 18%)\nadding: lib_managed/jars/commons-io/ (stored 0%)\nadding: lib_managed/jars/commons-io/commons-io/ (stored 0%)\nadding: lib_managed/jars/commons-io/commons-io/commons-io-2.5.jar (deflated 9%)\nadding: lib_managed/bundles/ (stored 0%)\nadding: lib_managed/bundles/org.scalactic/ (stored 0%)\nadding: lib_managed/bundles/org.scalactic/scalactic_2.11/ (stored 0%)\nadding: lib_managed/bundles/org.scalactic/scalactic_2.11/scalactic_2.11-3.0.1.jar (deflated 8%)\nadding: lib_managed/bundles/org.scala-lang.modules/ (stored 0%)\nadding: lib_managed/bundles/org.scala-lang.modules/scala-xml_2.11/ (stored 0%)\nadding: lib_managed/bundles/org.scala-lang.modules/scala-xml_2.11/scala-xml_2.11-1.0.5.jar (deflated 8%)\nadding: lib_managed/bundles/org.scala-lang.modules/scala-parser-combinators_2.11/ (stored 0%)\nadding: lib_managed/bundles/org.scala-lang.modules/scala-parser-combinators_2.11/scala-parser-combinators_2.11-1.0.4.jar (deflated 16%)\nadding: lib_managed/bundles/org.scalatest/ (stored 0%)\nadding: lib_managed/bundles/org.scalatest/scalatest_2.11/ (stored 0%)\nadding: lib_managed/bundles/org.scalatest/scalatest_2.11/scalatest_2.11-3.0.1.jar (deflated 13%)\nadding: target/scala-2.11/abc_2.11-1.0-SNAPSHOT.jar (deflated 22%)\nadding: bin/build (deflated 34%)\nadding: bin/pipe (deflated 35%)\nadding: bin/setup (deflated 55%)\nadding: bin/test (stored 0%)\n"
            },
            "self_link": "https://api.algorithmia.com/v1/algorithms/acunniffe/abc/versions/0826d84478e5d7e4409dfb8a40ddf63c8f89a59f",
            "resource_type": "algorithm"
          }
        }
      }
    ]
  }
}
